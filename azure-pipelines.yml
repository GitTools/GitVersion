trigger:
  branches:
    include:
    - master
    - fix/*
    - feature/*
pr:
  branches:
    include:
    - master

variables:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 'true'
  DOTNET_CLI_TELEMETRY_OPTOUT: 'true'

stages:
- stage: Build
  displayName: 'Build'
  jobs:
  - job: Build
    strategy:
      matrix:
        'Windows':
          VM_IMAGE: 'windows-latest'
        'Linux':
          VM_IMAGE: 'ubuntu-latest'
        'macOS':
          VM_IMAGE: 'macOS-latest'
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - template: .azurepipelines/build.yml
- stage: Test
  displayName: 'Unit Test'
  dependsOn: []
  jobs:
  - job: Test
    strategy:
      matrix:
        'Windows':
          VM_IMAGE: 'windows-latest'
        'Linux':
          VM_IMAGE: 'ubuntu-latest'
        'macOS':
          VM_IMAGE: 'macOS-latest'
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - template: .azurepipelines/test.yml

- stage: Artifact_Test
  displayName: 'Artifacts test'
  dependsOn:
  - Build
  - Test
  condition: succeeded()
  jobs:
  - template: .azurepipelines/artifacts-test.yml
    parameters:
      name: Linux
      vmImage: 'ubuntu-latest'
      distros: [ 'alpine.3.10-x64', 'centos.7-x64', 'debian.9-x64', 'fedora.30-x64', 'ubuntu.16.04-x64', 'ubuntu.18.04-x64' ]
      dotnetVersions: [ '3.1' ]

- stage: Docker
  displayName: 'Docker Build & Test'
  dependsOn: Artifact_Test
  condition: succeeded()
  jobs:
  - template: .azurepipelines/docker.yml
    parameters:
      name: Linux
      vmImage: 'ubuntu-latest'
      distros: [ 'alpine.3.10-x64', 'centos.7-x64', 'debian.9-x64', 'fedora.30-x64', 'ubuntu.16.04-x64', 'ubuntu.18.04-x64' ]
      dotnetVersions: [ '3.1' ]

- stage: Publish
  displayName: 'Publish'
  dependsOn: Artifact_Test
  condition: succeeded()
  jobs:
  - job: Publish
    pool:
      vmImage: windows-latest
    strategy:
      matrix:
        CI:
          TASK_NAME: 'CI'
        NuGet:
          TASK_NAME: 'NuGet'
        Chocolatey:
         TASK_NAME: 'Chocolatey'
        Documentation:
          TASK_NAME: 'Documentation'
    steps:
    - template: .azurepipelines/publish.yml
      parameters:
        taskName: $(TASK_NAME)

- stage: Release
  displayName: 'Release'
  dependsOn:
  - Docker
  - Publish
  condition: succeeded()
  jobs:
  - job: Release
    pool:
      vmImage: windows-latest
    steps:
    - template: .azurepipelines/release.yml
