name: Build

on:
  push:
    branches:
    - main
    - 'fix/*'
    - 'feature/*'
    paths:
    - '**'
    - '!docs/**'

  pull_request:
    branches:
    - main
    paths:
    - '**'
    - '!docs/**'

  repository_dispatch:
    types: [release]

env:
  DOTNET_ROLL_FORWARD_ON_NO_CANDIDATE_FX: 2
  ENABLED_MULTI_STAGE_BUILD: true
  ENABLED_UNIT_TESTS: true
  ENABLED_PUBLISH_DOCKER: true
  ENABLED_PUBLISH_NUGET: true
  ENABLED_PUBLISH_CHOCOLATEY: true
  ENABLED_PUBLISH_RELEASE: true
  ENABLED_DIAGNOSTICS: ${{ secrets.ENABLED_DIAGNOSTICS }}

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2.3.4
    - name: Fetch all history for all tags and branches
      run: |
        git fetch --prune --unshallow
    - name: Cache tools
      id: cache-tools
      uses: actions/cache@v2.1.6
      with:
        path: tools
        key: v1-${{ runner.os }}-tools-${{ hashFiles('build.cake') }}
    - name: Cache dotnet
      id: cache-dotnet
      uses: actions/cache@v2.1.6
      with:
        path: .dotnet
        key: v1-${{ runner.os }}-dotnet-${{ hashFiles('build/build.config') }}
    - name: '[Cake build & pack]'
      shell: pwsh
      run: ./build.ps1 -target Pack
    - uses: actions/upload-artifact@v2.2.4
      if: matrix.os == 'windows-latest'
      with:
        name: storage
        path: ${{ github.workspace }}/artifacts
      name: 'Upload artifacts folder'
    - uses: actions/upload-artifact@v2.2.4
      with:
        name: storage-${{ matrix.os }}
        path: ${{ github.workspace }}/artifacts/native
      name: 'Upload native folder'

  test:
    name: Unit Test
    runs-on: ${{ matrix.os }}
    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2.3.4
    - name: Fetch all history for all tags and branches
      run: |
        git fetch --prune --unshallow
    - name: Cache tools
      id: cache-tools
      uses: actions/cache@v2.1.6
      with:
        path: tools
        key: v1-${{ runner.os }}-tools-${{ hashFiles('build.cake') }}
    - name: Cache dotnet
      id: cache-dotnet
      uses: actions/cache@v2.1.6
      with:
        path: .dotnet
        key: v1-${{ runner.os }}-dotnet-${{ hashFiles('build/build.config') }}
    - name: '[Run Test]'
      shell: pwsh
      run: ./build.ps1 -target Test

  artifact_linux_test:
    name: Artifacts Linux Test
    needs: [build, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux]
        targetFramework: [ '3.1', '5.0' ]
        distro: [ alpine.3.12-x64, centos.7-x64, centos.8-x64, debian.9-x64, debian.10-x64, fedora.33-x64, ubuntu.16.04-x64, ubuntu.18.04-x64, ubuntu.20.04-x64, ubuntu.20.04-arm64 ]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2.3.4
    - name: Fetch all history for all tags and branches
      run: |
        git fetch --prune --unshallow
    - name: Cache tools
      id: cache-tools
      uses: actions/cache@v2.1.6
      with:
        path: tools
        key: v1-${{ runner.os }}-tools-${{ hashFiles('build.cake') }}
    - name: Cache dotnet
      id: cache-dotnet
      uses: actions/cache@v2.1.6
      with:
        path: .dotnet
        key: v1-${{ runner.os }}-dotnet-${{ hashFiles('build/build.config') }}
    - uses: actions/download-artifact@v2.0.10
      name: Download artifacts folder
      with:
        name: storage
        path: ${{ github.workspace }}/artifacts
    - name: '[Docker Test Artifacts]'
      shell: pwsh
      run: ./build.ps1 -target Artifacts-Test -DockerDistro ${{ matrix.distro }} -DockerDotnetVersion ${{ matrix.targetFramework }}

  artifact_msbuild_test:
    name: Artifacts MsBuild Test
    needs: [build, test]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2.3.4
    - name: Fetch all history for all tags and branches
      run: |
        git fetch --prune --unshallow
    - name: Cache tools
      id: cache-tools
      uses: actions/cache@v2.1.6
      with:
        path: tools
        key: v1-${{ runner.os }}-tools-${{ hashFiles('build.cake') }}
    - name: Cache dotnet
      id: cache-dotnet
      uses: actions/cache@v2.1.6
      with:
        path: .dotnet
        key: v1-${{ runner.os }}-dotnet-${{ hashFiles('build/build.config') }}
    - uses: actions/download-artifact@v2.0.10
      name: Download artifacts folder
      with:
        name: storage
        path: ${{ github.workspace }}/artifacts
    - name: '[MsBuild Test Artifacts]'
      shell: pwsh
      run: ./build.ps1 -target Artifacts-MsBuildFull-Test

  artifact_commandline_test:
    name: Artifacts Commandline Test
    needs: [build, test]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2.3.4
    - name: Fetch all history for all tags and branches
      run: |
        git fetch --prune --unshallow
    - name: Cache tools
      id: cache-tools
      uses: actions/cache@v2.1.6
      with:
        path: tools
        key: v1-${{ runner.os }}-tools-${{ hashFiles('build.cake') }}
    - name: Cache dotnet
      id: cache-dotnet
      uses: actions/cache@v2.1.6
      with:
        path: .dotnet
        key: v1-${{ runner.os }}-dotnet-${{ hashFiles('build/build.config') }}
    - uses: actions/download-artifact@v2.0.10
      name: Download artifacts folder
      with:
        name: storage
        path: ${{ github.workspace }}/artifacts
    - name: '[Commandline Test Artifacts]'
      shell: pwsh
      run: ./build.ps1 -target Artifacts-Commandline-Test

  artifact_portable_test:
    name: Artifacts Portable Test
    needs: [build, test]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2.3.4
    - name: Fetch all history for all tags and branches
      run: |
        git fetch --prune --unshallow
    - name: Cache tools
      id: cache-tools
      uses: actions/cache@v2.1.6
      with:
        path: tools
        key: v1-${{ runner.os }}-tools-${{ hashFiles('build.cake') }}
    - name: Cache dotnet
      id: cache-dotnet
      uses: actions/cache@v2.1.6
      with:
        path: .dotnet
        key: v1-${{ runner.os }}-dotnet-${{ hashFiles('build/build.config') }}
    - uses: actions/download-artifact@v2.0.10
      name: Download artifacts folder
      with:
        name: storage
        path: ${{ github.workspace }}/artifacts
    - name: '[Portable Test Artifacts]'
      shell: pwsh
      run: ./build.ps1 -target Artifacts-Portable-Test

  docker:
    name: Docker
    needs: [artifact_linux_test, artifact_msbuild_test, artifact_commandline_test, artifact_portable_test]
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    strategy:
      matrix:
        os: [linux]
        targetFramework: [ '3.1', '5.0' ]
        distro: [ alpine.3.12-x64, centos.7-x64, centos.8-x64, debian.9-x64, debian.10-x64, fedora.33-x64, ubuntu.16.04-x64, ubuntu.18.04-x64, ubuntu.20.04-x64, ubuntu.20.04-arm64 ]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2.3.4
    - name: Fetch all history for all tags and branches
      run: |
        git fetch --prune --unshallow
    - name: Cache tools
      id: cache-tools
      uses: actions/cache@v2.1.6
      with:
        path: tools
        key: v1-${{ runner.os }}-tools-${{ hashFiles('build.cake') }}
    - name: Cache dotnet
      id: cache-dotnet
      uses: actions/cache@v2.1.6
      with:
        path: .dotnet
        key: v1-${{ runner.os }}-dotnet-${{ hashFiles('build/build.config') }}
    - uses: actions/download-artifact@v2.0.10
      name: Download artifacts folder
      with:
        name: storage
        path: ${{ github.workspace }}/artifacts
    - name: '[Docker build & Test]'
      shell: pwsh
      run: ./build.ps1 -target Publish-DockerHub -DockerDistro ${{ matrix.distro }} -DockerDotnetVersion ${{ matrix.targetFramework }}

  publish:
    name: Publish
    needs: [artifact_linux_test, artifact_msbuild_test, artifact_commandline_test, artifact_portable_test]
    runs-on: windows-latest
    strategy:
      matrix:
        taskName: [CI, NuGet, Chocolatey]
      fail-fast: false
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USERNAME: ${{ secrets.GITHUB_USERNAME }}
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      NUGET_API_URL: ${{ secrets.NUGET_API_URL }}
      CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
      CHOCOLATEY_API_URL: ${{ secrets.CHOCOLATEY_API_URL }}
    steps:
    - uses: actions/checkout@v2.3.4
    - name: Fetch all history for all tags and branches
      run: |
        git fetch --prune --unshallow
    - name: Cache tools
      id: cache-tools
      uses: actions/cache@v2.1.6
      with:
        path: tools
        key: v1-${{ runner.os }}-tools-${{ hashFiles('build.cake') }}
    - name: Cache dotnet
      id: cache-dotnet
      uses: actions/cache@v2.1.6
      with:
        path: .dotnet
        key: v1-${{ runner.os }}-dotnet-${{ hashFiles('build/build.config') }}
    - uses: actions/download-artifact@v2.0.10
      name: Download artifacts folder
      with:
        name: storage
        path: ${{ github.workspace }}/artifacts
    - name: '[Publish]'
      shell: pwsh
      run: ./build.ps1 -target Publish-${{ matrix.taskName }}

  release:
    name: Release
    needs: [docker, publish]
    runs-on: windows-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v2.3.4
    - name: Fetch all history for all tags and branches
      run: |
        git fetch --prune --unshallow
    - name: Cache tools
      id: cache-tools
      uses: actions/cache@v2.1.6
      with:
        path: tools
        key: v1-${{ runner.os }}-tools-${{ hashFiles('build.cake') }}
    - name: Cache dotnet
      id: cache-dotnet
      uses: actions/cache@v2.1.6
      with:
        path: .dotnet
        key: v1-${{ runner.os }}-dotnet-${{ hashFiles('build/build.config') }}
    - uses: actions/download-artifact@v2.0.10
      name: Download artifacts folder
      with:
        name: storage
        path: ${{ github.workspace }}/artifacts
    - uses: actions/download-artifact@v2.0.10
      name: Download windows native folder
      with:
        name: storage-windows-latest
        path: ${{ github.workspace }}/artifacts/native
    - uses: actions/download-artifact@v2.0.10
      name: Download linux native folder
      with:
        name: storage-ubuntu-latest
        path: ${{ github.workspace }}/artifacts/native
    - uses: actions/download-artifact@v2.0.10
      name: Download osx native folder
      with:
        name: storage-macos-latest
        path: ${{ github.workspace }}/artifacts/native
    - name: '[Release]'
      shell: pwsh
      run: ./build.ps1 -target Release
