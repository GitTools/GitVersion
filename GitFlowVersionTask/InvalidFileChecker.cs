namespace GitFlowVersionTask
{
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using GitFlowVersion;
    using Microsoft.Build.Framework;

    public static class InvalidFileChecker
    {
        public static void CheckForInvalidFiles(IEnumerable<ITaskItem> compileFiles, string projectFile)
        {
            foreach (var compileFile in GetInvalidFiles(compileFiles, projectFile))
            {
                throw new ErrorException("File contains assembly version attributes with conflict with the attributes generated by GitFlowVersion" + compileFile);
            }
        }

        static bool FileContainsVersionAttribute(string compileFile, string projectFile)
        {
            var combine = Path.Combine(Path.GetDirectoryName(projectFile), compileFile);
            var allText = File.ReadAllText(combine);
            return allText.Contains("AssemblyVersion") ||
                   allText.Contains("AssemblyFileVersion") ||
                   allText.Contains("AssemblyInformationalVersion");
        }

        static IEnumerable<string> GetInvalidFiles(IEnumerable<ITaskItem> compileFiles, string projectFile)
        {
            return compileFiles.Select(x => x.ItemSpec)
                .Where(compileFile => compileFile.Contains("AssemblyInfo"))
                .Where(s => FileContainsVersionAttribute(s, projectFile));
        }

    }
}