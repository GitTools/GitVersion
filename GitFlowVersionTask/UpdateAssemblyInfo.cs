namespace GitFlowVersionTask
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using GitFlowVersion;
    using GitFlowVersion.Integration;
    using Microsoft.Build.Framework;
    using Microsoft.Build.Utilities;
    using Logger = GitFlowVersion.Logger;


    public class UpdateAssemblyInfo : Task
    {
        private readonly IIntegration _integration;
        private readonly GitFlowVersion.Integration.Interfaces.ILogger _logger;

        public bool SignAssembly { get; set; }

        [Required]
        public string SolutionDirectory { get; set; }

        [Required]
        public string ProjectFile { get; set; }

        [Required]
        public ITaskItem[] CompileFiles { get; set; }

        [Output]
        public string AssemblyInfoTempFilePath { get; set; }

        public UpdateAssemblyInfo()
            : this(IntegrationManager.Default().Detect())
        { }

        public UpdateAssemblyInfo(IIntegration integration)
        {
            _integration = integration;
            _logger = new TaskLogger(this);
        }

        public UpdateAssemblyInfo(string integrationCode) 
            : this(IntegrationManager.Default().GetByCode(integrationCode))
        { }

        public override bool Execute()
        {
            try
            {
                TempFileTracker.DeleteTempFiles();

                Logger.WriteInfo = _logger.LogInfo;

                foreach (var compileFile in GetInvalidFiles())
                {
                    _logger.LogError("File contains assembly version attributes with conflict with the attributes generated by GitFlowVersion", compileFile);
                    return false;
                }

                var gitDirectory = GitDirFinder.TreeWalkForGitDir(SolutionDirectory);

                var ar = _integration.PerformPreProcessingSteps(_logger, gitDirectory);

                switch (ar)
                {
                    case AnalysisResult.EarlySuccessfulExit:
                        return true;
                    case AnalysisResult.FatalError:
                        return false;
                    case AnalysisResult.Ok:
                        var versionAndBranch = VersionCache.GetVersion(gitDirectory);

                        WriteIntegrationParameters(versionAndBranch);
                        CreateTempAssemblyInfo(versionAndBranch);

                        return true;
                    default:
                        throw new InvalidOperationException(string.Format("Unrecognized AnalysisResult value ({0})", ar));
                }
            }
            catch (ErrorException errorException)
            {
                _logger.LogError(errorException.Message);
                return false;
            }
            catch (Exception exception)
            {
                _logger.LogError("Error occurred: " + exception);
                return false;
            }
            finally
            {
                Logger.Reset();
            }
        }

        void WriteIntegrationParameters(VersionAndBranch versionAndBranch)
        {
            var integrationManager = IntegrationManager.Default();
            foreach (var integration in integrationManager.Integrations.Values)
            {
                foreach (var buildParameters in integration.GenerateBuildLogOutput(versionAndBranch))
                {
                    _logger.LogWarning(buildParameters);
                }
            }
        }

        bool FileContainsVersionAttribute(string compileFile)
        {
            var combine = Path.Combine(Path.GetDirectoryName(ProjectFile), compileFile);
            var allText = File.ReadAllText(combine);
            return allText.Contains("AssemblyVersion") ||
                   allText.Contains("AssemblyFileVersion") ||
                   allText.Contains("AssemblyInformationalVersion");
        }

        void CreateTempAssemblyInfo(VersionAndBranch versionAndBranch)
        {
            var assemblyInfoBuilder = new AssemblyInfoBuilder
                                      {
                                          VersionAndBranch = versionAndBranch,
                                          SignAssembly = SignAssembly
                                      };
            var assemblyInfo = assemblyInfoBuilder.GetAssemblyInfoText();

            var tempFileName = string.Format("AssemblyInfo_{0}_{1}.cs", Path.GetFileNameWithoutExtension(ProjectFile), Path.GetRandomFileName());
            AssemblyInfoTempFilePath = Path.Combine(TempFileTracker.TempPath, tempFileName);
            File.WriteAllText(AssemblyInfoTempFilePath, assemblyInfo);
        }


        IEnumerable<string> GetInvalidFiles()
        {
            return CompileFiles.Select(x => x.ItemSpec)
                               .Where(compileFile => compileFile.Contains("AssemblyInfo"))
                               .Where(FileContainsVersionAttribute);
        }

    }
}