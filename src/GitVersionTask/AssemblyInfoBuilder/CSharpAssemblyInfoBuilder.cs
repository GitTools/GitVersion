using System;
using System.Collections.Generic;
using System.Linq;
using GitVersion;

public class CSharpAssemblyInfoBuilder : AssemblyInfoBuilder
{
    public override string AssemblyInfoExtension { get { return "cs"; } }

    public override string GetAssemblyInfoText(VersionVariables vars, string rootNamespace)
    {
        var v = vars.ToList();

        // TODO: Consolidate this with GitVersion.VersionAssemblyInfoResources.AssemblyVersionInfoTemplates. @asbjornu
        var assemblyInfo = string.Format(
@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     GitVersion
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: AssemblyVersion(""{0}"")]
[assembly: AssemblyFileVersion(""{1}"")]
[assembly: AssemblyInformationalVersion(""{2}"")]

namespace {4}
{{

    [global::System.Runtime.CompilerServices.CompilerGenerated]
    static class GitVersionInformation
    {{
{3}
    }}

}}
",
        vars.AssemblySemVer,
        vars.AssemblySemFileVer,
        vars.InformationalVersion,
        GenerateStaticVariableMembers(v),
        rootNamespace);

        return assemblyInfo;
    }

    static string GenerateStaticVariableMembers(IList<KeyValuePair<string, string>> vars)
    {
        return GenerateMembers(vars, "        public static string {0} = \"{1}\";");
    }


    static string GenerateMembers(IList<KeyValuePair<string, string>> vars, string memberFormat)
    {
        return string.Join(Environment.NewLine, vars.Select(v => string.Format(memberFormat, v.Key, v.Value)));
    }
}