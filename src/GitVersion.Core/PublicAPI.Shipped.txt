#nullable enable
abstract GitVersion.BuildAgents.BuildAgentBase.EnvironmentVariable.get -> string!
abstract GitVersion.BuildAgents.BuildAgentBase.GenerateSetParameterMessage(string! name, string! value) -> string![]!
abstract GitVersion.BuildAgents.BuildAgentBase.GenerateSetVersionMessage(GitVersion.OutputVariables.VersionVariables! variables) -> string?
abstract GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep.DefaultResult.get -> string?
abstract GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep.GetPrompt(GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> string!
abstract GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep.HandleResult(string? result, System.Collections.Generic.Queue<GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep!>! steps, GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> GitVersion.Configuration.Init.StepResult!
abstract GitVersion.GitVersionModule.RegisterTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
abstract GitVersion.VersionCalculation.VersionStrategyBase.GetBaseVersions(GitVersion.Configuration.EffectiveBranchConfiguration! configuration) -> System.Collections.Generic.IEnumerable<GitVersion.VersionCalculation.BaseVersion!>!
const GitVersion.BuildAgents.AppVeyor.EnvironmentVariableName = "APPVEYOR" -> string!
const GitVersion.BuildAgents.AzurePipelines.EnvironmentVariableName = "TF_BUILD" -> string!
const GitVersion.BuildAgents.BitBucketPipelines.BranchEnvironmentVariableName = "BITBUCKET_BRANCH" -> string!
const GitVersion.BuildAgents.BitBucketPipelines.EnvironmentVariableName = "BITBUCKET_WORKSPACE" -> string!
const GitVersion.BuildAgents.BitBucketPipelines.PullRequestEnvironmentVariableName = "BITBUCKET_PR_ID" -> string!
const GitVersion.BuildAgents.BitBucketPipelines.TagEnvironmentVariableName = "BITBUCKET_TAG" -> string!
const GitVersion.BuildAgents.BuildKite.EnvironmentVariableName = "BUILDKITE" -> string!
const GitVersion.BuildAgents.CodeBuild.SourceVersionEnvironmentVariableName = "CODEBUILD_SOURCE_VERSION" -> string!
const GitVersion.BuildAgents.CodeBuild.WebHookEnvironmentVariableName = "CODEBUILD_WEBHOOK_HEAD_REF" -> string!
const GitVersion.BuildAgents.ContinuaCi.EnvironmentVariableName = "ContinuaCI.Version" -> string!
const GitVersion.BuildAgents.Drone.EnvironmentVariableName = "DRONE" -> string!
const GitVersion.BuildAgents.EnvRun.EnvironmentVariableName = "ENVRUN_DATABASE" -> string!
const GitVersion.BuildAgents.GitHubActions.EnvironmentVariableName = "GITHUB_ACTIONS" -> string!
const GitVersion.BuildAgents.GitHubActions.GitHubSetEnvTempFileEnvironmentVariableName = "GITHUB_ENV" -> string!
const GitVersion.BuildAgents.GitLabCi.EnvironmentVariableName = "GITLAB_CI" -> string!
const GitVersion.BuildAgents.Jenkins.EnvironmentVariableName = "JENKINS_URL" -> string!
const GitVersion.BuildAgents.MyGet.EnvironmentVariableName = "BuildRunner" -> string!
const GitVersion.BuildAgents.SpaceAutomation.EnvironmentVariableName = "JB_SPACE_PROJECT_KEY" -> string!
const GitVersion.BuildAgents.TeamCity.EnvironmentVariableName = "TEAMCITY_VERSION" -> string!
const GitVersion.BuildAgents.TravisCi.EnvironmentVariableName = "TRAVIS" -> string!
const GitVersion.Configuration.ConfigurationFileLocator.DefaultFileName = "GitVersion.yml" -> string!
const GitVersion.Configuration.GitVersionConfiguration.DefaultTagPrefix = "[vV]" -> string!
const GitVersion.Configuration.GitVersionConfiguration.DevelopBranchKey = "develop" -> string!
const GitVersion.Configuration.GitVersionConfiguration.DevelopBranchRegex = "^dev(elop)?(ment)?$" -> string!
const GitVersion.Configuration.GitVersionConfiguration.FeatureBranchKey = "feature" -> string!
const GitVersion.Configuration.GitVersionConfiguration.FeatureBranchRegex = "^features?[/-]" -> string!
const GitVersion.Configuration.GitVersionConfiguration.HotfixBranchKey = "hotfix" -> string!
const GitVersion.Configuration.GitVersionConfiguration.HotfixBranchRegex = "^hotfix(es)?[/-]" -> string!
const GitVersion.Configuration.GitVersionConfiguration.MainBranchKey = "main" -> string!
const GitVersion.Configuration.GitVersionConfiguration.MainBranchRegex = "^master$|^main$" -> string!
const GitVersion.Configuration.GitVersionConfiguration.MasterBranchKey = "master" -> string!
const GitVersion.Configuration.GitVersionConfiguration.PullRequestBranchKey = "pull-request" -> string!
const GitVersion.Configuration.GitVersionConfiguration.PullRequestRegex = "^(pull|pull\\-requests|pr)[/-]" -> string!
const GitVersion.Configuration.GitVersionConfiguration.ReleaseBranchKey = "release" -> string!
const GitVersion.Configuration.GitVersionConfiguration.ReleaseBranchRegex = "^releases?[/-]" -> string!
const GitVersion.Configuration.GitVersionConfiguration.SupportBranchKey = "support" -> string!
const GitVersion.Configuration.GitVersionConfiguration.SupportBranchRegex = "^support[/-]" -> string!
const GitVersion.VersionCalculation.IncrementStrategyFinder.DefaultMajorPattern = "\\+semver:\\s?(breaking|major)" -> string!
const GitVersion.VersionCalculation.IncrementStrategyFinder.DefaultMinorPattern = "\\+semver:\\s?(feature|minor)" -> string!
const GitVersion.VersionCalculation.IncrementStrategyFinder.DefaultNoBumpPattern = "\\+semver:\\s?(none|skip)" -> string!
const GitVersion.VersionCalculation.IncrementStrategyFinder.DefaultPatchPattern = "\\+semver:\\s?(fix|patch)" -> string!
const GitVersion.VersionCalculation.MergeMessageVersionStrategy.MergeMessageStrategyPrefix = "Merge message" -> string!
const GitVersion.VersionConverters.WixUpdater.WixVersionFileUpdater.WixVersionFileName = "GitVersion_WixVersion.wxi" -> string!
GitVersion.AssemblyInfoData
GitVersion.AssemblyInfoData.AssemblyInfoData() -> void
GitVersion.AssemblyInfoData.EnsureAssemblyInfo -> bool
GitVersion.AssemblyInfoData.Files -> System.Collections.Generic.ISet<string!>!
GitVersion.AssemblyInfoData.UpdateAssemblyInfo -> bool
GitVersion.AssemblyInfoData.UpdateProjectFiles -> bool
GitVersion.AuthenticationInfo
GitVersion.AuthenticationInfo.AuthenticationInfo() -> void
GitVersion.AuthenticationInfo.Password.get -> string?
GitVersion.AuthenticationInfo.Password.set -> void
GitVersion.AuthenticationInfo.Token.get -> string?
GitVersion.AuthenticationInfo.Token.set -> void
GitVersion.AuthenticationInfo.Username.get -> string?
GitVersion.AuthenticationInfo.Username.set -> void
GitVersion.BranchCommit
GitVersion.BranchCommit.Branch.get -> GitVersion.IBranch!
GitVersion.BranchCommit.BranchCommit() -> void
GitVersion.BranchCommit.BranchCommit(GitVersion.ICommit! commit, GitVersion.IBranch! branch) -> void
GitVersion.BranchCommit.Commit.get -> GitVersion.ICommit!
GitVersion.BranchCommit.Equals(GitVersion.BranchCommit? other) -> bool
GitVersion.BugException
GitVersion.BugException.BugException(string! message) -> void
GitVersion.BuildAgents.AppVeyor
GitVersion.BuildAgents.AppVeyor.AppVeyor(GitVersion.IEnvironment! environment, GitVersion.Logging.ILog! log) -> void
GitVersion.BuildAgents.AzurePipelines
GitVersion.BuildAgents.AzurePipelines.AzurePipelines(GitVersion.IEnvironment! environment, GitVersion.Logging.ILog! log) -> void
GitVersion.BuildAgents.BitBucketPipelines
GitVersion.BuildAgents.BitBucketPipelines.BitBucketPipelines(GitVersion.IEnvironment! environment, GitVersion.Logging.ILog! log) -> void
GitVersion.BuildAgents.BitBucketPipelines.WithPropertyFile(string! propertiesFileName) -> void
GitVersion.BuildAgents.BuildAgentBase
GitVersion.BuildAgents.BuildAgentBase.BuildAgentBase(GitVersion.IEnvironment! environment, GitVersion.Logging.ILog! log) -> void
GitVersion.BuildAgents.BuildAgentBase.Environment.get -> GitVersion.IEnvironment!
GitVersion.BuildAgents.BuildAgentBase.GenerateBuildLogOutput(GitVersion.OutputVariables.VersionVariables! variables) -> System.Collections.Generic.IEnumerable<string!>!
GitVersion.BuildAgents.BuildAgentResolver
GitVersion.BuildAgents.BuildAgentResolver.BuildAgentResolver(System.Collections.Generic.IEnumerable<GitVersion.BuildAgents.IBuildAgent!>! buildAgents, GitVersion.Logging.ILog! log) -> void
GitVersion.BuildAgents.BuildAgentResolver.Resolve() -> GitVersion.BuildAgents.ICurrentBuildAgent!
GitVersion.BuildAgents.BuildKite
GitVersion.BuildAgents.BuildKite.BuildKite(GitVersion.IEnvironment! environment, GitVersion.Logging.ILog! log) -> void
GitVersion.BuildAgents.BuildServerModule
GitVersion.BuildAgents.BuildServerModule.BuildServerModule() -> void
GitVersion.BuildAgents.CodeBuild
GitVersion.BuildAgents.CodeBuild.CodeBuild(GitVersion.IEnvironment! environment, GitVersion.Logging.ILog! log) -> void
GitVersion.BuildAgents.CodeBuild.WithPropertyFile(string! propertiesFileName) -> void
GitVersion.BuildAgents.ContinuaCi
GitVersion.BuildAgents.ContinuaCi.ContinuaCi(GitVersion.IEnvironment! environment, GitVersion.Logging.ILog! log) -> void
GitVersion.BuildAgents.Drone
GitVersion.BuildAgents.Drone.Drone(GitVersion.IEnvironment! environment, GitVersion.Logging.ILog! log) -> void
GitVersion.BuildAgents.EnvRun
GitVersion.BuildAgents.EnvRun.EnvRun(GitVersion.IEnvironment! environment, GitVersion.Logging.ILog! log) -> void
GitVersion.BuildAgents.GitHubActions
GitVersion.BuildAgents.GitHubActions.GitHubActions(GitVersion.IEnvironment! environment, GitVersion.Logging.ILog! log) -> void
GitVersion.BuildAgents.GitLabCi
GitVersion.BuildAgents.GitLabCi.GitLabCi(GitVersion.IEnvironment! environment, GitVersion.Logging.ILog! log) -> void
GitVersion.BuildAgents.GitLabCi.WithPropertyFile(string! propertiesFileName) -> void
GitVersion.BuildAgents.IBuildAgent
GitVersion.BuildAgents.IBuildAgent.CanApplyToCurrentContext() -> bool
GitVersion.BuildAgents.IBuildAgent.GetCurrentBranch(bool usingDynamicRepos) -> string?
GitVersion.BuildAgents.IBuildAgent.PreventFetch() -> bool
GitVersion.BuildAgents.IBuildAgent.ShouldCleanUpRemotes() -> bool
GitVersion.BuildAgents.IBuildAgent.WriteIntegration(System.Action<string?>! writer, GitVersion.OutputVariables.VersionVariables! variables, bool updateBuildNumber = true) -> void
GitVersion.BuildAgents.IBuildAgentResolver
GitVersion.BuildAgents.IBuildAgentResolver.Resolve() -> GitVersion.BuildAgents.ICurrentBuildAgent!
GitVersion.BuildAgents.ICurrentBuildAgent
GitVersion.BuildAgents.Jenkins
GitVersion.BuildAgents.Jenkins.Jenkins(GitVersion.IEnvironment! environment, GitVersion.Logging.ILog! log) -> void
GitVersion.BuildAgents.Jenkins.WithPropertyFile(string! propertiesFileName) -> void
GitVersion.BuildAgents.LocalBuild
GitVersion.BuildAgents.LocalBuild.LocalBuild(GitVersion.IEnvironment! environment, GitVersion.Logging.ILog! log) -> void
GitVersion.BuildAgents.MyGet
GitVersion.BuildAgents.MyGet.MyGet(GitVersion.IEnvironment! environment, GitVersion.Logging.ILog! log) -> void
GitVersion.BuildAgents.SpaceAutomation
GitVersion.BuildAgents.SpaceAutomation.SpaceAutomation(GitVersion.IEnvironment! environment, GitVersion.Logging.ILog! log) -> void
GitVersion.BuildAgents.TeamCity
GitVersion.BuildAgents.TeamCity.TeamCity(GitVersion.IEnvironment! environment, GitVersion.Logging.ILog! log) -> void
GitVersion.BuildAgents.TravisCi
GitVersion.BuildAgents.TravisCi.TravisCi(GitVersion.IEnvironment! environment, GitVersion.Logging.ILog! log) -> void
GitVersion.VersionCalculation.Cache.GitVersionCacheKey
GitVersion.VersionCalculation.Cache.GitVersionCacheKey.GitVersionCacheKey(string! value) -> void
GitVersion.VersionCalculation.Cache.GitVersionCacheKey.Value.get -> string!
GitVersion.CommitFilter
GitVersion.CommitFilter.CommitFilter() -> void
GitVersion.CommitFilter.ExcludeReachableFrom.get -> object?
GitVersion.CommitFilter.ExcludeReachableFrom.set -> void
GitVersion.CommitFilter.FirstParentOnly.get -> bool
GitVersion.CommitFilter.FirstParentOnly.set -> void
GitVersion.CommitFilter.IncludeReachableFrom.get -> object?
GitVersion.CommitFilter.IncludeReachableFrom.set -> void
GitVersion.CommitFilter.SortBy.get -> GitVersion.CommitSortStrategies
GitVersion.CommitFilter.SortBy.set -> void
GitVersion.CommitSortStrategies
GitVersion.CommitSortStrategies.None = 0 -> GitVersion.CommitSortStrategies
GitVersion.CommitSortStrategies.Reverse = 4 -> GitVersion.CommitSortStrategies
GitVersion.CommitSortStrategies.Time = 2 -> GitVersion.CommitSortStrategies
GitVersion.CommitSortStrategies.Topological = 1 -> GitVersion.CommitSortStrategies
GitVersion.Common.IRepositoryStore
GitVersion.Common.IRepositoryStore.ExcludingBranches(System.Collections.Generic.IEnumerable<GitVersion.IBranch!>! branchesToExclude) -> System.Collections.Generic.IEnumerable<GitVersion.IBranch!>!
GitVersion.Common.IRepositoryStore.FindBranch(string? branchName) -> GitVersion.IBranch?
GitVersion.Common.IRepositoryStore.FindCommitBranchesWasBranchedFrom(GitVersion.IBranch! branch, GitVersion.Configuration.GitVersionConfiguration! configuration, params GitVersion.IBranch![]! excludedBranches) -> System.Collections.Generic.IEnumerable<GitVersion.BranchCommit>!
GitVersion.Common.IRepositoryStore.FindCommitBranchesWasBranchedFrom(GitVersion.IBranch! branch, GitVersion.Configuration.GitVersionConfiguration! configuration, System.Collections.Generic.IEnumerable<GitVersion.IBranch!>! excludedBranches) -> System.Collections.Generic.IEnumerable<GitVersion.BranchCommit>!
GitVersion.Common.IRepositoryStore.FindCommitBranchWasBranchedFrom(GitVersion.IBranch? branch, GitVersion.Configuration.GitVersionConfiguration! configuration, params GitVersion.IBranch![]! excludedBranches) -> GitVersion.BranchCommit
GitVersion.Common.IRepositoryStore.FindMainBranch(GitVersion.Configuration.GitVersionConfiguration! configuration) -> GitVersion.IBranch?
GitVersion.Common.IRepositoryStore.FindMergeBase(GitVersion.IBranch? branch, GitVersion.IBranch? otherBranch) -> GitVersion.ICommit?
GitVersion.Common.IRepositoryStore.FindMergeBase(GitVersion.ICommit! commit, GitVersion.ICommit! mainlineTip) -> GitVersion.ICommit?
GitVersion.Common.IRepositoryStore.GetBranchesContainingCommit(GitVersion.ICommit? commit, System.Collections.Generic.IEnumerable<GitVersion.IBranch!>? branches = null, bool onlyTrackedBranches = false) -> System.Collections.Generic.IEnumerable<GitVersion.IBranch!>!
GitVersion.Common.IRepositoryStore.GetCommitLog(GitVersion.ICommit? baseVersionSource, GitVersion.ICommit? currentCommit) -> System.Collections.Generic.IEnumerable<GitVersion.ICommit!>!
GitVersion.Common.IRepositoryStore.GetCurrentCommit(GitVersion.IBranch! currentBranch, string? commitId) -> GitVersion.ICommit?
GitVersion.Common.IRepositoryStore.GetCurrentCommitTaggedVersion(GitVersion.ICommit? commit, string? tagPrefix) -> GitVersion.SemanticVersion?
GitVersion.Common.IRepositoryStore.GetMainlineBranches(GitVersion.ICommit! commit, GitVersion.Configuration.GitVersionConfiguration! configuration) -> System.Collections.Generic.IDictionary<string!, System.Collections.Generic.List<GitVersion.IBranch!>!>!
GitVersion.Common.IRepositoryStore.GetMainlineCommitLog(GitVersion.ICommit? baseVersionSource, GitVersion.ICommit? mainlineTip) -> System.Collections.Generic.IEnumerable<GitVersion.ICommit!>!
GitVersion.Common.IRepositoryStore.GetMergeBaseCommits(GitVersion.ICommit? mergeCommit, GitVersion.ICommit? mergedHead, GitVersion.ICommit? findMergeBase) -> System.Collections.Generic.IEnumerable<GitVersion.ICommit!>!
GitVersion.Common.IRepositoryStore.GetNumberOfUncommittedChanges() -> int
GitVersion.Common.IRepositoryStore.GetReleaseBranches(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, GitVersion.Configuration.BranchConfiguration!>>! releaseBranchConfig) -> System.Collections.Generic.IEnumerable<GitVersion.IBranch!>!
GitVersion.Common.IRepositoryStore.GetSourceBranches(GitVersion.IBranch! branch, GitVersion.Configuration.GitVersionConfiguration! configuration, params GitVersion.IBranch![]! excludedBranches) -> System.Collections.Generic.IEnumerable<GitVersion.IBranch!>!
GitVersion.Common.IRepositoryStore.GetSourceBranches(GitVersion.IBranch! branch, GitVersion.Configuration.GitVersionConfiguration! configuration, System.Collections.Generic.IEnumerable<GitVersion.IBranch!>! excludedBranches) -> System.Collections.Generic.IEnumerable<GitVersion.IBranch!>!
GitVersion.Common.IRepositoryStore.GetTargetBranch(string? targetBranchName) -> GitVersion.IBranch!
GitVersion.Common.IRepositoryStore.GetValidVersionTags(string? tagPrefixRegex, System.DateTimeOffset? olderThan = null) -> System.Collections.Generic.IEnumerable<(GitVersion.ITag! Tag, GitVersion.SemanticVersion! Semver, GitVersion.ICommit! Commit)>!
GitVersion.Common.IRepositoryStore.GetVersionTagsOnBranch(GitVersion.IBranch! branch, string? tagPrefixRegex) -> System.Collections.Generic.IEnumerable<GitVersion.SemanticVersion!>!
GitVersion.Common.IRepositoryStore.IsCommitOnBranch(GitVersion.ICommit? baseVersionSource, GitVersion.IBranch! branch, GitVersion.ICommit! firstMatchingCommit) -> bool
GitVersion.ConfigInfo
GitVersion.ConfigInfo.ConfigFile -> string?
GitVersion.ConfigInfo.ConfigInfo() -> void
GitVersion.ConfigInfo.OverrideConfig -> GitVersion.Configuration.GitVersionConfiguration?
GitVersion.ConfigInfo.ShowConfig -> bool
GitVersion.Configuration.BranchConfiguration
GitVersion.Configuration.BranchConfiguration.Apply(GitVersion.Configuration.BranchConfiguration! overrides) -> GitVersion.Configuration.BranchConfiguration!
GitVersion.Configuration.BranchConfiguration.BranchConfiguration() -> void
GitVersion.Configuration.BranchConfiguration.BranchConfiguration(GitVersion.Configuration.BranchConfiguration! branchConfiguration) -> void
GitVersion.Configuration.BranchConfiguration.CommitMessageIncrementing.get -> GitVersion.VersionCalculation.CommitMessageIncrementMode?
GitVersion.Configuration.BranchConfiguration.CommitMessageIncrementing.set -> void
GitVersion.Configuration.BranchConfiguration.Increment.get -> GitVersion.IncrementStrategy?
GitVersion.Configuration.BranchConfiguration.Increment.set -> void
GitVersion.Configuration.BranchConfiguration.Inherit(GitVersion.Configuration.BranchConfiguration? parentConfig) -> GitVersion.Configuration.BranchConfiguration!
GitVersion.Configuration.BranchConfiguration.IsMainline.get -> bool?
GitVersion.Configuration.BranchConfiguration.IsMainline.set -> void
GitVersion.Configuration.BranchConfiguration.IsReleaseBranch.get -> bool?
GitVersion.Configuration.BranchConfiguration.IsReleaseBranch.set -> void
GitVersion.Configuration.BranchConfiguration.IsSourceBranchFor.get -> System.Collections.Generic.HashSet<string!>?
GitVersion.Configuration.BranchConfiguration.IsSourceBranchFor.set -> void
GitVersion.Configuration.BranchConfiguration.MergeTo(GitVersion.Configuration.BranchConfiguration! targetConfig) -> void
GitVersion.Configuration.BranchConfiguration.Name.get -> string!
GitVersion.Configuration.BranchConfiguration.Name.set -> void
GitVersion.Configuration.BranchConfiguration.PreReleaseWeight.get -> int?
GitVersion.Configuration.BranchConfiguration.PreReleaseWeight.set -> void
GitVersion.Configuration.BranchConfiguration.PreventIncrementOfMergedBranchVersion.get -> bool?
GitVersion.Configuration.BranchConfiguration.PreventIncrementOfMergedBranchVersion.set -> void
GitVersion.Configuration.BranchConfiguration.Regex.get -> string?
GitVersion.Configuration.BranchConfiguration.Regex.set -> void
GitVersion.Configuration.BranchConfiguration.SourceBranches.get -> System.Collections.Generic.HashSet<string!>?
GitVersion.Configuration.BranchConfiguration.SourceBranches.set -> void
GitVersion.Configuration.BranchConfiguration.Tag.get -> string?
GitVersion.Configuration.BranchConfiguration.Tag.set -> void
GitVersion.Configuration.BranchConfiguration.TagNumberPattern.get -> string?
GitVersion.Configuration.BranchConfiguration.TagNumberPattern.set -> void
GitVersion.Configuration.BranchConfiguration.TrackMergeTarget.get -> bool?
GitVersion.Configuration.BranchConfiguration.TrackMergeTarget.set -> void
GitVersion.Configuration.BranchConfiguration.TracksReleaseBranches.get -> bool?
GitVersion.Configuration.BranchConfiguration.TracksReleaseBranches.set -> void
GitVersion.Configuration.BranchConfiguration.VersioningMode.get -> GitVersion.VersionCalculation.VersioningMode?
GitVersion.Configuration.BranchConfiguration.VersioningMode.set -> void
GitVersion.Configuration.ConfigurationBuilder
GitVersion.Configuration.ConfigurationBuilder.Add(GitVersion.Configuration.GitVersionConfiguration! configuration) -> GitVersion.Configuration.ConfigurationBuilder!
GitVersion.Configuration.ConfigurationBuilder.Build() -> GitVersion.Configuration.GitVersionConfiguration!
GitVersion.Configuration.ConfigurationBuilder.ConfigurationBuilder() -> void
GitVersion.Configuration.ConfigurationException
GitVersion.Configuration.ConfigurationException.ConfigurationException(string! msg) -> void
GitVersion.Configuration.ConfigurationExtensions
GitVersion.Configuration.ConfigurationFileLocator
GitVersion.Configuration.ConfigurationFileLocator.ConfigurationFileLocator(GitVersion.IFileSystem! fileSystem, Microsoft.Extensions.Options.IOptions<GitVersion.GitVersionOptions!>! options) -> void
GitVersion.Configuration.ConfigurationFileLocator.FilePath.get -> string!
GitVersion.Configuration.ConfigurationFileLocator.GetConfigFilePath(string? workingDirectory) -> string?
GitVersion.Configuration.ConfigurationFileLocator.HasConfigFileAt(string! workingDirectory) -> bool
GitVersion.Configuration.ConfigurationFileLocator.ReadConfig(string! workingDirectory) -> GitVersion.Configuration.GitVersionConfiguration!
GitVersion.Configuration.ConfigurationFileLocator.SelectConfigFilePath(GitVersion.GitVersionOptions! gitVersionOptions, GitVersion.IGitRepositoryInfo! repositoryInfo) -> string?
GitVersion.Configuration.ConfigurationFileLocator.Verify(GitVersion.GitVersionOptions! gitVersionOptions, GitVersion.IGitRepositoryInfo! repositoryInfo) -> void
GitVersion.Configuration.ConfigurationFileLocator.Verify(string? workingDirectory, string? projectRootDirectory) -> void
GitVersion.Configuration.ConfigurationModule
GitVersion.Configuration.ConfigurationModule.ConfigurationModule() -> void
GitVersion.Configuration.ConfigurationModule.RegisterTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
GitVersion.Configuration.ConfigurationProvider
GitVersion.Configuration.ConfigurationProvider.ConfigurationProvider(GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, GitVersion.Configuration.IConfigurationFileLocator! configFileLocator, Microsoft.Extensions.Options.IOptions<GitVersion.GitVersionOptions!>! options, GitVersion.Configuration.Init.Wizard.IConfigInitWizard! configInitWizard, GitVersion.IGitRepositoryInfo! repositoryInfo) -> void
GitVersion.Configuration.ConfigurationProvider.Init(string! workingDirectory) -> void
GitVersion.Configuration.ConfigurationProvider.Provide(GitVersion.Configuration.GitVersionConfiguration? overrideConfiguration) -> GitVersion.Configuration.GitVersionConfiguration!
GitVersion.Configuration.ConfigurationProvider.Provide(string? workingDirectory, GitVersion.Configuration.GitVersionConfiguration? overrideConfiguration) -> GitVersion.Configuration.GitVersionConfiguration!
GitVersion.Configuration.ConfigurationSerializer
GitVersion.Configuration.ConfigurationSerializer.ConfigurationSerializer() -> void
GitVersion.Configuration.EffectiveBranchConfiguration
GitVersion.Configuration.EffectiveBranchConfiguration.Branch.get -> GitVersion.IBranch!
GitVersion.Configuration.EffectiveBranchConfiguration.CreateNextVersion(GitVersion.VersionCalculation.BaseVersion! baseVersion, GitVersion.SemanticVersion! incrementedVersion) -> GitVersion.VersionCalculation.NextVersion!
GitVersion.Configuration.EffectiveBranchConfiguration.EffectiveBranchConfiguration(GitVersion.IBranch! branch, GitVersion.Configuration.EffectiveConfiguration! value) -> void
GitVersion.Configuration.EffectiveBranchConfiguration.Value.get -> GitVersion.Configuration.EffectiveConfiguration!
GitVersion.Configuration.EffectiveConfiguration
GitVersion.Configuration.EffectiveConfiguration.AssemblyFileVersioningFormat.get -> string?
GitVersion.Configuration.EffectiveConfiguration.AssemblyFileVersioningScheme.get -> GitVersion.Extensions.AssemblyFileVersioningScheme
GitVersion.Configuration.EffectiveConfiguration.AssemblyInformationalFormat.get -> string?
GitVersion.Configuration.EffectiveConfiguration.AssemblyVersioningFormat.get -> string?
GitVersion.Configuration.EffectiveConfiguration.AssemblyVersioningScheme.get -> GitVersion.Extensions.AssemblyVersioningScheme
GitVersion.Configuration.EffectiveConfiguration.BranchPrefixToTrim.get -> string?
GitVersion.Configuration.EffectiveConfiguration.CommitDateFormat.get -> string?
GitVersion.Configuration.EffectiveConfiguration.CommitMessageIncrementing.get -> GitVersion.VersionCalculation.CommitMessageIncrementMode
GitVersion.Configuration.EffectiveConfiguration.ContinuousDeploymentFallbackTag.get -> string?
GitVersion.Configuration.EffectiveConfiguration.EffectiveConfiguration(GitVersion.Configuration.GitVersionConfiguration! configuration, GitVersion.Configuration.BranchConfiguration! currentBranchConfig) -> void
GitVersion.Configuration.EffectiveConfiguration.EffectiveConfiguration(GitVersion.Extensions.AssemblyVersioningScheme assemblyVersioningScheme, GitVersion.Extensions.AssemblyFileVersioningScheme assemblyFileVersioningScheme, string? assemblyInformationalFormat, string? assemblyVersioningFormat, string? assemblyFileVersioningFormat, GitVersion.VersionCalculation.VersioningMode versioningMode, string? tagPrefix, string! tag, string? nextVersion, GitVersion.IncrementStrategy increment, string? branchPrefixToTrim, bool preventIncrementOfMergedBranchVersion, string? tagNumberPattern, string? continuousDeploymentFallbackTag, bool trackMergeTarget, string? majorVersionBumpMessage, string? minorVersionBumpMessage, string? patchVersionBumpMessage, string? noBumpMessage, GitVersion.VersionCalculation.CommitMessageIncrementMode commitMessageIncrementing, System.Collections.Generic.IEnumerable<GitVersion.VersionCalculation.IVersionFilter!>! versionFilters, bool tracksReleaseBranches, bool isReleaseBranch, bool isMainline, string? commitDateFormat, bool updateBuildNumber, GitVersion.SemanticVersionFormat semanticVersionFormat, int preReleaseWeight, int tagPreReleaseWeight) -> void
GitVersion.Configuration.EffectiveConfiguration.Increment.get -> GitVersion.IncrementStrategy
GitVersion.Configuration.EffectiveConfiguration.IsMainline.get -> bool
GitVersion.Configuration.EffectiveConfiguration.IsReleaseBranch.get -> bool
GitVersion.Configuration.EffectiveConfiguration.MajorVersionBumpMessage.get -> string?
GitVersion.Configuration.EffectiveConfiguration.MinorVersionBumpMessage.get -> string?
GitVersion.Configuration.EffectiveConfiguration.NextVersion.get -> string?
GitVersion.Configuration.EffectiveConfiguration.NoBumpMessage.get -> string?
GitVersion.Configuration.EffectiveConfiguration.PatchVersionBumpMessage.get -> string?
GitVersion.Configuration.EffectiveConfiguration.PreReleaseWeight.get -> int
GitVersion.Configuration.EffectiveConfiguration.PreventIncrementOfMergedBranchVersion.get -> bool
GitVersion.Configuration.EffectiveConfiguration.SemanticVersionFormat.get -> GitVersion.SemanticVersionFormat
GitVersion.Configuration.EffectiveConfiguration.SemanticVersionFormat.set -> void
GitVersion.Configuration.EffectiveConfiguration.Tag.get -> string!
GitVersion.Configuration.EffectiveConfiguration.TagNumberPattern.get -> string?
GitVersion.Configuration.EffectiveConfiguration.TagPrefix.get -> string?
GitVersion.Configuration.EffectiveConfiguration.TagPreReleaseWeight.get -> int
GitVersion.Configuration.EffectiveConfiguration.TrackMergeTarget.get -> bool
GitVersion.Configuration.EffectiveConfiguration.TracksReleaseBranches.get -> bool
GitVersion.Configuration.EffectiveConfiguration.UpdateBuildNumber.get -> bool
GitVersion.Configuration.EffectiveConfiguration.VersionFilters.get -> System.Collections.Generic.IEnumerable<GitVersion.VersionCalculation.IVersionFilter!>!
GitVersion.Configuration.EffectiveConfiguration.VersioningMode.get -> GitVersion.VersionCalculation.VersioningMode
GitVersion.Configuration.GitVersionConfiguration
GitVersion.Configuration.GitVersionConfiguration.AssemblyFileVersioningFormat.get -> string?
GitVersion.Configuration.GitVersionConfiguration.AssemblyFileVersioningFormat.set -> void
GitVersion.Configuration.GitVersionConfiguration.AssemblyFileVersioningScheme.get -> GitVersion.Extensions.AssemblyFileVersioningScheme?
GitVersion.Configuration.GitVersionConfiguration.AssemblyFileVersioningScheme.set -> void
GitVersion.Configuration.GitVersionConfiguration.AssemblyInformationalFormat.get -> string?
GitVersion.Configuration.GitVersionConfiguration.AssemblyInformationalFormat.set -> void
GitVersion.Configuration.GitVersionConfiguration.AssemblyVersioningFormat.get -> string?
GitVersion.Configuration.GitVersionConfiguration.AssemblyVersioningFormat.set -> void
GitVersion.Configuration.GitVersionConfiguration.AssemblyVersioningScheme.get -> GitVersion.Extensions.AssemblyVersioningScheme?
GitVersion.Configuration.GitVersionConfiguration.AssemblyVersioningScheme.set -> void
GitVersion.Configuration.GitVersionConfiguration.Branches.get -> System.Collections.Generic.Dictionary<string!, GitVersion.Configuration.BranchConfiguration!>!
GitVersion.Configuration.GitVersionConfiguration.Branches.set -> void
GitVersion.Configuration.GitVersionConfiguration.CommitDateFormat.get -> string?
GitVersion.Configuration.GitVersionConfiguration.CommitDateFormat.set -> void
GitVersion.Configuration.GitVersionConfiguration.CommitMessageIncrementing.get -> GitVersion.VersionCalculation.CommitMessageIncrementMode?
GitVersion.Configuration.GitVersionConfiguration.CommitMessageIncrementing.set -> void
GitVersion.Configuration.GitVersionConfiguration.ContinuousDeploymentFallbackTag.get -> string?
GitVersion.Configuration.GitVersionConfiguration.ContinuousDeploymentFallbackTag.set -> void
GitVersion.Configuration.GitVersionConfiguration.GitVersionConfiguration() -> void
GitVersion.Configuration.GitVersionConfiguration.Ignore.get -> GitVersion.Configuration.IgnoreConfiguration!
GitVersion.Configuration.GitVersionConfiguration.Ignore.set -> void
GitVersion.Configuration.GitVersionConfiguration.Increment.get -> GitVersion.IncrementStrategy?
GitVersion.Configuration.GitVersionConfiguration.Increment.set -> void
GitVersion.Configuration.GitVersionConfiguration.MajorVersionBumpMessage.get -> string?
GitVersion.Configuration.GitVersionConfiguration.MajorVersionBumpMessage.set -> void
GitVersion.Configuration.GitVersionConfiguration.MergeMessageFormats.get -> System.Collections.Generic.Dictionary<string!, string!>!
GitVersion.Configuration.GitVersionConfiguration.MergeMessageFormats.set -> void
GitVersion.Configuration.GitVersionConfiguration.MinorVersionBumpMessage.get -> string?
GitVersion.Configuration.GitVersionConfiguration.MinorVersionBumpMessage.set -> void
GitVersion.Configuration.GitVersionConfiguration.NextVersion.get -> string?
GitVersion.Configuration.GitVersionConfiguration.NextVersion.set -> void
GitVersion.Configuration.GitVersionConfiguration.NoBumpMessage.get -> string?
GitVersion.Configuration.GitVersionConfiguration.NoBumpMessage.set -> void
GitVersion.Configuration.GitVersionConfiguration.PatchVersionBumpMessage.get -> string?
GitVersion.Configuration.GitVersionConfiguration.PatchVersionBumpMessage.set -> void
GitVersion.Configuration.GitVersionConfiguration.SemanticVersionFormat.get -> GitVersion.SemanticVersionFormat
GitVersion.Configuration.GitVersionConfiguration.SemanticVersionFormat.set -> void
GitVersion.Configuration.GitVersionConfiguration.TagPrefix.get -> string?
GitVersion.Configuration.GitVersionConfiguration.TagPrefix.set -> void
GitVersion.Configuration.GitVersionConfiguration.TagPreReleaseWeight.get -> int?
GitVersion.Configuration.GitVersionConfiguration.TagPreReleaseWeight.set -> void
GitVersion.Configuration.GitVersionConfiguration.UpdateBuildNumber.get -> bool?
GitVersion.Configuration.GitVersionConfiguration.UpdateBuildNumber.set -> void
GitVersion.Configuration.GitVersionConfiguration.VersioningMode.get -> GitVersion.VersionCalculation.VersioningMode?
GitVersion.Configuration.GitVersionConfiguration.VersioningMode.set -> void
GitVersion.Configuration.IConfigurationFileLocator
GitVersion.Configuration.IConfigurationFileLocator.FilePath.get -> string!
GitVersion.Configuration.IConfigurationFileLocator.GetConfigFilePath(string! workingDirectory) -> string?
GitVersion.Configuration.IConfigurationFileLocator.HasConfigFileAt(string! workingDirectory) -> bool
GitVersion.Configuration.IConfigurationFileLocator.ReadConfig(string! workingDirectory) -> GitVersion.Configuration.GitVersionConfiguration!
GitVersion.Configuration.IConfigurationFileLocator.SelectConfigFilePath(GitVersion.GitVersionOptions! gitVersionOptions, GitVersion.IGitRepositoryInfo! repositoryInfo) -> string?
GitVersion.Configuration.IConfigurationFileLocator.Verify(GitVersion.GitVersionOptions! gitVersionOptions, GitVersion.IGitRepositoryInfo! repositoryInfo) -> void
GitVersion.Configuration.IConfigurationFileLocator.Verify(string! workingDirectory, string! projectRootDirectory) -> void
GitVersion.Configuration.IConfigurationProvider
GitVersion.Configuration.IConfigurationProvider.Init(string! workingDirectory) -> void
GitVersion.Configuration.IConfigurationProvider.Provide(GitVersion.Configuration.GitVersionConfiguration? overrideConfiguration = null) -> GitVersion.Configuration.GitVersionConfiguration!
GitVersion.Configuration.IConfigurationProvider.Provide(string! workingDirectory, GitVersion.Configuration.GitVersionConfiguration? overrideConfiguration = null) -> GitVersion.Configuration.GitVersionConfiguration!
GitVersion.Configuration.IgnoreConfiguration
GitVersion.Configuration.IgnoreConfiguration.Before.get -> System.DateTimeOffset?
GitVersion.Configuration.IgnoreConfiguration.Before.set -> void
GitVersion.Configuration.IgnoreConfiguration.IgnoreConfiguration() -> void
GitVersion.Configuration.IgnoreConfiguration.ShAs.get -> System.Collections.Generic.IEnumerable<string!>!
GitVersion.Configuration.IgnoreConfiguration.ShAs.set -> void
GitVersion.Configuration.Init.EditConfigStep
GitVersion.Configuration.Init.EditConfigStep.EditConfigStep(GitVersion.Logging.IConsole! console, GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory! stepFactory) -> void
GitVersion.Configuration.Init.GitVersionInitModule
GitVersion.Configuration.Init.GitVersionInitModule.GitVersionInitModule() -> void
GitVersion.Configuration.Init.SetConfig.AssemblyVersioningSchemeSetting
GitVersion.Configuration.Init.SetConfig.AssemblyVersioningSchemeSetting.AssemblyVersioningSchemeSetting(GitVersion.Logging.IConsole! console, GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory! stepFactory) -> void
GitVersion.Configuration.Init.SetConfig.ConfigureBranch
GitVersion.Configuration.Init.SetConfig.ConfigureBranch.ConfigureBranch(GitVersion.Logging.IConsole! console, GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory! stepFactory) -> void
GitVersion.Configuration.Init.SetConfig.ConfigureBranch.WithData(string! configName, GitVersion.Configuration.BranchConfiguration! configuration) -> GitVersion.Configuration.Init.SetConfig.ConfigureBranch!
GitVersion.Configuration.Init.SetConfig.ConfigureBranches
GitVersion.Configuration.Init.SetConfig.ConfigureBranches.ConfigureBranches(GitVersion.Logging.IConsole! console, GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory! stepFactory) -> void
GitVersion.Configuration.Init.SetConfig.GlobalModeSetting
GitVersion.Configuration.Init.SetConfig.GlobalModeSetting.GlobalModeSetting(GitVersion.Logging.IConsole! console, GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory! stepFactory) -> void
GitVersion.Configuration.Init.SetConfig.GlobalModeSetting.WithData(GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep! returnStep, bool isPartOfTheWizard) -> GitVersion.Configuration.Init.SetConfig.GlobalModeSetting!
GitVersion.Configuration.Init.SetConfig.SetBranchIncrementMode
GitVersion.Configuration.Init.SetConfig.SetBranchIncrementMode.SetBranchIncrementMode(GitVersion.Logging.IConsole! console, GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory! stepFactory) -> void
GitVersion.Configuration.Init.SetConfig.SetBranchIncrementMode.WithData(string! configName, GitVersion.Configuration.BranchConfiguration! branchConfiguration) -> GitVersion.Configuration.Init.SetConfig.SetBranchIncrementMode!
GitVersion.Configuration.Init.SetConfig.SetBranchTag
GitVersion.Configuration.Init.SetConfig.SetBranchTag.SetBranchTag(GitVersion.Logging.IConsole! console, GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory! stepFactory) -> void
GitVersion.Configuration.Init.SetConfig.SetBranchTag.WithData(string! configName, GitVersion.Configuration.BranchConfiguration! configuration) -> GitVersion.Configuration.Init.SetConfig.SetBranchTag!
GitVersion.Configuration.Init.SetNextVersion
GitVersion.Configuration.Init.SetNextVersion.SetNextVersion(GitVersion.Logging.IConsole! console, GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory! stepFactory) -> void
GitVersion.Configuration.Init.StepResult
GitVersion.Configuration.Init.StepResult.Exit.get -> bool
GitVersion.Configuration.Init.StepResult.InvalidResponse.get -> bool
GitVersion.Configuration.Init.StepResult.Save.get -> bool
GitVersion.Configuration.Init.Wizard.ConfigInitStepFactory
GitVersion.Configuration.Init.Wizard.ConfigInitStepFactory.ConfigInitStepFactory() -> void
GitVersion.Configuration.Init.Wizard.ConfigInitStepFactory.ConfigInitStepFactory(System.IServiceProvider! sp) -> void
GitVersion.Configuration.Init.Wizard.ConfigInitStepFactory.CreateStep<T>() -> T
GitVersion.Configuration.Init.Wizard.ConfigInitWizard
GitVersion.Configuration.Init.Wizard.ConfigInitWizard.ConfigInitWizard(GitVersion.Logging.IConsole! console, GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory! stepFactory) -> void
GitVersion.Configuration.Init.Wizard.ConfigInitWizard.Run(GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> GitVersion.Configuration.GitVersionConfiguration?
GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep
GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep.Apply(System.Collections.Generic.Queue<GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep!>! steps, GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> bool
GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep.ConfigInitWizardStep(GitVersion.Logging.IConsole! console, GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory! stepFactory) -> void
GitVersion.Configuration.Init.Wizard.FinishedSetupStep
GitVersion.Configuration.Init.Wizard.FinishedSetupStep.FinishedSetupStep(GitVersion.Logging.IConsole! console, GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory! stepFactory) -> void
GitVersion.Configuration.Init.Wizard.GitFlowSetupStep
GitVersion.Configuration.Init.Wizard.GitFlowSetupStep.GitFlowSetupStep(GitVersion.Logging.IConsole! console, GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory! stepFactory) -> void
GitVersion.Configuration.Init.Wizard.GitHubFlowStep
GitVersion.Configuration.Init.Wizard.GitHubFlowStep.GitHubFlowStep(GitVersion.Logging.IConsole! console, GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory! stepFactory) -> void
GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory
GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory.CreateStep<T>() -> T
GitVersion.Configuration.Init.Wizard.IConfigInitWizard
GitVersion.Configuration.Init.Wizard.IConfigInitWizard.Run(GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> GitVersion.Configuration.GitVersionConfiguration?
GitVersion.Configuration.Init.Wizard.PickBranchingStrategy1Step
GitVersion.Configuration.Init.Wizard.PickBranchingStrategy1Step.PickBranchingStrategy1Step(GitVersion.Logging.IConsole! console, GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory! stepFactory) -> void
GitVersion.Configuration.Init.Wizard.PickBranchingStrategy2Step
GitVersion.Configuration.Init.Wizard.PickBranchingStrategy2Step.PickBranchingStrategy2Step(GitVersion.Logging.IConsole! console, GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory! stepFactory) -> void
GitVersion.Configuration.Init.Wizard.PickBranchingStrategy3Step
GitVersion.Configuration.Init.Wizard.PickBranchingStrategy3Step.PickBranchingStrategy3Step(GitVersion.Logging.IConsole! console, GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory! stepFactory) -> void
GitVersion.Configuration.Init.Wizard.PickBranchingStrategyStep
GitVersion.Configuration.Init.Wizard.PickBranchingStrategyStep.PickBranchingStrategyStep(GitVersion.Logging.IConsole! console, GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory! stepFactory) -> void
GitVersion.Environment
GitVersion.Environment.Environment() -> void
GitVersion.Environment.GetEnvironmentVariable(string! variableName) -> string?
GitVersion.Environment.SetEnvironmentVariable(string! variableName, string? value) -> void
GitVersion.Extensions.AssemblyFileVersioningScheme
GitVersion.Extensions.AssemblyFileVersioningScheme.Major = 3 -> GitVersion.Extensions.AssemblyFileVersioningScheme
GitVersion.Extensions.AssemblyFileVersioningScheme.MajorMinor = 2 -> GitVersion.Extensions.AssemblyFileVersioningScheme
GitVersion.Extensions.AssemblyFileVersioningScheme.MajorMinorPatch = 1 -> GitVersion.Extensions.AssemblyFileVersioningScheme
GitVersion.Extensions.AssemblyFileVersioningScheme.MajorMinorPatchTag = 0 -> GitVersion.Extensions.AssemblyFileVersioningScheme
GitVersion.Extensions.AssemblyFileVersioningScheme.None = 4 -> GitVersion.Extensions.AssemblyFileVersioningScheme
GitVersion.Extensions.AssemblyVersioningScheme
GitVersion.Extensions.AssemblyVersioningScheme.Major = 3 -> GitVersion.Extensions.AssemblyVersioningScheme
GitVersion.Extensions.AssemblyVersioningScheme.MajorMinor = 2 -> GitVersion.Extensions.AssemblyVersioningScheme
GitVersion.Extensions.AssemblyVersioningScheme.MajorMinorPatch = 1 -> GitVersion.Extensions.AssemblyVersioningScheme
GitVersion.Extensions.AssemblyVersioningScheme.MajorMinorPatchTag = 0 -> GitVersion.Extensions.AssemblyVersioningScheme
GitVersion.Extensions.AssemblyVersioningScheme.None = 4 -> GitVersion.Extensions.AssemblyVersioningScheme
GitVersion.Extensions.AssemblyVersionsGeneratorExtensions
GitVersion.Extensions.CommonExtensions
GitVersion.Extensions.DictionaryExtensions
GitVersion.Extensions.EnumerableExtensions
GitVersion.Extensions.GitExtensions
GitVersion.Extensions.ObjectExtensions
GitVersion.Extensions.ReadEmbeddedResourceExtensions
GitVersion.Extensions.ServiceCollectionExtensions
GitVersion.Extensions.StringExtensions
GitVersion.FileSystem
GitVersion.FileSystem.Copy(string! from, string! to, bool overwrite) -> void
GitVersion.FileSystem.CreateDirectory(string! path) -> void
GitVersion.FileSystem.Delete(string! path) -> void
GitVersion.FileSystem.DirectoryEnumerateFiles(string? directory, string! searchPattern, System.IO.SearchOption searchOption) -> System.Collections.Generic.IEnumerable<string!>!
GitVersion.FileSystem.DirectoryExists(string! path) -> bool
GitVersion.FileSystem.Exists(string! file) -> bool
GitVersion.FileSystem.FileSystem() -> void
GitVersion.FileSystem.GetLastDirectoryWrite(string! path) -> long
GitVersion.FileSystem.Move(string! from, string! to) -> void
GitVersion.FileSystem.OpenRead(string! path) -> System.IO.Stream!
GitVersion.FileSystem.OpenWrite(string! path) -> System.IO.Stream!
GitVersion.FileSystem.PathsEqual(string? path, string? otherPath) -> bool
GitVersion.FileSystem.ReadAllText(string! path) -> string!
GitVersion.FileSystem.WriteAllText(string? file, string! fileContents) -> void
GitVersion.FileSystem.WriteAllText(string? file, string! fileContents, System.Text.Encoding! encoding) -> void
GitVersion.FileWriteInfo
GitVersion.FileWriteInfo.FileExtension.get -> string!
GitVersion.FileWriteInfo.FileName.get -> string!
GitVersion.FileWriteInfo.FileWriteInfo(string! workingDirectory, string! fileName, string! fileExtension) -> void
GitVersion.FileWriteInfo.WorkingDirectory.get -> string!
GitVersion.GitPreparer
GitVersion.GitPreparer.EnsureLocalBranchExistsForCurrentBranch(GitVersion.IRemote? remote, string? currentBranch) -> void
GitVersion.GitPreparer.GitPreparer(GitVersion.Logging.ILog! log, GitVersion.IEnvironment! environment, GitVersion.BuildAgents.ICurrentBuildAgent! buildAgent, Microsoft.Extensions.Options.IOptions<GitVersion.GitVersionOptions!>! options, GitVersion.IMutatingGitRepository! repository, GitVersion.IGitRepositoryInfo! repositoryInfo, System.Lazy<GitVersion.GitVersionContext!>! versionContext) -> void
GitVersion.GitPreparer.Prepare() -> void
GitVersion.GitToolsException
GitVersion.GitToolsException.GitToolsException(string! message, System.Exception! innerException) -> void
GitVersion.GitToolsException.GitToolsException(string! messageFormat, params object![]! args) -> void
GitVersion.GitVersionCalculateTool
GitVersion.GitVersionCalculateTool.CalculateVersionVariables() -> GitVersion.OutputVariables.VersionVariables!
GitVersion.GitVersionCalculateTool.GitVersionCalculateTool(GitVersion.Logging.ILog! log, GitVersion.VersionCalculation.INextVersionCalculator! nextVersionCalculator, GitVersion.VersionCalculation.IVariableProvider! variableProvider, GitVersion.IGitPreparer! gitPreparer, GitVersion.VersionCalculation.Cache.IGitVersionCache! gitVersionCache, GitVersion.VersionCalculation.Cache.IGitVersionCacheKeyFactory! cacheKeyFactory, Microsoft.Extensions.Options.IOptions<GitVersion.GitVersionOptions!>! options, System.Lazy<GitVersion.GitVersionContext!>! versionContext) -> void
GitVersion.GitVersionContext
GitVersion.GitVersionContext.Configuration.get -> GitVersion.Configuration.GitVersionConfiguration!
GitVersion.GitVersionContext.CurrentBranch.get -> GitVersion.IBranch!
GitVersion.GitVersionContext.CurrentCommit.get -> GitVersion.ICommit?
GitVersion.GitVersionContext.CurrentCommitTaggedVersion.get -> GitVersion.SemanticVersion?
GitVersion.GitVersionContext.GetEffectiveConfiguration(GitVersion.IBranch! branch) -> GitVersion.Configuration.EffectiveConfiguration!
GitVersion.GitVersionContext.GitVersionContext(GitVersion.IBranch! currentBranch, GitVersion.ICommit? currentCommit, GitVersion.Configuration.GitVersionConfiguration! configuration, GitVersion.SemanticVersion? currentCommitTaggedVersion, int numberOfUncommittedChanges) -> void
GitVersion.GitVersionContext.IsCurrentCommitTagged.get -> bool
GitVersion.GitVersionContext.NumberOfUncommittedChanges.get -> int
GitVersion.GitVersionContextFactory
GitVersion.GitVersionContextFactory.Create(GitVersion.GitVersionOptions! gitVersionOptions) -> GitVersion.GitVersionContext!
GitVersion.GitVersionContextFactory.GitVersionContextFactory(GitVersion.Configuration.IConfigurationProvider! configurationProvider, GitVersion.Common.IRepositoryStore! repositoryStore, Microsoft.Extensions.Options.IOptions<GitVersion.GitVersionOptions!>! options) -> void
GitVersion.GitVersionCoreModule
GitVersion.GitVersionCoreModule.GitVersionCoreModule() -> void
GitVersion.GitVersionCoreModule.RegisterTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
GitVersion.GitVersionException
GitVersion.GitVersionException.GitVersionException(string! message) -> void
GitVersion.GitVersionException.GitVersionException(string! message, System.Exception! innerException) -> void
GitVersion.GitVersionModule
GitVersion.GitVersionModule.GitVersionModule() -> void
GitVersion.GitVersionOptions
GitVersion.GitVersionOptions.AssemblyInfo.get -> GitVersion.AssemblyInfoData!
GitVersion.GitVersionOptions.Authentication.get -> GitVersion.AuthenticationInfo!
GitVersion.GitVersionOptions.ConfigInfo.get -> GitVersion.ConfigInfo!
GitVersion.GitVersionOptions.Diag -> bool
GitVersion.GitVersionOptions.GitVersionOptions() -> void
GitVersion.GitVersionOptions.Init -> bool
GitVersion.GitVersionOptions.IsHelp -> bool
GitVersion.GitVersionOptions.IsVersion -> bool
GitVersion.GitVersionOptions.LogFilePath -> string?
GitVersion.GitVersionOptions.Output -> System.Collections.Generic.ISet<GitVersion.OutputType>!
GitVersion.GitVersionOptions.OutputFile -> string?
GitVersion.GitVersionOptions.RepositoryInfo.get -> GitVersion.RepositoryInfo!
GitVersion.GitVersionOptions.Settings.get -> GitVersion.Settings!
GitVersion.GitVersionOptions.ShowVariable -> string?
GitVersion.GitVersionOptions.Verbosity -> GitVersion.Logging.Verbosity
GitVersion.GitVersionOptions.WixInfo.get -> GitVersion.WixInfo!
GitVersion.GitVersionOptions.WorkingDirectory.get -> string!
GitVersion.GitVersionOptions.WorkingDirectory.set -> void
GitVersion.GitVersionOutputTool
GitVersion.GitVersionOutputTool.GenerateGitVersionInformation(GitVersion.OutputVariables.VersionVariables! variables, GitVersion.FileWriteInfo! fileWriteInfo) -> void
GitVersion.GitVersionOutputTool.GitVersionOutputTool(Microsoft.Extensions.Options.IOptions<GitVersion.GitVersionOptions!>! options, GitVersion.VersionConverters.OutputGenerator.IOutputGenerator! outputGenerator, GitVersion.VersionConverters.WixUpdater.IWixVersionFileUpdater! wixVersionFileUpdater, GitVersion.VersionConverters.GitVersionInfo.IGitVersionInfoGenerator! gitVersionInfoGenerator, GitVersion.VersionConverters.AssemblyInfo.IAssemblyInfoFileUpdater! assemblyInfoFileUpdater, GitVersion.VersionConverters.AssemblyInfo.IProjectFileUpdater! projectFileUpdater) -> void
GitVersion.GitVersionOutputTool.OutputVariables(GitVersion.OutputVariables.VersionVariables! variables, bool updateBuildNumber) -> void
GitVersion.GitVersionOutputTool.UpdateAssemblyInfo(GitVersion.OutputVariables.VersionVariables! variables) -> void
GitVersion.GitVersionOutputTool.UpdateWixVersionFile(GitVersion.OutputVariables.VersionVariables! variables) -> void
GitVersion.Helpers.EncodingHelper
GitVersion.Helpers.LambdaEqualityHelper<T>
GitVersion.Helpers.LambdaEqualityHelper<T>.Equals(T? instance, T? other) -> bool
GitVersion.Helpers.LambdaEqualityHelper<T>.GetHashCode(T instance) -> int
GitVersion.Helpers.LambdaEqualityHelper<T>.LambdaEqualityHelper(params System.Func<T, object?>![]! equalityContributorAccessors) -> void
GitVersion.Helpers.LambdaKeyComparer<TSource, TKey>
GitVersion.Helpers.LambdaKeyComparer<TSource, TKey>.LambdaKeyComparer(System.Func<TSource!, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? innerComparer = null) -> void
GitVersion.Helpers.PathHelper
GitVersion.Helpers.PathHelper.PathHelper() -> void
GitVersion.Helpers.ProcessHelper
GitVersion.Helpers.RetryAction<T, Result>
GitVersion.Helpers.RetryAction<T, Result>.Execute(System.Func<Result>! operation) -> Result
GitVersion.Helpers.RetryAction<T, Result>.RetryAction(int maxRetries = 5) -> void
GitVersion.Helpers.RetryAction<T>
GitVersion.Helpers.RetryAction<T>.Execute(System.Action! operation) -> void
GitVersion.Helpers.RetryAction<T>.RetryAction(int maxRetries = 5) -> void
GitVersion.Helpers.ServiceMessageEscapeHelper
GitVersion.Helpers.StringComparerUtils
GitVersion.IBranch
GitVersion.IBranch.Commits.get -> GitVersion.ICommitCollection?
GitVersion.IBranch.IsDetachedHead.get -> bool
GitVersion.IBranch.IsRemote.get -> bool
GitVersion.IBranch.IsTracking.get -> bool
GitVersion.IBranch.Tip.get -> GitVersion.ICommit?
GitVersion.IBranchCollection
GitVersion.IBranchCollection.ExcludeBranches(System.Collections.Generic.IEnumerable<GitVersion.IBranch!>! branchesToExclude) -> System.Collections.Generic.IEnumerable<GitVersion.IBranch!>!
GitVersion.IBranchCollection.this[string! name].get -> GitVersion.IBranch?
GitVersion.IBranchCollection.UpdateTrackedBranch(GitVersion.IBranch! branch, string! remoteTrackingReferenceName) -> void
GitVersion.ICommit
GitVersion.ICommit.Message.get -> string!
GitVersion.ICommit.Parents.get -> System.Collections.Generic.IEnumerable<GitVersion.ICommit!>!
GitVersion.ICommit.When.get -> System.DateTimeOffset
GitVersion.ICommitCollection
GitVersion.ICommitCollection.GetCommitsPriorTo(System.DateTimeOffset olderThan) -> System.Collections.Generic.IEnumerable<GitVersion.ICommit!>!
GitVersion.ICommitCollection.QueryBy(GitVersion.CommitFilter! commitFilter) -> System.Collections.Generic.IEnumerable<GitVersion.ICommit!>!
GitVersion.IEnvironment
GitVersion.IEnvironment.GetEnvironmentVariable(string! variableName) -> string?
GitVersion.IEnvironment.SetEnvironmentVariable(string! variableName, string? value) -> void
GitVersion.IFileSystem
GitVersion.IFileSystem.Copy(string! from, string! to, bool overwrite) -> void
GitVersion.IFileSystem.CreateDirectory(string! path) -> void
GitVersion.IFileSystem.Delete(string! path) -> void
GitVersion.IFileSystem.DirectoryEnumerateFiles(string? directory, string! searchPattern, System.IO.SearchOption searchOption) -> System.Collections.Generic.IEnumerable<string!>!
GitVersion.IFileSystem.DirectoryExists(string! path) -> bool
GitVersion.IFileSystem.Exists(string! file) -> bool
GitVersion.IFileSystem.GetLastDirectoryWrite(string! path) -> long
GitVersion.IFileSystem.Move(string! from, string! to) -> void
GitVersion.IFileSystem.OpenRead(string! path) -> System.IO.Stream!
GitVersion.IFileSystem.OpenWrite(string! path) -> System.IO.Stream!
GitVersion.IFileSystem.PathsEqual(string? path, string? otherPath) -> bool
GitVersion.IFileSystem.ReadAllText(string! path) -> string!
GitVersion.IFileSystem.WriteAllText(string? file, string! fileContents) -> void
GitVersion.IFileSystem.WriteAllText(string? file, string! fileContents, System.Text.Encoding! encoding) -> void
GitVersion.IGitObject
GitVersion.IGitObject.Id.get -> GitVersion.IObjectId!
GitVersion.IGitObject.Sha.get -> string!
GitVersion.IGitPreparer
GitVersion.IGitPreparer.EnsureLocalBranchExistsForCurrentBranch(GitVersion.IRemote! remote, string! currentBranch) -> void
GitVersion.IGitPreparer.Prepare() -> void
GitVersion.IGitRepository
GitVersion.IGitRepository.Branches.get -> GitVersion.IBranchCollection!
GitVersion.IGitRepository.Commits.get -> GitVersion.ICommitCollection!
GitVersion.IGitRepository.FindMergeBase(GitVersion.ICommit! commit, GitVersion.ICommit! otherCommit) -> GitVersion.ICommit?
GitVersion.IGitRepository.GetNumberOfUncommittedChanges() -> int
GitVersion.IGitRepository.Head.get -> GitVersion.IBranch!
GitVersion.IGitRepository.IsHeadDetached.get -> bool
GitVersion.IGitRepository.Path.get -> string!
GitVersion.IGitRepository.Refs.get -> GitVersion.IReferenceCollection!
GitVersion.IGitRepository.Remotes.get -> GitVersion.IRemoteCollection!
GitVersion.IGitRepository.Tags.get -> GitVersion.ITagCollection!
GitVersion.IGitRepository.WorkingDirectory.get -> string!
GitVersion.IGitRepositoryInfo
GitVersion.IGitRepositoryInfo.DotGitDirectory.get -> string?
GitVersion.IGitRepositoryInfo.DynamicGitRepositoryPath.get -> string?
GitVersion.IGitRepositoryInfo.GitRootPath.get -> string?
GitVersion.IGitRepositoryInfo.ProjectRootDirectory.get -> string?
GitVersion.IGitVersionCalculateTool
GitVersion.IGitVersionCalculateTool.CalculateVersionVariables() -> GitVersion.OutputVariables.VersionVariables!
GitVersion.IGitVersionContextFactory
GitVersion.IGitVersionContextFactory.Create(GitVersion.GitVersionOptions! gitVersionOptions) -> GitVersion.GitVersionContext!
GitVersion.IGitVersionModule
GitVersion.IGitVersionModule.RegisterTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
GitVersion.IGitVersionOutputTool
GitVersion.IGitVersionOutputTool.GenerateGitVersionInformation(GitVersion.OutputVariables.VersionVariables! variables, GitVersion.FileWriteInfo! fileWriteInfo) -> void
GitVersion.IGitVersionOutputTool.OutputVariables(GitVersion.OutputVariables.VersionVariables! variables, bool updateBuildNumber) -> void
GitVersion.IGitVersionOutputTool.UpdateAssemblyInfo(GitVersion.OutputVariables.VersionVariables! variables) -> void
GitVersion.IGitVersionOutputTool.UpdateWixVersionFile(GitVersion.OutputVariables.VersionVariables! variables) -> void
GitVersion.IMutatingGitRepository
GitVersion.IMutatingGitRepository.Checkout(string! commitOrBranchSpec) -> void
GitVersion.IMutatingGitRepository.Clone(string? sourceUrl, string? workdirPath, GitVersion.AuthenticationInfo! auth) -> void
GitVersion.IMutatingGitRepository.CreateBranchForPullRequestBranch(GitVersion.AuthenticationInfo! auth) -> void
GitVersion.IMutatingGitRepository.Fetch(string! remote, System.Collections.Generic.IEnumerable<string!>! refSpecs, GitVersion.AuthenticationInfo! auth, string? logMessage) -> void
GitVersion.INamedReference
GitVersion.INamedReference.Name.get -> GitVersion.ReferenceName!
GitVersion.IncrementStrategy
GitVersion.IncrementStrategy.Inherit = 4 -> GitVersion.IncrementStrategy
GitVersion.IncrementStrategy.Major = 1 -> GitVersion.IncrementStrategy
GitVersion.IncrementStrategy.Minor = 2 -> GitVersion.IncrementStrategy
GitVersion.IncrementStrategy.None = 0 -> GitVersion.IncrementStrategy
GitVersion.IncrementStrategy.Patch = 3 -> GitVersion.IncrementStrategy
GitVersion.IncrementStrategyExtensions
GitVersion.IObjectId
GitVersion.IObjectId.Sha.get -> string!
GitVersion.IObjectId.ToString(int prefixLength) -> string!
GitVersion.IReference
GitVersion.IReference.ReferenceTargetId.get -> GitVersion.IObjectId?
GitVersion.IReference.TargetIdentifier.get -> string!
GitVersion.IReferenceCollection
GitVersion.IReferenceCollection.Add(string! name, string! canonicalRefNameOrObject, bool allowOverwrite = false) -> void
GitVersion.IReferenceCollection.FromGlob(string! prefix) -> System.Collections.Generic.IEnumerable<GitVersion.IReference!>!
GitVersion.IReferenceCollection.Head.get -> GitVersion.IReference?
GitVersion.IReferenceCollection.this[GitVersion.ReferenceName! referenceName].get -> GitVersion.IReference?
GitVersion.IReferenceCollection.this[string! name].get -> GitVersion.IReference?
GitVersion.IReferenceCollection.UpdateTarget(GitVersion.IReference! directRef, GitVersion.IObjectId! targetId) -> void
GitVersion.IRefSpec
GitVersion.IRefSpec.Destination.get -> string!
GitVersion.IRefSpec.Direction.get -> GitVersion.RefSpecDirection
GitVersion.IRefSpec.Source.get -> string!
GitVersion.IRefSpec.Specification.get -> string!
GitVersion.IRefSpecCollection
GitVersion.IRemote
GitVersion.IRemote.FetchRefSpecs.get -> System.Collections.Generic.IEnumerable<GitVersion.IRefSpec!>!
GitVersion.IRemote.Name.get -> string!
GitVersion.IRemote.PushRefSpecs.get -> System.Collections.Generic.IEnumerable<GitVersion.IRefSpec!>!
GitVersion.IRemote.RefSpecs.get -> System.Collections.Generic.IEnumerable<GitVersion.IRefSpec!>!
GitVersion.IRemote.Url.get -> string!
GitVersion.IRemoteCollection
GitVersion.IRemoteCollection.Remove(string! remoteName) -> void
GitVersion.IRemoteCollection.this[string! name].get -> GitVersion.IRemote?
GitVersion.IRemoteCollection.Update(string! remoteName, string! refSpec) -> void
GitVersion.ITag
GitVersion.ITag.PeeledTargetCommit() -> GitVersion.ICommit?
GitVersion.ITag.TargetSha.get -> string?
GitVersion.ITagCollection
GitVersion.LockedFileException
GitVersion.LockedFileException.LockedFileException(System.Exception! inner) -> void
GitVersion.Logging.ConsoleAdapter
GitVersion.Logging.ConsoleAdapter.ConsoleAdapter() -> void
GitVersion.Logging.ConsoleAdapter.ReadLine() -> string?
GitVersion.Logging.ConsoleAdapter.UseColor(System.ConsoleColor consoleColor) -> System.IDisposable!
GitVersion.Logging.ConsoleAdapter.Write(string? msg) -> void
GitVersion.Logging.ConsoleAdapter.WriteLine() -> void
GitVersion.Logging.ConsoleAdapter.WriteLine(string? msg) -> void
GitVersion.Logging.ConsoleAppender
GitVersion.Logging.ConsoleAppender.ConsoleAppender() -> void
GitVersion.Logging.ConsoleAppender.WriteTo(GitVersion.Logging.LogLevel level, string! message) -> void
GitVersion.Logging.Disposable
GitVersion.Logging.FileAppender
GitVersion.Logging.FileAppender.FileAppender(string! filePath) -> void
GitVersion.Logging.FileAppender.WriteTo(GitVersion.Logging.LogLevel level, string! message) -> void
GitVersion.Logging.IConsole
GitVersion.Logging.IConsole.ReadLine() -> string?
GitVersion.Logging.IConsole.UseColor(System.ConsoleColor consoleColor) -> System.IDisposable!
GitVersion.Logging.IConsole.Write(string? msg) -> void
GitVersion.Logging.IConsole.WriteLine() -> void
GitVersion.Logging.IConsole.WriteLine(string? msg) -> void
GitVersion.Logging.ILog
GitVersion.Logging.ILog.AddLogAppender(GitVersion.Logging.ILogAppender! logAppender) -> void
GitVersion.Logging.ILog.IndentLog(string! operationDescription) -> System.IDisposable!
GitVersion.Logging.ILog.Verbosity.get -> GitVersion.Logging.Verbosity
GitVersion.Logging.ILog.Verbosity.set -> void
GitVersion.Logging.ILog.Write(GitVersion.Logging.Verbosity verbosity, GitVersion.Logging.LogLevel level, string! format, params object![]! args) -> void
GitVersion.Logging.ILogAppender
GitVersion.Logging.ILogAppender.WriteTo(GitVersion.Logging.LogLevel level, string! message) -> void
GitVersion.Logging.Log
GitVersion.Logging.Log.AddLogAppender(GitVersion.Logging.ILogAppender! logAppender) -> void
GitVersion.Logging.Log.IndentLog(string! operationDescription) -> System.IDisposable!
GitVersion.Logging.Log.Log() -> void
GitVersion.Logging.Log.Log(params GitVersion.Logging.ILogAppender![]! appenders) -> void
GitVersion.Logging.Log.Verbosity.get -> GitVersion.Logging.Verbosity
GitVersion.Logging.Log.Verbosity.set -> void
GitVersion.Logging.Log.Write(GitVersion.Logging.Verbosity verbosity, GitVersion.Logging.LogLevel level, string! format, params object![]! args) -> void
GitVersion.Logging.LogAction
GitVersion.Logging.LogActionEntry
GitVersion.Logging.LogExtensions
GitVersion.Logging.LogLevel
GitVersion.Logging.LogLevel.Debug = 5 -> GitVersion.Logging.LogLevel
GitVersion.Logging.LogLevel.Error = 1 -> GitVersion.Logging.LogLevel
GitVersion.Logging.LogLevel.Fatal = 0 -> GitVersion.Logging.LogLevel
GitVersion.Logging.LogLevel.Info = 3 -> GitVersion.Logging.LogLevel
GitVersion.Logging.LogLevel.Verbose = 4 -> GitVersion.Logging.LogLevel
GitVersion.Logging.LogLevel.Warn = 2 -> GitVersion.Logging.LogLevel
GitVersion.Logging.NullLog
GitVersion.Logging.NullLog.AddLogAppender(GitVersion.Logging.ILogAppender! logAppender) -> void
GitVersion.Logging.NullLog.Indent.get -> string?
GitVersion.Logging.NullLog.Indent.set -> void
GitVersion.Logging.NullLog.IndentLog(string! operationDescription) -> System.IDisposable!
GitVersion.Logging.NullLog.NullLog() -> void
GitVersion.Logging.NullLog.Verbosity.get -> GitVersion.Logging.Verbosity
GitVersion.Logging.NullLog.Verbosity.set -> void
GitVersion.Logging.NullLog.Write(GitVersion.Logging.Verbosity verbosity, GitVersion.Logging.LogLevel level, string! format, params object![]! args) -> void
GitVersion.Logging.Verbosity
GitVersion.Logging.Verbosity.Diagnostic = 4 -> GitVersion.Logging.Verbosity
GitVersion.Logging.Verbosity.Minimal = 1 -> GitVersion.Logging.Verbosity
GitVersion.Logging.Verbosity.Normal = 2 -> GitVersion.Logging.Verbosity
GitVersion.Logging.Verbosity.Quiet = 0 -> GitVersion.Logging.Verbosity
GitVersion.Logging.Verbosity.Verbose = 3 -> GitVersion.Logging.Verbosity
GitVersion.MergeMessage
GitVersion.MergeMessage.FormatName.get -> string?
GitVersion.MergeMessage.IsMergedPullRequest.get -> bool
GitVersion.MergeMessage.MergedBranch.get -> string!
GitVersion.MergeMessage.MergeMessage(string? mergeMessage, GitVersion.Configuration.GitVersionConfiguration! configuration) -> void
GitVersion.MergeMessage.PullRequestNumber.get -> int?
GitVersion.MergeMessage.TargetBranch.get -> string?
GitVersion.MergeMessage.Version.get -> GitVersion.SemanticVersion?
GitVersion.OutputType
GitVersion.OutputType.BuildServer = 0 -> GitVersion.OutputType
GitVersion.OutputType.File = 2 -> GitVersion.OutputType
GitVersion.OutputType.Json = 1 -> GitVersion.OutputType
GitVersion.OutputVariables.VersionVariables
GitVersion.OutputVariables.VersionVariables.AssemblySemFileVer.get -> string?
GitVersion.OutputVariables.VersionVariables.AssemblySemVer.get -> string?
GitVersion.OutputVariables.VersionVariables.BranchName.get -> string?
GitVersion.OutputVariables.VersionVariables.BuildMetaData.get -> string?
GitVersion.OutputVariables.VersionVariables.CommitDate.get -> string?
GitVersion.OutputVariables.VersionVariables.CommitDate.set -> void
GitVersion.OutputVariables.VersionVariables.CommitsSinceVersionSource.get -> string?
GitVersion.OutputVariables.VersionVariables.EscapedBranchName.get -> string?
GitVersion.OutputVariables.VersionVariables.FileName.get -> string?
GitVersion.OutputVariables.VersionVariables.FileName.set -> void
GitVersion.OutputVariables.VersionVariables.FullBuildMetaData.get -> string?
GitVersion.OutputVariables.VersionVariables.FullSemVer.get -> string!
GitVersion.OutputVariables.VersionVariables.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string!, string!>>!
GitVersion.OutputVariables.VersionVariables.InformationalVersion.get -> string?
GitVersion.OutputVariables.VersionVariables.Major.get -> string!
GitVersion.OutputVariables.VersionVariables.MajorMinorPatch.get -> string!
GitVersion.OutputVariables.VersionVariables.Minor.get -> string!
GitVersion.OutputVariables.VersionVariables.Patch.get -> string!
GitVersion.OutputVariables.VersionVariables.PreReleaseLabel.get -> string?
GitVersion.OutputVariables.VersionVariables.PreReleaseLabelWithDash.get -> string?
GitVersion.OutputVariables.VersionVariables.PreReleaseNumber.get -> string?
GitVersion.OutputVariables.VersionVariables.PreReleaseTag.get -> string?
GitVersion.OutputVariables.VersionVariables.PreReleaseTagWithDash.get -> string?
GitVersion.OutputVariables.VersionVariables.SemVer.get -> string!
GitVersion.OutputVariables.VersionVariables.Sha.get -> string?
GitVersion.OutputVariables.VersionVariables.ShortSha.get -> string?
GitVersion.OutputVariables.VersionVariables.this[string! variable].get -> string?
GitVersion.OutputVariables.VersionVariables.TryGetValue(string! variable, out string? variableValue) -> bool
GitVersion.OutputVariables.VersionVariables.UncommittedChanges.get -> string?
GitVersion.OutputVariables.VersionVariables.VersionSourceSha.get -> string?
GitVersion.OutputVariables.VersionVariables.VersionVariables(string! major, string! minor, string! patch, string? buildMetaData, string? fullBuildMetaData, string? branchName, string? escapedBranchName, string? sha, string? shortSha, string! majorMinorPatch, string! semVer, string! fullSemVer, string? assemblySemVer, string? assemblySemFileVer, string? preReleaseTag, string? preReleaseTagWithDash, string? preReleaseLabel, string? preReleaseLabelWithDash, string? preReleaseNumber, string! weightedPreReleaseNumber, string? informationalVersion, string? commitDate, string? versionSourceSha, string? commitsSinceVersionSource, string? uncommittedChanges) -> void
GitVersion.OutputVariables.VersionVariables.WeightedPreReleaseNumber.get -> string!
GitVersion.OutputVariables.VersionVariablesJsonModel
GitVersion.OutputVariables.VersionVariablesJsonModel.AssemblySemFileVer.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.AssemblySemFileVer.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.AssemblySemVer.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.AssemblySemVer.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.BranchName.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.BranchName.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.BuildMetaData.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.BuildMetaData.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.CommitDate.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.CommitDate.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.CommitsSinceVersionSource.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.CommitsSinceVersionSource.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.EscapedBranchName.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.EscapedBranchName.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.FullBuildMetaData.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.FullBuildMetaData.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.FullSemVer.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.FullSemVer.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.InformationalVersion.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.InformationalVersion.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.Major.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.Major.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.MajorMinorPatch.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.MajorMinorPatch.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.Minor.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.Minor.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.Patch.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.Patch.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.PreReleaseLabel.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.PreReleaseLabel.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.PreReleaseLabelWithDash.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.PreReleaseLabelWithDash.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.PreReleaseNumber.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.PreReleaseNumber.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.PreReleaseTag.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.PreReleaseTag.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.PreReleaseTagWithDash.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.PreReleaseTagWithDash.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.SemVer.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.SemVer.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.Sha.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.Sha.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.ShortSha.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.ShortSha.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.UncommittedChanges.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.UncommittedChanges.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.VersionSourceSha.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.VersionSourceSha.set -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.VersionVariablesJsonModel() -> void
GitVersion.OutputVariables.VersionVariablesJsonModel.WeightedPreReleaseNumber.get -> string?
GitVersion.OutputVariables.VersionVariablesJsonModel.WeightedPreReleaseNumber.set -> void
GitVersion.OutputVariables.VersionVariablesJsonNumberConverter
GitVersion.OutputVariables.VersionVariablesJsonNumberConverter.VersionVariablesJsonNumberConverter() -> void
GitVersion.OutputVariables.VersionVariablesJsonStringConverter
GitVersion.OutputVariables.VersionVariablesJsonStringConverter.VersionVariablesJsonStringConverter() -> void
GitVersion.ReferenceName
GitVersion.ReferenceName.Canonical.get -> string!
GitVersion.ReferenceName.CompareTo(GitVersion.ReferenceName! other) -> int
GitVersion.ReferenceName.Equals(GitVersion.ReferenceName? other) -> bool
GitVersion.ReferenceName.EquivalentTo(string? name) -> bool
GitVersion.ReferenceName.Friendly.get -> string!
GitVersion.ReferenceName.IsBranch.get -> bool
GitVersion.ReferenceName.IsPullRequest.get -> bool
GitVersion.ReferenceName.IsRemoteBranch.get -> bool
GitVersion.ReferenceName.IsTag.get -> bool
GitVersion.ReferenceName.ReferenceName(string! canonical) -> void
GitVersion.ReferenceName.WithoutRemote.get -> string!
GitVersion.RefSpecDirection
GitVersion.RefSpecDirection.Fetch = 0 -> GitVersion.RefSpecDirection
GitVersion.RefSpecDirection.Push = 1 -> GitVersion.RefSpecDirection
GitVersion.RepositoryInfo
GitVersion.RepositoryInfo.ClonePath -> string?
GitVersion.RepositoryInfo.CommitId -> string?
GitVersion.RepositoryInfo.RepositoryInfo() -> void
GitVersion.RepositoryInfo.TargetBranch -> string?
GitVersion.RepositoryInfo.TargetUrl -> string?
GitVersion.RepositoryStore
GitVersion.RepositoryStore.ExcludingBranches(System.Collections.Generic.IEnumerable<GitVersion.IBranch!>! branchesToExclude) -> System.Collections.Generic.IEnumerable<GitVersion.IBranch!>!
GitVersion.RepositoryStore.FindBranch(string? branchName) -> GitVersion.IBranch?
GitVersion.RepositoryStore.FindCommitBranchesWasBranchedFrom(GitVersion.IBranch! branch, GitVersion.Configuration.GitVersionConfiguration! configuration, params GitVersion.IBranch![]! excludedBranches) -> System.Collections.Generic.IEnumerable<GitVersion.BranchCommit>!
GitVersion.RepositoryStore.FindCommitBranchesWasBranchedFrom(GitVersion.IBranch! branch, GitVersion.Configuration.GitVersionConfiguration! configuration, System.Collections.Generic.IEnumerable<GitVersion.IBranch!>! excludedBranches) -> System.Collections.Generic.IEnumerable<GitVersion.BranchCommit>!
GitVersion.RepositoryStore.FindCommitBranchWasBranchedFrom(GitVersion.IBranch? branch, GitVersion.Configuration.GitVersionConfiguration! configuration, params GitVersion.IBranch![]! excludedBranches) -> GitVersion.BranchCommit
GitVersion.RepositoryStore.FindMainBranch(GitVersion.Configuration.GitVersionConfiguration! configuration) -> GitVersion.IBranch?
GitVersion.RepositoryStore.FindMergeBase(GitVersion.IBranch? branch, GitVersion.IBranch? otherBranch) -> GitVersion.ICommit?
GitVersion.RepositoryStore.FindMergeBase(GitVersion.ICommit! commit, GitVersion.ICommit! mainlineTip) -> GitVersion.ICommit?
GitVersion.RepositoryStore.GetBranchesContainingCommit(GitVersion.ICommit? commit, System.Collections.Generic.IEnumerable<GitVersion.IBranch!>? branches = null, bool onlyTrackedBranches = false) -> System.Collections.Generic.IEnumerable<GitVersion.IBranch!>!
GitVersion.RepositoryStore.GetCommitLog(GitVersion.ICommit? baseVersionSource, GitVersion.ICommit? currentCommit) -> System.Collections.Generic.IEnumerable<GitVersion.ICommit!>!
GitVersion.RepositoryStore.GetCurrentCommit(GitVersion.IBranch! currentBranch, string? commitId) -> GitVersion.ICommit?
GitVersion.RepositoryStore.GetCurrentCommitTaggedVersion(GitVersion.ICommit? commit, string? tagPrefix) -> GitVersion.SemanticVersion?
GitVersion.RepositoryStore.GetMainlineBranches(GitVersion.ICommit! commit, GitVersion.Configuration.GitVersionConfiguration! configuration) -> System.Collections.Generic.IDictionary<string!, System.Collections.Generic.List<GitVersion.IBranch!>!>!
GitVersion.RepositoryStore.GetMainlineCommitLog(GitVersion.ICommit? baseVersionSource, GitVersion.ICommit? mainlineTip) -> System.Collections.Generic.IEnumerable<GitVersion.ICommit!>!
GitVersion.RepositoryStore.GetMergeBaseCommits(GitVersion.ICommit? mergeCommit, GitVersion.ICommit? mergedHead, GitVersion.ICommit? findMergeBase) -> System.Collections.Generic.IEnumerable<GitVersion.ICommit!>!
GitVersion.RepositoryStore.GetNumberOfUncommittedChanges() -> int
GitVersion.RepositoryStore.GetReleaseBranches(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, GitVersion.Configuration.BranchConfiguration!>>! releaseBranchConfig) -> System.Collections.Generic.IEnumerable<GitVersion.IBranch!>!
GitVersion.RepositoryStore.GetSourceBranches(GitVersion.IBranch! branch, GitVersion.Configuration.GitVersionConfiguration! configuration, params GitVersion.IBranch![]! excludedBranches) -> System.Collections.Generic.IEnumerable<GitVersion.IBranch!>!
GitVersion.RepositoryStore.GetSourceBranches(GitVersion.IBranch! branch, GitVersion.Configuration.GitVersionConfiguration! configuration, System.Collections.Generic.IEnumerable<GitVersion.IBranch!>! excludedBranches) -> System.Collections.Generic.IEnumerable<GitVersion.IBranch!>!
GitVersion.RepositoryStore.GetTargetBranch(string? targetBranchName) -> GitVersion.IBranch!
GitVersion.RepositoryStore.GetValidVersionTags(string? tagPrefixRegex, System.DateTimeOffset? olderThan = null) -> System.Collections.Generic.IEnumerable<(GitVersion.ITag! Tag, GitVersion.SemanticVersion! Semver, GitVersion.ICommit! Commit)>!
GitVersion.RepositoryStore.GetVersionTagsOnBranch(GitVersion.IBranch! branch, string? tagPrefixRegex) -> System.Collections.Generic.IEnumerable<GitVersion.SemanticVersion!>!
GitVersion.RepositoryStore.IsCommitOnBranch(GitVersion.ICommit? baseVersionSource, GitVersion.IBranch! branch, GitVersion.ICommit! firstMatchingCommit) -> bool
GitVersion.RepositoryStore.RepositoryStore(GitVersion.Logging.ILog! log, GitVersion.IGitRepository! repository) -> void
GitVersion.SemanticVersion
GitVersion.SemanticVersion.BuildMetaData -> GitVersion.SemanticVersionBuildMetaData?
GitVersion.SemanticVersion.CompareTo(GitVersion.SemanticVersion! value) -> int
GitVersion.SemanticVersion.CompareTo(GitVersion.SemanticVersion? value, bool includePrerelease) -> int
GitVersion.SemanticVersion.Equals(GitVersion.SemanticVersion? obj) -> bool
GitVersion.SemanticVersion.HasPreReleaseTagWithLabel.get -> bool
GitVersion.SemanticVersion.IncrementVersion(GitVersion.VersionField incrementStrategy) -> GitVersion.SemanticVersion!
GitVersion.SemanticVersion.IsEmpty() -> bool
GitVersion.SemanticVersion.Major -> long
GitVersion.SemanticVersion.Minor -> long
GitVersion.SemanticVersion.Patch -> long
GitVersion.SemanticVersion.PreReleaseTag -> GitVersion.SemanticVersionPreReleaseTag?
GitVersion.SemanticVersion.SemanticVersion(GitVersion.SemanticVersion? semanticVersion) -> void
GitVersion.SemanticVersion.SemanticVersion(long major = 0, long minor = 0, long patch = 0) -> void
GitVersion.SemanticVersion.ToString(string! format) -> string!
GitVersion.SemanticVersion.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
GitVersion.SemanticVersionBuildMetaData
GitVersion.SemanticVersionBuildMetaData.Branch -> string?
GitVersion.SemanticVersionBuildMetaData.CommitDate -> System.DateTimeOffset?
GitVersion.SemanticVersionBuildMetaData.CommitsSinceTag -> long?
GitVersion.SemanticVersionBuildMetaData.CommitsSinceVersionSource -> long?
GitVersion.SemanticVersionBuildMetaData.Equals(GitVersion.SemanticVersionBuildMetaData? other) -> bool
GitVersion.SemanticVersionBuildMetaData.OtherMetaData -> string?
GitVersion.SemanticVersionBuildMetaData.SemanticVersionBuildMetaData() -> void
GitVersion.SemanticVersionBuildMetaData.SemanticVersionBuildMetaData(GitVersion.SemanticVersionBuildMetaData? buildMetaData) -> void
GitVersion.SemanticVersionBuildMetaData.SemanticVersionBuildMetaData(string? versionSourceSha, int? commitsSinceTag, string? branch, string? commitSha, string? commitShortSha, System.DateTimeOffset? commitDate, int numberOfUnCommittedChanges, string? otherMetadata = null) -> void
GitVersion.SemanticVersionBuildMetaData.Sha -> string?
GitVersion.SemanticVersionBuildMetaData.ShortSha -> string?
GitVersion.SemanticVersionBuildMetaData.ToString(string! format) -> string!
GitVersion.SemanticVersionBuildMetaData.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
GitVersion.SemanticVersionBuildMetaData.UncommittedChanges -> long
GitVersion.SemanticVersionBuildMetaData.VersionSourceSha -> string?
GitVersion.SemanticVersionFormat
GitVersion.SemanticVersionFormat.Loose = 1 -> GitVersion.SemanticVersionFormat
GitVersion.SemanticVersionFormat.Strict = 0 -> GitVersion.SemanticVersionFormat
GitVersion.SemanticVersionFormatValues
GitVersion.SemanticVersionFormatValues.AssemblyFileSemVer.get -> string?
GitVersion.SemanticVersionFormatValues.AssemblySemVer.get -> string?
GitVersion.SemanticVersionFormatValues.BranchName.get -> string?
GitVersion.SemanticVersionFormatValues.BuildMetaData.get -> string?
GitVersion.SemanticVersionFormatValues.CommitDate.get -> string?
GitVersion.SemanticVersionFormatValues.CommitsSinceVersionSource.get -> string?
GitVersion.SemanticVersionFormatValues.EscapedBranchName.get -> string?
GitVersion.SemanticVersionFormatValues.FullBuildMetaData.get -> string?
GitVersion.SemanticVersionFormatValues.FullSemVer.get -> string!
GitVersion.SemanticVersionFormatValues.InformationalVersion.get -> string!
GitVersion.SemanticVersionFormatValues.Major.get -> string!
GitVersion.SemanticVersionFormatValues.MajorMinorPatch.get -> string!
GitVersion.SemanticVersionFormatValues.Minor.get -> string!
GitVersion.SemanticVersionFormatValues.Patch.get -> string!
GitVersion.SemanticVersionFormatValues.PreReleaseLabel.get -> string?
GitVersion.SemanticVersionFormatValues.PreReleaseLabelWithDash.get -> string?
GitVersion.SemanticVersionFormatValues.PreReleaseNumber.get -> string?
GitVersion.SemanticVersionFormatValues.PreReleaseTag.get -> string?
GitVersion.SemanticVersionFormatValues.PreReleaseTagWithDash.get -> string?
GitVersion.SemanticVersionFormatValues.SemanticVersionFormatValues(GitVersion.SemanticVersion! semver, GitVersion.Configuration.EffectiveConfiguration! configuration) -> void
GitVersion.SemanticVersionFormatValues.SemVer.get -> string!
GitVersion.SemanticVersionFormatValues.Sha.get -> string?
GitVersion.SemanticVersionFormatValues.ShortSha.get -> string?
GitVersion.SemanticVersionFormatValues.UncommittedChanges.get -> string?
GitVersion.SemanticVersionFormatValues.VersionSourceSha.get -> string?
GitVersion.SemanticVersionFormatValues.WeightedPreReleaseNumber.get -> string!
GitVersion.SemanticVersionPreReleaseTag
GitVersion.SemanticVersionPreReleaseTag.CompareTo(GitVersion.SemanticVersionPreReleaseTag? other) -> int
GitVersion.SemanticVersionPreReleaseTag.Equals(GitVersion.SemanticVersionPreReleaseTag? other) -> bool
GitVersion.SemanticVersionPreReleaseTag.HasTag() -> bool
GitVersion.SemanticVersionPreReleaseTag.Name.get -> string?
GitVersion.SemanticVersionPreReleaseTag.Name.set -> void
GitVersion.SemanticVersionPreReleaseTag.Number.get -> long?
GitVersion.SemanticVersionPreReleaseTag.Number.set -> void
GitVersion.SemanticVersionPreReleaseTag.PromotedFromCommits.get -> bool?
GitVersion.SemanticVersionPreReleaseTag.PromotedFromCommits.set -> void
GitVersion.SemanticVersionPreReleaseTag.SemanticVersionPreReleaseTag() -> void
GitVersion.SemanticVersionPreReleaseTag.SemanticVersionPreReleaseTag(GitVersion.SemanticVersionPreReleaseTag? preReleaseTag) -> void
GitVersion.SemanticVersionPreReleaseTag.SemanticVersionPreReleaseTag(string? name, long? number) -> void
GitVersion.SemanticVersionPreReleaseTag.ToString(string! format) -> string!
GitVersion.SemanticVersionPreReleaseTag.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
GitVersion.Settings
GitVersion.Settings.NoCache -> bool
GitVersion.Settings.NoFetch -> bool
GitVersion.Settings.NoNormalize -> bool
GitVersion.Settings.OnlyTrackedBranches -> bool
GitVersion.Settings.Settings() -> void
GitVersion.VersionCalculation.BaseVersion
GitVersion.VersionCalculation.BaseVersion.BaseVersion(string! source, bool shouldIncrement, GitVersion.SemanticVersion! semanticVersion, GitVersion.ICommit? baseVersionSource, string? branchNameOverride) -> void
GitVersion.VersionCalculation.BaseVersion.BaseVersionSource.get -> GitVersion.ICommit?
GitVersion.VersionCalculation.BaseVersion.BranchNameOverride.get -> string?
GitVersion.VersionCalculation.BaseVersion.SemanticVersion.get -> GitVersion.SemanticVersion!
GitVersion.VersionCalculation.BaseVersion.ShouldIncrement.get -> bool
GitVersion.VersionCalculation.BaseVersion.Source.get -> string!
GitVersion.VersionCalculation.Cache.GitVersionCache
GitVersion.VersionCalculation.Cache.GitVersionCache.GetCacheDirectory() -> string!
GitVersion.VersionCalculation.Cache.GitVersionCache.GitVersionCache(GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, GitVersion.IGitRepositoryInfo! repositoryInfo) -> void
GitVersion.VersionCalculation.Cache.GitVersionCache.LoadVersionVariablesFromDiskCache(GitVersion.VersionCalculation.Cache.GitVersionCacheKey! key) -> GitVersion.OutputVariables.VersionVariables?
GitVersion.VersionCalculation.Cache.GitVersionCache.WriteVariablesToDiskCache(GitVersion.VersionCalculation.Cache.GitVersionCacheKey! cacheKey, GitVersion.OutputVariables.VersionVariables! variablesFromCache) -> void
GitVersion.VersionCalculation.Cache.GitVersionCacheKeyFactory
GitVersion.VersionCalculation.Cache.GitVersionCacheKeyFactory.Create(GitVersion.Configuration.GitVersionConfiguration? overrideConfiguration) -> GitVersion.VersionCalculation.Cache.GitVersionCacheKey!
GitVersion.VersionCalculation.Cache.GitVersionCacheKeyFactory.GitVersionCacheKeyFactory(GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log, Microsoft.Extensions.Options.IOptions<GitVersion.GitVersionOptions!>! options, GitVersion.Configuration.IConfigurationFileLocator! configFileLocator, GitVersion.IGitRepository! gitRepository, GitVersion.IGitRepositoryInfo! repositoryInfo) -> void
GitVersion.VersionCalculation.Cache.IGitVersionCache
GitVersion.VersionCalculation.Cache.IGitVersionCache.GetCacheDirectory() -> string!
GitVersion.VersionCalculation.Cache.IGitVersionCache.LoadVersionVariablesFromDiskCache(GitVersion.VersionCalculation.Cache.GitVersionCacheKey! key) -> GitVersion.OutputVariables.VersionVariables?
GitVersion.VersionCalculation.Cache.IGitVersionCache.WriteVariablesToDiskCache(GitVersion.VersionCalculation.Cache.GitVersionCacheKey! cacheKey, GitVersion.OutputVariables.VersionVariables! variablesFromCache) -> void
GitVersion.VersionCalculation.Cache.IGitVersionCacheKeyFactory
GitVersion.VersionCalculation.Cache.IGitVersionCacheKeyFactory.Create(GitVersion.Configuration.GitVersionConfiguration? overrideConfiguration) -> GitVersion.VersionCalculation.Cache.GitVersionCacheKey!
GitVersion.VersionCalculation.CommitMessageIncrementMode
GitVersion.VersionCalculation.CommitMessageIncrementMode.Disabled = 1 -> GitVersion.VersionCalculation.CommitMessageIncrementMode
GitVersion.VersionCalculation.CommitMessageIncrementMode.Enabled = 0 -> GitVersion.VersionCalculation.CommitMessageIncrementMode
GitVersion.VersionCalculation.CommitMessageIncrementMode.MergeMessageOnly = 2 -> GitVersion.VersionCalculation.CommitMessageIncrementMode
GitVersion.VersionCalculation.ConfigNextVersionVersionStrategy
GitVersion.VersionCalculation.ConfigNextVersionVersionStrategy.ConfigNextVersionVersionStrategy(System.Lazy<GitVersion.GitVersionContext!>! versionContext) -> void
GitVersion.VersionCalculation.EffectiveBranchConfigurationFinder
GitVersion.VersionCalculation.EffectiveBranchConfigurationFinder.EffectiveBranchConfigurationFinder(GitVersion.Logging.ILog! log, GitVersion.Common.IRepositoryStore! repositoryStore) -> void
GitVersion.VersionCalculation.FallbackVersionStrategy
GitVersion.VersionCalculation.FallbackVersionStrategy.FallbackVersionStrategy() -> void
GitVersion.VersionCalculation.IEffectiveBranchConfigurationFinder
GitVersion.VersionCalculation.IEffectiveBranchConfigurationFinder.GetConfigurations(GitVersion.IBranch! branch, GitVersion.Configuration.GitVersionConfiguration! configuration) -> System.Collections.Generic.IEnumerable<GitVersion.Configuration.EffectiveBranchConfiguration!>!
GitVersion.VersionCalculation.IIncrementStrategyFinder
GitVersion.VersionCalculation.IIncrementStrategyFinder.DetermineIncrementedField(GitVersion.GitVersionContext! context, GitVersion.VersionCalculation.BaseVersion! baseVersion, GitVersion.Configuration.EffectiveConfiguration! configuration) -> GitVersion.VersionField
GitVersion.VersionCalculation.IIncrementStrategyFinder.GetIncrementForCommits(GitVersion.Configuration.GitVersionConfiguration! configuration, System.Collections.Generic.IEnumerable<GitVersion.ICommit!>! commits) -> GitVersion.VersionField?
GitVersion.VersionCalculation.IMainlineVersionCalculator
GitVersion.VersionCalculation.IMainlineVersionCalculator.CreateVersionBuildMetaData(GitVersion.ICommit? baseVersionSource) -> GitVersion.SemanticVersionBuildMetaData!
GitVersion.VersionCalculation.IMainlineVersionCalculator.FindMainlineModeVersion(GitVersion.VersionCalculation.BaseVersion! baseVersion) -> GitVersion.SemanticVersion!
GitVersion.VersionCalculation.IncrementStrategyFinder
GitVersion.VersionCalculation.IncrementStrategyFinder.DetermineIncrementedField(GitVersion.GitVersionContext! context, GitVersion.VersionCalculation.BaseVersion! baseVersion, GitVersion.Configuration.EffectiveConfiguration! configuration) -> GitVersion.VersionField
GitVersion.VersionCalculation.IncrementStrategyFinder.GetIncrementForCommits(GitVersion.Configuration.GitVersionConfiguration! configuration, System.Collections.Generic.IEnumerable<GitVersion.ICommit!>! commits) -> GitVersion.VersionField?
GitVersion.VersionCalculation.IncrementStrategyFinder.IncrementStrategyFinder(GitVersion.IGitRepository! repository) -> void
GitVersion.VersionCalculation.INextVersionCalculator
GitVersion.VersionCalculation.INextVersionCalculator.FindVersion() -> GitVersion.VersionCalculation.NextVersion!
GitVersion.VersionCalculation.IVariableProvider
GitVersion.VersionCalculation.IVariableProvider.GetVariablesFor(GitVersion.SemanticVersion! semanticVersion, GitVersion.Configuration.EffectiveConfiguration! configuration, bool isCurrentCommitTagged) -> GitVersion.OutputVariables.VersionVariables!
GitVersion.VersionCalculation.IVersionFilter
GitVersion.VersionCalculation.IVersionFilter.Exclude(GitVersion.VersionCalculation.BaseVersion! version, out string? reason) -> bool
GitVersion.VersionCalculation.IVersionStrategy
GitVersion.VersionCalculation.IVersionStrategy.GetBaseVersions(GitVersion.Configuration.EffectiveBranchConfiguration! configuration) -> System.Collections.Generic.IEnumerable<GitVersion.VersionCalculation.BaseVersion!>!
GitVersion.VersionCalculation.MergeMessageVersionStrategy
GitVersion.VersionCalculation.MergeMessageVersionStrategy.MergeMessageVersionStrategy(GitVersion.Logging.ILog! log, System.Lazy<GitVersion.GitVersionContext!>! versionContext, GitVersion.Common.IRepositoryStore! repositoryStore) -> void
GitVersion.VersionCalculation.MinDateVersionFilter
GitVersion.VersionCalculation.MinDateVersionFilter.Exclude(GitVersion.VersionCalculation.BaseVersion! version, out string? reason) -> bool
GitVersion.VersionCalculation.MinDateVersionFilter.MinDateVersionFilter(System.DateTimeOffset minimum) -> void
GitVersion.VersionCalculation.NextVersion
GitVersion.VersionCalculation.NextVersion.BaseVersion.get -> GitVersion.VersionCalculation.BaseVersion!
GitVersion.VersionCalculation.NextVersion.Branch.get -> GitVersion.IBranch!
GitVersion.VersionCalculation.NextVersion.CompareTo(GitVersion.VersionCalculation.NextVersion! other) -> int
GitVersion.VersionCalculation.NextVersion.Configuration.get -> GitVersion.Configuration.EffectiveConfiguration!
GitVersion.VersionCalculation.NextVersion.Equals(GitVersion.VersionCalculation.NextVersion! other) -> bool
GitVersion.VersionCalculation.NextVersion.IncrementedVersion.get -> GitVersion.SemanticVersion!
GitVersion.VersionCalculation.NextVersion.NextVersion(GitVersion.SemanticVersion! incrementedVersion, GitVersion.VersionCalculation.BaseVersion! baseVersion, GitVersion.Configuration.EffectiveBranchConfiguration! configuration) -> void
GitVersion.VersionCalculation.NextVersion.NextVersion(GitVersion.SemanticVersion! incrementedVersion, GitVersion.VersionCalculation.BaseVersion! baseVersion, GitVersion.IBranch! branch, GitVersion.Configuration.EffectiveConfiguration! configuration) -> void
GitVersion.VersionCalculation.NextVersionCalculator
GitVersion.VersionCalculation.NextVersionCalculator.NextVersionCalculator(GitVersion.Logging.ILog! log, GitVersion.VersionCalculation.IMainlineVersionCalculator! mainlineVersionCalculator, GitVersion.Common.IRepositoryStore! repositoryStore, System.Lazy<GitVersion.GitVersionContext!>! versionContext, System.Collections.Generic.IEnumerable<GitVersion.VersionCalculation.IVersionStrategy!>! versionStrategies, GitVersion.VersionCalculation.IEffectiveBranchConfigurationFinder! effectiveBranchConfigurationFinder, GitVersion.VersionCalculation.IIncrementStrategyFinder! incrementStrategyFinder) -> void
GitVersion.VersionCalculation.ShaVersionFilter
GitVersion.VersionCalculation.ShaVersionFilter.Exclude(GitVersion.VersionCalculation.BaseVersion! version, out string? reason) -> bool
GitVersion.VersionCalculation.ShaVersionFilter.ShaVersionFilter(System.Collections.Generic.IEnumerable<string!>! shas) -> void
GitVersion.VersionCalculation.TaggedCommitVersionStrategy
GitVersion.VersionCalculation.TaggedCommitVersionStrategy.TaggedCommitVersionStrategy(GitVersion.Common.IRepositoryStore! repositoryStore, System.Lazy<GitVersion.GitVersionContext!>! versionContext) -> void
GitVersion.VersionCalculation.TaggedCommitVersionStrategy.VersionTaggedCommit
GitVersion.VersionCalculation.TaggedCommitVersionStrategy.VersionTaggedCommit.Commit -> GitVersion.ICommit!
GitVersion.VersionCalculation.TaggedCommitVersionStrategy.VersionTaggedCommit.SemVer -> GitVersion.SemanticVersion!
GitVersion.VersionCalculation.TaggedCommitVersionStrategy.VersionTaggedCommit.Tag -> string!
GitVersion.VersionCalculation.TaggedCommitVersionStrategy.VersionTaggedCommit.VersionTaggedCommit(GitVersion.ICommit! commit, GitVersion.SemanticVersion! semVer, string! tag) -> void
GitVersion.VersionCalculation.TrackReleaseBranchesVersionStrategy
GitVersion.VersionCalculation.TrackReleaseBranchesVersionStrategy.TrackReleaseBranchesVersionStrategy(GitVersion.Common.IRepositoryStore! repositoryStore, System.Lazy<GitVersion.GitVersionContext!>! versionContext) -> void
GitVersion.VersionCalculation.VariableProvider
GitVersion.VersionCalculation.VariableProvider.GetVariablesFor(GitVersion.SemanticVersion! semanticVersion, GitVersion.Configuration.EffectiveConfiguration! configuration, bool isCurrentCommitTagged) -> GitVersion.OutputVariables.VersionVariables!
GitVersion.VersionCalculation.VariableProvider.VariableProvider(GitVersion.IEnvironment! environment, GitVersion.Logging.ILog! log) -> void
GitVersion.VersionCalculation.VersionCalculationModule
GitVersion.VersionCalculation.VersionCalculationModule.RegisterTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
GitVersion.VersionCalculation.VersionCalculationModule.VersionCalculationModule() -> void
GitVersion.VersionCalculation.VersionInBranchNameVersionStrategy
GitVersion.VersionCalculation.VersionInBranchNameVersionStrategy.VersionInBranchNameVersionStrategy(GitVersion.Common.IRepositoryStore! repositoryStore, System.Lazy<GitVersion.GitVersionContext!>! versionContext) -> void
GitVersion.VersionCalculation.VersioningMode
GitVersion.VersionCalculation.VersioningMode.ContinuousDelivery = 0 -> GitVersion.VersionCalculation.VersioningMode
GitVersion.VersionCalculation.VersioningMode.ContinuousDeployment = 1 -> GitVersion.VersionCalculation.VersioningMode
GitVersion.VersionCalculation.VersioningMode.Mainline = 2 -> GitVersion.VersionCalculation.VersioningMode
GitVersion.VersionCalculation.VersionStrategyBase
GitVersion.VersionCalculation.VersionStrategyBase.Context.get -> GitVersion.GitVersionContext!
GitVersion.VersionCalculation.VersionStrategyBase.VersionStrategyBase(System.Lazy<GitVersion.GitVersionContext!>! versionContext) -> void
GitVersion.VersionCalculation.VersionStrategyModule
GitVersion.VersionCalculation.VersionStrategyModule.VersionStrategyModule() -> void
GitVersion.VersionConverters.AssemblyInfo.AssemblyInfoContext
GitVersion.VersionConverters.AssemblyInfo.AssemblyInfoContext.AssemblyInfoContext() -> void
GitVersion.VersionConverters.AssemblyInfo.AssemblyInfoContext.AssemblyInfoContext(string! workingDirectory, bool ensureAssemblyInfo, params string![]! assemblyInfoFiles) -> void
GitVersion.VersionConverters.AssemblyInfo.AssemblyInfoContext.AssemblyInfoFiles.get -> string![]!
GitVersion.VersionConverters.AssemblyInfo.AssemblyInfoContext.EnsureAssemblyInfo.get -> bool
GitVersion.VersionConverters.AssemblyInfo.AssemblyInfoContext.WorkingDirectory.get -> string!
GitVersion.VersionConverters.AssemblyInfo.AssemblyInfoFileUpdater
GitVersion.VersionConverters.AssemblyInfo.AssemblyInfoFileUpdater.AssemblyInfoFileUpdater(GitVersion.Logging.ILog! log, GitVersion.IFileSystem! fileSystem) -> void
GitVersion.VersionConverters.AssemblyInfo.AssemblyInfoFileUpdater.Dispose() -> void
GitVersion.VersionConverters.AssemblyInfo.AssemblyInfoFileUpdater.Execute(GitVersion.OutputVariables.VersionVariables! variables, GitVersion.VersionConverters.AssemblyInfo.AssemblyInfoContext context) -> void
GitVersion.VersionConverters.AssemblyInfo.IAssemblyInfoFileUpdater
GitVersion.VersionConverters.AssemblyInfo.IProjectFileUpdater
GitVersion.VersionConverters.AssemblyInfo.IProjectFileUpdater.CanUpdateProjectFile(System.Xml.Linq.XElement! xmlRoot) -> bool
GitVersion.VersionConverters.AssemblyInfo.ProjectFileUpdater
GitVersion.VersionConverters.AssemblyInfo.ProjectFileUpdater.CanUpdateProjectFile(System.Xml.Linq.XElement! xmlRoot) -> bool
GitVersion.VersionConverters.AssemblyInfo.ProjectFileUpdater.Dispose() -> void
GitVersion.VersionConverters.AssemblyInfo.ProjectFileUpdater.Execute(GitVersion.OutputVariables.VersionVariables! variables, GitVersion.VersionConverters.AssemblyInfo.AssemblyInfoContext context) -> void
GitVersion.VersionConverters.AssemblyInfo.ProjectFileUpdater.ProjectFileUpdater(GitVersion.Logging.ILog! log, GitVersion.IFileSystem! fileSystem) -> void
GitVersion.VersionConverters.GitVersionInfo.GitVersionInfoContext
GitVersion.VersionConverters.GitVersionInfo.GitVersionInfoContext.FileExtension.get -> string!
GitVersion.VersionConverters.GitVersionInfo.GitVersionInfoContext.FileName.get -> string!
GitVersion.VersionConverters.GitVersionInfo.GitVersionInfoContext.GitVersionInfoContext() -> void
GitVersion.VersionConverters.GitVersionInfo.GitVersionInfoContext.GitVersionInfoContext(string! workingDirectory, string! fileName, string! fileExtension) -> void
GitVersion.VersionConverters.GitVersionInfo.GitVersionInfoContext.WorkingDirectory.get -> string!
GitVersion.VersionConverters.GitVersionInfo.GitVersionInfoGenerator
GitVersion.VersionConverters.GitVersionInfo.GitVersionInfoGenerator.Dispose() -> void
GitVersion.VersionConverters.GitVersionInfo.GitVersionInfoGenerator.Execute(GitVersion.OutputVariables.VersionVariables! variables, GitVersion.VersionConverters.GitVersionInfo.GitVersionInfoContext context) -> void
GitVersion.VersionConverters.GitVersionInfo.GitVersionInfoGenerator.GitVersionInfoGenerator(GitVersion.IFileSystem! fileSystem) -> void
GitVersion.VersionConverters.GitVersionInfo.IGitVersionInfoGenerator
GitVersion.VersionConverters.IConverterContext
GitVersion.VersionConverters.IConverterContext.WorkingDirectory.get -> string!
GitVersion.VersionConverters.IVersionConverter<T>
GitVersion.VersionConverters.IVersionConverter<T>.Execute(GitVersion.OutputVariables.VersionVariables! variables, T context) -> void
GitVersion.VersionConverters.OutputGenerator.IOutputGenerator
GitVersion.VersionConverters.OutputGenerator.OutputContext
GitVersion.VersionConverters.OutputGenerator.OutputContext.OutputContext() -> void
GitVersion.VersionConverters.OutputGenerator.OutputContext.OutputContext(string! workingDirectory, string? outputFile, bool? updateBuildNumber) -> void
GitVersion.VersionConverters.OutputGenerator.OutputContext.OutputFile.get -> string?
GitVersion.VersionConverters.OutputGenerator.OutputContext.UpdateBuildNumber.get -> bool?
GitVersion.VersionConverters.OutputGenerator.OutputContext.WorkingDirectory.get -> string!
GitVersion.VersionConverters.OutputGenerator.OutputGenerator
GitVersion.VersionConverters.OutputGenerator.OutputGenerator.Dispose() -> void
GitVersion.VersionConverters.OutputGenerator.OutputGenerator.Execute(GitVersion.OutputVariables.VersionVariables! variables, GitVersion.VersionConverters.OutputGenerator.OutputContext context) -> void
GitVersion.VersionConverters.OutputGenerator.OutputGenerator.OutputGenerator(GitVersion.BuildAgents.ICurrentBuildAgent! buildAgent, GitVersion.Logging.IConsole! console, GitVersion.IFileSystem! fileSystem, Microsoft.Extensions.Options.IOptions<GitVersion.GitVersionOptions!>! options) -> void
GitVersion.VersionConverters.VersionConvertersModule
GitVersion.VersionConverters.VersionConvertersModule.RegisterTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
GitVersion.VersionConverters.VersionConvertersModule.VersionConvertersModule() -> void
GitVersion.VersionConverters.WixUpdater.IWixVersionFileUpdater
GitVersion.VersionConverters.WixUpdater.WixVersionContext
GitVersion.VersionConverters.WixUpdater.WixVersionContext.WixVersionContext() -> void
GitVersion.VersionConverters.WixUpdater.WixVersionContext.WixVersionContext(string! workingDirectory) -> void
GitVersion.VersionConverters.WixUpdater.WixVersionContext.WorkingDirectory.get -> string!
GitVersion.VersionConverters.WixUpdater.WixVersionFileUpdater
GitVersion.VersionConverters.WixUpdater.WixVersionFileUpdater.Dispose() -> void
GitVersion.VersionConverters.WixUpdater.WixVersionFileUpdater.Execute(GitVersion.OutputVariables.VersionVariables! variables, GitVersion.VersionConverters.WixUpdater.WixVersionContext context) -> void
GitVersion.VersionConverters.WixUpdater.WixVersionFileUpdater.WixVersionFileUpdater(GitVersion.IFileSystem! fileSystem, GitVersion.Logging.ILog! log) -> void
GitVersion.VersionField
GitVersion.VersionField.Major = 3 -> GitVersion.VersionField
GitVersion.VersionField.Minor = 2 -> GitVersion.VersionField
GitVersion.VersionField.None = 0 -> GitVersion.VersionField
GitVersion.VersionField.Patch = 1 -> GitVersion.VersionField
GitVersion.WarningException
GitVersion.WarningException.WarningException(string! message) -> void
GitVersion.WixInfo
GitVersion.WixInfo.ShouldUpdate -> bool
GitVersion.WixInfo.WixInfo() -> void
override GitVersion.BranchCommit.Equals(object? obj) -> bool
override GitVersion.BranchCommit.GetHashCode() -> int
override GitVersion.BuildAgents.AppVeyor.EnvironmentVariable.get -> string!
override GitVersion.BuildAgents.AppVeyor.GenerateSetParameterMessage(string! name, string! value) -> string![]!
override GitVersion.BuildAgents.AppVeyor.GenerateSetVersionMessage(GitVersion.OutputVariables.VersionVariables! variables) -> string!
override GitVersion.BuildAgents.AppVeyor.GetCurrentBranch(bool usingDynamicRepos) -> string?
override GitVersion.BuildAgents.AppVeyor.PreventFetch() -> bool
override GitVersion.BuildAgents.AzurePipelines.EnvironmentVariable.get -> string!
override GitVersion.BuildAgents.AzurePipelines.GenerateSetParameterMessage(string! name, string! value) -> string![]!
override GitVersion.BuildAgents.AzurePipelines.GenerateSetVersionMessage(GitVersion.OutputVariables.VersionVariables! variables) -> string!
override GitVersion.BuildAgents.AzurePipelines.GetCurrentBranch(bool usingDynamicRepos) -> string?
override GitVersion.BuildAgents.AzurePipelines.PreventFetch() -> bool
override GitVersion.BuildAgents.BitBucketPipelines.EnvironmentVariable.get -> string!
override GitVersion.BuildAgents.BitBucketPipelines.GenerateSetParameterMessage(string! name, string! value) -> string![]!
override GitVersion.BuildAgents.BitBucketPipelines.GenerateSetVersionMessage(GitVersion.OutputVariables.VersionVariables! variables) -> string?
override GitVersion.BuildAgents.BitBucketPipelines.GetCurrentBranch(bool usingDynamicRepos) -> string?
override GitVersion.BuildAgents.BitBucketPipelines.WriteIntegration(System.Action<string?>! writer, GitVersion.OutputVariables.VersionVariables! variables, bool updateBuildNumber = true) -> void
override GitVersion.BuildAgents.BuildKite.CanApplyToCurrentContext() -> bool
override GitVersion.BuildAgents.BuildKite.EnvironmentVariable.get -> string!
override GitVersion.BuildAgents.BuildKite.GenerateSetParameterMessage(string! name, string! value) -> string![]!
override GitVersion.BuildAgents.BuildKite.GenerateSetVersionMessage(GitVersion.OutputVariables.VersionVariables! variables) -> string!
override GitVersion.BuildAgents.BuildKite.GetCurrentBranch(bool usingDynamicRepos) -> string?
override GitVersion.BuildAgents.BuildKite.PreventFetch() -> bool
override GitVersion.BuildAgents.BuildServerModule.RegisterTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
override GitVersion.BuildAgents.CodeBuild.CanApplyToCurrentContext() -> bool
override GitVersion.BuildAgents.CodeBuild.GenerateSetParameterMessage(string! name, string! value) -> string![]!
override GitVersion.BuildAgents.CodeBuild.GenerateSetVersionMessage(GitVersion.OutputVariables.VersionVariables! variables) -> string!
override GitVersion.BuildAgents.CodeBuild.GetCurrentBranch(bool usingDynamicRepos) -> string?
override GitVersion.BuildAgents.CodeBuild.PreventFetch() -> bool
override GitVersion.BuildAgents.CodeBuild.WriteIntegration(System.Action<string?>! writer, GitVersion.OutputVariables.VersionVariables! variables, bool updateBuildNumber = true) -> void
override GitVersion.BuildAgents.ContinuaCi.EnvironmentVariable.get -> string!
override GitVersion.BuildAgents.ContinuaCi.GenerateSetParameterMessage(string! name, string! value) -> string![]!
override GitVersion.BuildAgents.ContinuaCi.GenerateSetVersionMessage(GitVersion.OutputVariables.VersionVariables! variables) -> string!
override GitVersion.BuildAgents.ContinuaCi.PreventFetch() -> bool
override GitVersion.BuildAgents.Drone.CanApplyToCurrentContext() -> bool
override GitVersion.BuildAgents.Drone.EnvironmentVariable.get -> string!
override GitVersion.BuildAgents.Drone.GenerateSetParameterMessage(string! name, string! value) -> string![]!
override GitVersion.BuildAgents.Drone.GenerateSetVersionMessage(GitVersion.OutputVariables.VersionVariables! variables) -> string!
override GitVersion.BuildAgents.Drone.GetCurrentBranch(bool usingDynamicRepos) -> string?
override GitVersion.BuildAgents.Drone.PreventFetch() -> bool
override GitVersion.BuildAgents.EnvRun.CanApplyToCurrentContext() -> bool
override GitVersion.BuildAgents.EnvRun.EnvironmentVariable.get -> string!
override GitVersion.BuildAgents.EnvRun.GenerateSetParameterMessage(string! name, string! value) -> string![]!
override GitVersion.BuildAgents.EnvRun.GenerateSetVersionMessage(GitVersion.OutputVariables.VersionVariables! variables) -> string!
override GitVersion.BuildAgents.EnvRun.PreventFetch() -> bool
override GitVersion.BuildAgents.GitHubActions.EnvironmentVariable.get -> string!
override GitVersion.BuildAgents.GitHubActions.GenerateSetParameterMessage(string! name, string! value) -> string![]!
override GitVersion.BuildAgents.GitHubActions.GenerateSetVersionMessage(GitVersion.OutputVariables.VersionVariables! variables) -> string!
override GitVersion.BuildAgents.GitHubActions.GetCurrentBranch(bool usingDynamicRepos) -> string?
override GitVersion.BuildAgents.GitHubActions.PreventFetch() -> bool
override GitVersion.BuildAgents.GitHubActions.WriteIntegration(System.Action<string?>! writer, GitVersion.OutputVariables.VersionVariables! variables, bool updateBuildNumber = true) -> void
override GitVersion.BuildAgents.GitLabCi.EnvironmentVariable.get -> string!
override GitVersion.BuildAgents.GitLabCi.GenerateSetParameterMessage(string! name, string! value) -> string![]!
override GitVersion.BuildAgents.GitLabCi.GenerateSetVersionMessage(GitVersion.OutputVariables.VersionVariables! variables) -> string!
override GitVersion.BuildAgents.GitLabCi.GetCurrentBranch(bool usingDynamicRepos) -> string?
override GitVersion.BuildAgents.GitLabCi.PreventFetch() -> bool
override GitVersion.BuildAgents.GitLabCi.WriteIntegration(System.Action<string?>! writer, GitVersion.OutputVariables.VersionVariables! variables, bool updateBuildNumber = true) -> void
override GitVersion.BuildAgents.Jenkins.EnvironmentVariable.get -> string!
override GitVersion.BuildAgents.Jenkins.GenerateSetParameterMessage(string! name, string! value) -> string![]!
override GitVersion.BuildAgents.Jenkins.GenerateSetVersionMessage(GitVersion.OutputVariables.VersionVariables! variables) -> string!
override GitVersion.BuildAgents.Jenkins.GetCurrentBranch(bool usingDynamicRepos) -> string?
override GitVersion.BuildAgents.Jenkins.PreventFetch() -> bool
override GitVersion.BuildAgents.Jenkins.ShouldCleanUpRemotes() -> bool
override GitVersion.BuildAgents.Jenkins.WriteIntegration(System.Action<string?>! writer, GitVersion.OutputVariables.VersionVariables! variables, bool updateBuildNumber = true) -> void
override GitVersion.BuildAgents.LocalBuild.CanApplyToCurrentContext() -> bool
override GitVersion.BuildAgents.LocalBuild.EnvironmentVariable.get -> string!
override GitVersion.BuildAgents.LocalBuild.GenerateSetParameterMessage(string! name, string! value) -> string![]!
override GitVersion.BuildAgents.LocalBuild.GenerateSetVersionMessage(GitVersion.OutputVariables.VersionVariables! variables) -> string?
override GitVersion.BuildAgents.MyGet.CanApplyToCurrentContext() -> bool
override GitVersion.BuildAgents.MyGet.EnvironmentVariable.get -> string!
override GitVersion.BuildAgents.MyGet.GenerateSetParameterMessage(string! name, string! value) -> string![]!
override GitVersion.BuildAgents.MyGet.GenerateSetVersionMessage(GitVersion.OutputVariables.VersionVariables! variables) -> string?
override GitVersion.BuildAgents.MyGet.PreventFetch() -> bool
override GitVersion.BuildAgents.SpaceAutomation.EnvironmentVariable.get -> string!
override GitVersion.BuildAgents.SpaceAutomation.GenerateSetParameterMessage(string! name, string! value) -> string![]!
override GitVersion.BuildAgents.SpaceAutomation.GenerateSetVersionMessage(GitVersion.OutputVariables.VersionVariables! variables) -> string!
override GitVersion.BuildAgents.SpaceAutomation.GetCurrentBranch(bool usingDynamicRepos) -> string?
override GitVersion.BuildAgents.TeamCity.EnvironmentVariable.get -> string!
override GitVersion.BuildAgents.TeamCity.GenerateSetParameterMessage(string! name, string! value) -> string![]!
override GitVersion.BuildAgents.TeamCity.GenerateSetVersionMessage(GitVersion.OutputVariables.VersionVariables! variables) -> string!
override GitVersion.BuildAgents.TeamCity.GetCurrentBranch(bool usingDynamicRepos) -> string?
override GitVersion.BuildAgents.TeamCity.PreventFetch() -> bool
override GitVersion.BuildAgents.TravisCi.CanApplyToCurrentContext() -> bool
override GitVersion.BuildAgents.TravisCi.EnvironmentVariable.get -> string!
override GitVersion.BuildAgents.TravisCi.GenerateSetParameterMessage(string! name, string! value) -> string![]!
override GitVersion.BuildAgents.TravisCi.GenerateSetVersionMessage(GitVersion.OutputVariables.VersionVariables! variables) -> string!
override GitVersion.BuildAgents.TravisCi.PreventFetch() -> bool
override GitVersion.Configuration.GitVersionConfiguration.ToString() -> string!
override GitVersion.Configuration.Init.EditConfigStep.DefaultResult.get -> string?
override GitVersion.Configuration.Init.EditConfigStep.GetPrompt(GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> string!
override GitVersion.Configuration.Init.EditConfigStep.HandleResult(string? result, System.Collections.Generic.Queue<GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep!>! steps, GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> GitVersion.Configuration.Init.StepResult!
override GitVersion.Configuration.Init.GitVersionInitModule.RegisterTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
override GitVersion.Configuration.Init.SetConfig.AssemblyVersioningSchemeSetting.DefaultResult.get -> string!
override GitVersion.Configuration.Init.SetConfig.AssemblyVersioningSchemeSetting.GetPrompt(GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> string!
override GitVersion.Configuration.Init.SetConfig.AssemblyVersioningSchemeSetting.HandleResult(string? result, System.Collections.Generic.Queue<GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep!>! steps, GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> GitVersion.Configuration.Init.StepResult!
override GitVersion.Configuration.Init.SetConfig.ConfigureBranch.DefaultResult.get -> string!
override GitVersion.Configuration.Init.SetConfig.ConfigureBranch.GetPrompt(GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> string!
override GitVersion.Configuration.Init.SetConfig.ConfigureBranch.HandleResult(string? result, System.Collections.Generic.Queue<GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep!>! steps, GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> GitVersion.Configuration.Init.StepResult!
override GitVersion.Configuration.Init.SetConfig.ConfigureBranches.DefaultResult.get -> string!
override GitVersion.Configuration.Init.SetConfig.ConfigureBranches.GetPrompt(GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> string!
override GitVersion.Configuration.Init.SetConfig.ConfigureBranches.HandleResult(string? result, System.Collections.Generic.Queue<GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep!>! steps, GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> GitVersion.Configuration.Init.StepResult!
override GitVersion.Configuration.Init.SetConfig.GlobalModeSetting.DefaultResult.get -> string!
override GitVersion.Configuration.Init.SetConfig.GlobalModeSetting.GetPrompt(GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> string!
override GitVersion.Configuration.Init.SetConfig.GlobalModeSetting.HandleResult(string? result, System.Collections.Generic.Queue<GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep!>! steps, GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> GitVersion.Configuration.Init.StepResult!
override GitVersion.Configuration.Init.SetConfig.SetBranchIncrementMode.DefaultResult.get -> string!
override GitVersion.Configuration.Init.SetConfig.SetBranchIncrementMode.GetPrompt(GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> string!
override GitVersion.Configuration.Init.SetConfig.SetBranchIncrementMode.HandleResult(string? result, System.Collections.Generic.Queue<GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep!>! steps, GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> GitVersion.Configuration.Init.StepResult!
override GitVersion.Configuration.Init.SetConfig.SetBranchTag.DefaultResult.get -> string!
override GitVersion.Configuration.Init.SetConfig.SetBranchTag.GetPrompt(GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> string!
override GitVersion.Configuration.Init.SetConfig.SetBranchTag.HandleResult(string? result, System.Collections.Generic.Queue<GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep!>! steps, GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> GitVersion.Configuration.Init.StepResult!
override GitVersion.Configuration.Init.SetNextVersion.DefaultResult.get -> string?
override GitVersion.Configuration.Init.SetNextVersion.GetPrompt(GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> string!
override GitVersion.Configuration.Init.SetNextVersion.HandleResult(string? result, System.Collections.Generic.Queue<GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep!>! steps, GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> GitVersion.Configuration.Init.StepResult!
override GitVersion.Configuration.Init.Wizard.FinishedSetupStep.GetPrompt(GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> string!
override GitVersion.Configuration.Init.Wizard.GitFlowSetupStep.GetPrompt(GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> string!
override GitVersion.Configuration.Init.Wizard.GitHubFlowStep.GetPrompt(GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> string!
override GitVersion.Configuration.Init.Wizard.PickBranchingStrategy1Step.DefaultResult.get -> string?
override GitVersion.Configuration.Init.Wizard.PickBranchingStrategy1Step.GetPrompt(GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> string!
override GitVersion.Configuration.Init.Wizard.PickBranchingStrategy1Step.HandleResult(string? result, System.Collections.Generic.Queue<GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep!>! steps, GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> GitVersion.Configuration.Init.StepResult!
override GitVersion.Configuration.Init.Wizard.PickBranchingStrategy2Step.DefaultResult.get -> string?
override GitVersion.Configuration.Init.Wizard.PickBranchingStrategy2Step.GetPrompt(GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> string!
override GitVersion.Configuration.Init.Wizard.PickBranchingStrategy2Step.HandleResult(string? result, System.Collections.Generic.Queue<GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep!>! steps, GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> GitVersion.Configuration.Init.StepResult!
override GitVersion.Configuration.Init.Wizard.PickBranchingStrategy3Step.DefaultResult.get -> string?
override GitVersion.Configuration.Init.Wizard.PickBranchingStrategy3Step.GetPrompt(GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> string!
override GitVersion.Configuration.Init.Wizard.PickBranchingStrategy3Step.HandleResult(string? result, System.Collections.Generic.Queue<GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep!>! steps, GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> GitVersion.Configuration.Init.StepResult!
override GitVersion.Configuration.Init.Wizard.PickBranchingStrategyStep.DefaultResult.get -> string?
override GitVersion.Configuration.Init.Wizard.PickBranchingStrategyStep.GetPrompt(GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> string!
override GitVersion.Configuration.Init.Wizard.PickBranchingStrategyStep.HandleResult(string? result, System.Collections.Generic.Queue<GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep!>! steps, GitVersion.Configuration.GitVersionConfiguration! configuration, string! workingDirectory) -> GitVersion.Configuration.Init.StepResult!
override GitVersion.Helpers.LambdaKeyComparer<TSource, TKey>.Compare(TSource? x, TSource? y) -> int
override GitVersion.Logging.Log.ToString() -> string!
override GitVersion.OutputVariables.VersionVariables.ToString() -> string!
override GitVersion.OutputVariables.VersionVariablesJsonNumberConverter.CanConvert(System.Type! typeToConvert) -> bool
override GitVersion.OutputVariables.VersionVariablesJsonNumberConverter.HandleNull.get -> bool
override GitVersion.OutputVariables.VersionVariablesJsonNumberConverter.Read(ref System.Text.Json.Utf8JsonReader reader, System.Type! typeToConvert, System.Text.Json.JsonSerializerOptions! options) -> string!
override GitVersion.OutputVariables.VersionVariablesJsonNumberConverter.Write(System.Text.Json.Utf8JsonWriter! writer, string? value, System.Text.Json.JsonSerializerOptions! options) -> void
override GitVersion.OutputVariables.VersionVariablesJsonStringConverter.CanConvert(System.Type! typeToConvert) -> bool
override GitVersion.OutputVariables.VersionVariablesJsonStringConverter.HandleNull.get -> bool
override GitVersion.OutputVariables.VersionVariablesJsonStringConverter.Read(ref System.Text.Json.Utf8JsonReader reader, System.Type! typeToConvert, System.Text.Json.JsonSerializerOptions! options) -> string!
override GitVersion.OutputVariables.VersionVariablesJsonStringConverter.Write(System.Text.Json.Utf8JsonWriter! writer, string? value, System.Text.Json.JsonSerializerOptions! options) -> void
override GitVersion.ReferenceName.Equals(object! obj) -> bool
override GitVersion.ReferenceName.GetHashCode() -> int
override GitVersion.ReferenceName.ToString() -> string!
override GitVersion.SemanticVersion.Equals(object? obj) -> bool
override GitVersion.SemanticVersion.GetHashCode() -> int
override GitVersion.SemanticVersion.ToString() -> string!
override GitVersion.SemanticVersionBuildMetaData.Equals(object! obj) -> bool
override GitVersion.SemanticVersionBuildMetaData.GetHashCode() -> int
override GitVersion.SemanticVersionBuildMetaData.ToString() -> string!
override GitVersion.SemanticVersionPreReleaseTag.Equals(object? obj) -> bool
override GitVersion.SemanticVersionPreReleaseTag.GetHashCode() -> int
override GitVersion.SemanticVersionPreReleaseTag.ToString() -> string!
override GitVersion.VersionCalculation.BaseVersion.ToString() -> string!
override GitVersion.VersionCalculation.ConfigNextVersionVersionStrategy.GetBaseVersions(GitVersion.Configuration.EffectiveBranchConfiguration! configuration) -> System.Collections.Generic.IEnumerable<GitVersion.VersionCalculation.BaseVersion!>!
override GitVersion.VersionCalculation.MergeMessageVersionStrategy.GetBaseVersions(GitVersion.Configuration.EffectiveBranchConfiguration! configuration) -> System.Collections.Generic.IEnumerable<GitVersion.VersionCalculation.BaseVersion!>!
override GitVersion.VersionCalculation.NextVersion.Equals(object! other) -> bool
override GitVersion.VersionCalculation.NextVersion.GetHashCode() -> int
override GitVersion.VersionCalculation.NextVersion.ToString() -> string!
override GitVersion.VersionCalculation.TaggedCommitVersionStrategy.GetBaseVersions(GitVersion.Configuration.EffectiveBranchConfiguration! configuration) -> System.Collections.Generic.IEnumerable<GitVersion.VersionCalculation.BaseVersion!>!
override GitVersion.VersionCalculation.TaggedCommitVersionStrategy.VersionTaggedCommit.ToString() -> string!
override GitVersion.VersionCalculation.TrackReleaseBranchesVersionStrategy.GetBaseVersions(GitVersion.Configuration.EffectiveBranchConfiguration! configuration) -> System.Collections.Generic.IEnumerable<GitVersion.VersionCalculation.BaseVersion!>!
override GitVersion.VersionCalculation.VersionInBranchNameVersionStrategy.GetBaseVersions(GitVersion.Configuration.EffectiveBranchConfiguration! configuration) -> System.Collections.Generic.IEnumerable<GitVersion.VersionCalculation.BaseVersion!>!
override GitVersion.VersionCalculation.VersionStrategyModule.RegisterTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
readonly GitVersion.BuildAgents.BuildAgentBase.Log -> GitVersion.Logging.ILog!
readonly GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep.Console -> GitVersion.Logging.IConsole!
readonly GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep.FileSystem -> GitVersion.IFileSystem!
readonly GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep.Log -> GitVersion.Logging.ILog!
readonly GitVersion.Configuration.Init.Wizard.ConfigInitWizardStep.StepFactory -> GitVersion.Configuration.Init.Wizard.IConfigInitStepFactory!
static GitVersion.BranchCommit.operator !=(GitVersion.BranchCommit left, GitVersion.BranchCommit right) -> bool
static GitVersion.BranchCommit.operator ==(GitVersion.BranchCommit left, GitVersion.BranchCommit right) -> bool
static GitVersion.Configuration.ConfigurationExtensions.GetBranchConfiguration(this GitVersion.Configuration.GitVersionConfiguration! configuration, GitVersion.IBranch! branch) -> GitVersion.Configuration.BranchConfiguration!
static GitVersion.Configuration.ConfigurationExtensions.GetBranchConfiguration(this GitVersion.Configuration.GitVersionConfiguration! configuration, string! branchName) -> GitVersion.Configuration.BranchConfiguration!
static GitVersion.Configuration.ConfigurationExtensions.GetBranchSpecificTag(this GitVersion.Configuration.EffectiveConfiguration! configuration, GitVersion.Logging.ILog! log, string? branchFriendlyName, string? branchNameOverride) -> string!
static GitVersion.Configuration.ConfigurationExtensions.GetFallbackBranchConfiguration(this GitVersion.Configuration.GitVersionConfiguration! configuration) -> GitVersion.Configuration.BranchConfiguration!
static GitVersion.Configuration.ConfigurationExtensions.GetReleaseBranchConfiguration(this GitVersion.Configuration.GitVersionConfiguration! configuration) -> System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string!, GitVersion.Configuration.BranchConfiguration!>>!
static GitVersion.Configuration.ConfigurationExtensions.GetUnknownBranchConfiguration(this GitVersion.Configuration.GitVersionConfiguration! configuration) -> GitVersion.Configuration.BranchConfiguration!
static GitVersion.Configuration.ConfigurationExtensions.IsReleaseBranch(this GitVersion.Configuration.GitVersionConfiguration! configuration, string! branchName) -> bool
static GitVersion.Configuration.ConfigurationSerializer.Read(System.IO.TextReader! reader) -> GitVersion.Configuration.GitVersionConfiguration!
static GitVersion.Configuration.ConfigurationSerializer.Write(GitVersion.Configuration.GitVersionConfiguration! configuration, System.IO.TextWriter! writer) -> void
static GitVersion.Configuration.Init.StepResult.ExitWithoutSaving() -> GitVersion.Configuration.Init.StepResult!
static GitVersion.Configuration.Init.StepResult.InvalidResponseSelected() -> GitVersion.Configuration.Init.StepResult!
static GitVersion.Configuration.Init.StepResult.Ok() -> GitVersion.Configuration.Init.StepResult!
static GitVersion.Configuration.Init.StepResult.SaveAndExit() -> GitVersion.Configuration.Init.StepResult!
static GitVersion.Extensions.AssemblyVersionsGeneratorExtensions.GetAssemblyFileVersion(this GitVersion.SemanticVersion! sv, GitVersion.Extensions.AssemblyFileVersioningScheme scheme) -> string?
static GitVersion.Extensions.AssemblyVersionsGeneratorExtensions.GetAssemblyVersion(this GitVersion.SemanticVersion! sv, GitVersion.Extensions.AssemblyVersioningScheme scheme) -> string?
static GitVersion.Extensions.CommonExtensions.NotNull<T>(this T? value, string! name = "") -> T!
static GitVersion.Extensions.CommonExtensions.NotNullOrEmpty(this string? value, string! name = "") -> string!
static GitVersion.Extensions.CommonExtensions.NotNullOrWhitespace(this string? value, string! name = "") -> string!
static GitVersion.Extensions.DictionaryExtensions.GetOrAdd<TKey, TValue>(this System.Collections.Generic.IDictionary<TKey, TValue>! dict, TKey key, System.Func<TValue>! getValue) -> TValue
static GitVersion.Extensions.EnumerableExtensions.OnlyOrDefault<T>(this System.Collections.Generic.IEnumerable<T>! source) -> T?
static GitVersion.Extensions.GitExtensions.CreateGitLogArgs(int? maxCommits) -> string!
static GitVersion.Extensions.GitExtensions.DumpGraph(string! workingDirectory, System.Action<string!>? writer = null, int? maxCommits = null) -> void
static GitVersion.Extensions.ObjectExtensions.Deconstruct<TKey, TValue>(this System.Collections.Generic.KeyValuePair<TKey, TValue> kvp, out TKey key, out TValue value) -> void
static GitVersion.Extensions.ObjectExtensions.GetProperties(this object! obj) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, string!>>!
static GitVersion.Extensions.ReadEmbeddedResourceExtensions.ReadAsStringFromEmbeddedResource<T>(this string! resourceName) -> string!
static GitVersion.Extensions.ServiceCollectionExtensions.AddModule(this Microsoft.Extensions.DependencyInjection.IServiceCollection! serviceCollection, GitVersion.IGitVersionModule! gitVersionModule) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static GitVersion.Extensions.ServiceCollectionExtensions.GetServiceForType<TService, TType>(this System.IServiceProvider! serviceProvider) -> TService
static GitVersion.Extensions.StringExtensions.AppendLineFormat(this System.Text.StringBuilder! stringBuilder, string! format, params object![]! args) -> void
static GitVersion.Extensions.StringExtensions.ArgumentRequiresValue(this string! argument, int argumentIndex) -> bool
static GitVersion.Extensions.StringExtensions.IsEquivalentTo(this string! self, string? other) -> bool
static GitVersion.Extensions.StringExtensions.IsFalse(this string? value) -> bool
static GitVersion.Extensions.StringExtensions.IsHelp(this string! singleArgument) -> bool
static GitVersion.Extensions.StringExtensions.IsInit(this string! singleArgument) -> bool
static GitVersion.Extensions.StringExtensions.IsNullOrEmpty(this string? value) -> bool
static GitVersion.Extensions.StringExtensions.IsNullOrWhiteSpace(this string? value) -> bool
static GitVersion.Extensions.StringExtensions.IsSwitch(this string? value, string! switchName) -> bool
static GitVersion.Extensions.StringExtensions.IsSwitchArgument(this string? value) -> bool
static GitVersion.Extensions.StringExtensions.IsTrue(this string? value) -> bool
static GitVersion.Extensions.StringExtensions.IsValidPath(this string? path) -> bool
static GitVersion.Extensions.StringExtensions.RegexReplace(this string! input, string! pattern, string! replace, System.Text.RegularExpressions.RegexOptions options = System.Text.RegularExpressions.RegexOptions.None) -> string!
static GitVersion.GitVersionModule.FindAllDerivedTypes<T>(System.Reflection.Assembly! assembly) -> System.Collections.Generic.IEnumerable<System.Type!>!
static GitVersion.Helpers.EncodingHelper.DetectEncoding(string? filename) -> System.Text.Encoding?
static GitVersion.Helpers.EncodingHelper.DetectEncoding(System.Collections.Generic.IList<byte>! bytes) -> System.Text.Encoding?
static GitVersion.Helpers.PathHelper.Combine(string? path1) -> string!
static GitVersion.Helpers.PathHelper.Combine(string? path1, string? path2) -> string!
static GitVersion.Helpers.PathHelper.Combine(string? path1, string? path2, string? path3) -> string!
static GitVersion.Helpers.PathHelper.Combine(string? path1, string? path2, string? path3, string? path4) -> string!
static GitVersion.Helpers.PathHelper.GetFullPath(string? path) -> string!
static GitVersion.Helpers.ProcessHelper.Run(System.Action<string!>! output, System.Action<string!>! errorOutput, System.IO.TextReader? input, string! exe, string! args, string! workingDirectory, params System.Collections.Generic.KeyValuePair<string!, string?>[]! environmentalVariables) -> int
static GitVersion.Helpers.ServiceMessageEscapeHelper.EscapeValue(string? value) -> string?
static GitVersion.IncrementStrategyExtensions.ToVersionField(this GitVersion.IncrementStrategy strategy) -> GitVersion.VersionField
static GitVersion.Logging.Disposable.Create(System.Action! disposer) -> System.IDisposable!
static GitVersion.Logging.LogExtensions.Debug(this GitVersion.Logging.ILog! log, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Debug(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Debug(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.Debug(this GitVersion.Logging.ILog! log, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.DiagnosticVerbosity(this GitVersion.Logging.ILog! log) -> System.IDisposable!
static GitVersion.Logging.LogExtensions.Error(this GitVersion.Logging.ILog! log, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Error(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Error(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.Error(this GitVersion.Logging.ILog! log, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.GetVerbosityForLevel(GitVersion.Logging.LogLevel level) -> GitVersion.Logging.Verbosity
static GitVersion.Logging.LogExtensions.Info(this GitVersion.Logging.ILog! log, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Info(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Info(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.Info(this GitVersion.Logging.ILog! log, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.MinimalVerbosity(this GitVersion.Logging.ILog! log) -> System.IDisposable!
static GitVersion.Logging.LogExtensions.NormalVerbosity(this GitVersion.Logging.ILog! log) -> System.IDisposable!
static GitVersion.Logging.LogExtensions.QuietVerbosity(this GitVersion.Logging.ILog! log) -> System.IDisposable!
static GitVersion.Logging.LogExtensions.Verbose(this GitVersion.Logging.ILog! log, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Verbose(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Verbose(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.Verbose(this GitVersion.Logging.ILog! log, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.VerboseVerbosity(this GitVersion.Logging.ILog! log) -> System.IDisposable!
static GitVersion.Logging.LogExtensions.Warning(this GitVersion.Logging.ILog! log, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Warning(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Warning(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.Warning(this GitVersion.Logging.ILog! log, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.Write(this GitVersion.Logging.ILog! log, GitVersion.Logging.LogLevel level, string! format, params object![]! args) -> void
static GitVersion.OutputVariables.VersionVariables.AvailableVariables.get -> System.Collections.Generic.IEnumerable<string!>!
static GitVersion.OutputVariables.VersionVariables.FromFile(string! filePath, GitVersion.IFileSystem! fileSystem) -> GitVersion.OutputVariables.VersionVariables!
static GitVersion.OutputVariables.VersionVariables.FromJson(string! json) -> GitVersion.OutputVariables.VersionVariables!
static GitVersion.ReferenceName.FromBranchName(string! branchName) -> GitVersion.ReferenceName!
static GitVersion.ReferenceName.Parse(string! canonicalName) -> GitVersion.ReferenceName!
static GitVersion.SemanticVersion.operator !=(GitVersion.SemanticVersion? v1, GitVersion.SemanticVersion? v2) -> bool
static GitVersion.SemanticVersion.operator <(GitVersion.SemanticVersion! v1, GitVersion.SemanticVersion! v2) -> bool
static GitVersion.SemanticVersion.operator <=(GitVersion.SemanticVersion! v1, GitVersion.SemanticVersion! v2) -> bool
static GitVersion.SemanticVersion.operator ==(GitVersion.SemanticVersion? v1, GitVersion.SemanticVersion? v2) -> bool
static GitVersion.SemanticVersion.operator >(GitVersion.SemanticVersion! v1, GitVersion.SemanticVersion! v2) -> bool
static GitVersion.SemanticVersion.operator >=(GitVersion.SemanticVersion! v1, GitVersion.SemanticVersion! v2) -> bool
static GitVersion.SemanticVersion.Parse(string! version, string? tagPrefixRegex, GitVersion.SemanticVersionFormat format = GitVersion.SemanticVersionFormat.Strict) -> GitVersion.SemanticVersion!
static GitVersion.SemanticVersion.TryParse(string! version, string? tagPrefixRegex, out GitVersion.SemanticVersion? semanticVersion, GitVersion.SemanticVersionFormat format = GitVersion.SemanticVersionFormat.Strict) -> bool
static GitVersion.SemanticVersionBuildMetaData.implicit operator GitVersion.SemanticVersionBuildMetaData!(string! preReleaseTag) -> GitVersion.SemanticVersionBuildMetaData!
static GitVersion.SemanticVersionBuildMetaData.implicit operator string?(GitVersion.SemanticVersionBuildMetaData? preReleaseTag) -> string?
static GitVersion.SemanticVersionBuildMetaData.operator !=(GitVersion.SemanticVersionBuildMetaData? left, GitVersion.SemanticVersionBuildMetaData? right) -> bool
static GitVersion.SemanticVersionBuildMetaData.operator ==(GitVersion.SemanticVersionBuildMetaData? left, GitVersion.SemanticVersionBuildMetaData? right) -> bool
static GitVersion.SemanticVersionBuildMetaData.Parse(string? buildMetaData) -> GitVersion.SemanticVersionBuildMetaData!
static GitVersion.SemanticVersionPreReleaseTag.implicit operator GitVersion.SemanticVersionPreReleaseTag!(string? preReleaseTag) -> GitVersion.SemanticVersionPreReleaseTag!
static GitVersion.SemanticVersionPreReleaseTag.implicit operator string?(GitVersion.SemanticVersionPreReleaseTag? preReleaseTag) -> string?
static GitVersion.SemanticVersionPreReleaseTag.operator !=(GitVersion.SemanticVersionPreReleaseTag? left, GitVersion.SemanticVersionPreReleaseTag? right) -> bool
static GitVersion.SemanticVersionPreReleaseTag.operator <(GitVersion.SemanticVersionPreReleaseTag? left, GitVersion.SemanticVersionPreReleaseTag? right) -> bool
static GitVersion.SemanticVersionPreReleaseTag.operator <=(GitVersion.SemanticVersionPreReleaseTag? left, GitVersion.SemanticVersionPreReleaseTag? right) -> bool
static GitVersion.SemanticVersionPreReleaseTag.operator ==(GitVersion.SemanticVersionPreReleaseTag? left, GitVersion.SemanticVersionPreReleaseTag? right) -> bool
static GitVersion.SemanticVersionPreReleaseTag.operator >(GitVersion.SemanticVersionPreReleaseTag? left, GitVersion.SemanticVersionPreReleaseTag? right) -> bool
static GitVersion.SemanticVersionPreReleaseTag.operator >=(GitVersion.SemanticVersionPreReleaseTag? left, GitVersion.SemanticVersionPreReleaseTag? right) -> bool
static GitVersion.SemanticVersionPreReleaseTag.Parse(string? preReleaseTag) -> GitVersion.SemanticVersionPreReleaseTag!
static GitVersion.VersionCalculation.NextVersion.operator !=(GitVersion.VersionCalculation.NextVersion! left, GitVersion.VersionCalculation.NextVersion! right) -> bool
static GitVersion.VersionCalculation.NextVersion.operator <(GitVersion.VersionCalculation.NextVersion! left, GitVersion.VersionCalculation.NextVersion! right) -> bool
static GitVersion.VersionCalculation.NextVersion.operator <=(GitVersion.VersionCalculation.NextVersion! left, GitVersion.VersionCalculation.NextVersion! right) -> bool
static GitVersion.VersionCalculation.NextVersion.operator ==(GitVersion.VersionCalculation.NextVersion! left, GitVersion.VersionCalculation.NextVersion! right) -> bool
static GitVersion.VersionCalculation.NextVersion.operator >(GitVersion.VersionCalculation.NextVersion! left, GitVersion.VersionCalculation.NextVersion! right) -> bool
static GitVersion.VersionCalculation.NextVersion.operator >=(GitVersion.VersionCalculation.NextVersion! left, GitVersion.VersionCalculation.NextVersion! right) -> bool
static readonly GitVersion.BranchCommit.Empty -> GitVersion.BranchCommit
static readonly GitVersion.Helpers.StringComparerUtils.IgnoreCaseComparer -> System.StringComparer!
static readonly GitVersion.Helpers.StringComparerUtils.OsDependentComparer -> System.StringComparer!
static readonly GitVersion.Helpers.StringComparerUtils.OsDependentComparison -> System.StringComparison
static readonly GitVersion.Logging.Disposable.Empty -> System.IDisposable!
System.Runtime.CompilerServices.CallerArgumentExpressionAttribute
System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.CallerArgumentExpressionAttribute(string! parameterName) -> void
System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName.get -> string!
virtual GitVersion.BuildAgents.BuildAgentBase.CanApplyToCurrentContext() -> bool
virtual GitVersion.BuildAgents.BuildAgentBase.GetCurrentBranch(bool usingDynamicRepos) -> string?
virtual GitVersion.BuildAgents.BuildAgentBase.PreventFetch() -> bool
virtual GitVersion.BuildAgents.BuildAgentBase.ShouldCleanUpRemotes() -> bool
virtual GitVersion.BuildAgents.BuildAgentBase.WriteIntegration(System.Action<string?>! writer, GitVersion.OutputVariables.VersionVariables! variables, bool updateBuildNumber = true) -> void
virtual GitVersion.Configuration.IgnoreConfiguration.IsEmpty.get -> bool
virtual GitVersion.Configuration.IgnoreConfiguration.ToFilters() -> System.Collections.Generic.IEnumerable<GitVersion.VersionCalculation.IVersionFilter!>!
virtual GitVersion.VersionCalculation.EffectiveBranchConfigurationFinder.GetConfigurations(GitVersion.IBranch! branch, GitVersion.Configuration.GitVersionConfiguration! configuration) -> System.Collections.Generic.IEnumerable<GitVersion.Configuration.EffectiveBranchConfiguration!>!
virtual GitVersion.VersionCalculation.FallbackVersionStrategy.GetBaseVersions(GitVersion.Configuration.EffectiveBranchConfiguration! configuration) -> System.Collections.Generic.IEnumerable<GitVersion.VersionCalculation.BaseVersion!>!
virtual GitVersion.VersionCalculation.NextVersionCalculator.FindVersion() -> GitVersion.VersionCalculation.NextVersion!
virtual GitVersion.VersionCalculation.TaggedCommitVersionStrategy.FormatSource(GitVersion.VersionCalculation.TaggedCommitVersionStrategy.VersionTaggedCommit! version) -> string!
