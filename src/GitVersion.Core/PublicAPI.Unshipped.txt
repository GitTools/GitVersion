#nullable enable
const GitVersion.Git.ReferenceName.LocalBranchPrefix = "refs/heads/" -> string!
const GitVersion.Git.ReferenceName.OriginPrefix = "origin/" -> string!
const GitVersion.Git.ReferenceName.RemoteTrackingBranchPrefix = "refs/remotes/" -> string!
const GitVersion.Git.ReferenceName.TagPrefix = "refs/tags/" -> string!
GitVersion.Agents.IBuildAgent
GitVersion.Agents.IBuildAgent.CanApplyToCurrentContext() -> bool
GitVersion.Agents.IBuildAgent.GetCurrentBranch(bool usingDynamicRepos) -> string?
GitVersion.Agents.IBuildAgent.IsDefault.get -> bool
GitVersion.Agents.IBuildAgent.PreventFetch() -> bool
GitVersion.Agents.IBuildAgent.ShouldCleanUpRemotes() -> bool
GitVersion.Agents.IBuildAgent.WriteIntegration(System.Action<string?>! writer, GitVersion.OutputVariables.GitVersionVariables! variables, bool updateBuildNumber = true) -> void
GitVersion.Agents.ICurrentBuildAgent
GitVersion.AssemblySettingsInfo
GitVersion.AssemblySettingsInfo.AssemblySettingsInfo() -> void
GitVersion.AssemblySettingsInfo.EnsureAssemblyInfo -> bool
GitVersion.AssemblySettingsInfo.Files -> System.Collections.Generic.ISet<string!>!
GitVersion.AssemblySettingsInfo.UpdateAssemblyInfo -> bool
GitVersion.AssemblySettingsInfo.UpdateProjectFiles -> bool
GitVersion.BugException
GitVersion.BugException.BugException() -> void
GitVersion.BugException.BugException(string! message) -> void
GitVersion.BugException.BugException(string? message, System.Exception? innerException) -> void
GitVersion.Common.IRepositoryStore
GitVersion.Common.IRepositoryStore.ExcludingBranches(System.Collections.Generic.IEnumerable<GitVersion.Git.IBranch!>! branchesToExclude) -> System.Collections.Generic.IEnumerable<GitVersion.Git.IBranch!>!
GitVersion.Common.IRepositoryStore.FindBranch(GitVersion.Git.ReferenceName! branchName) -> GitVersion.Git.IBranch?
GitVersion.Common.IRepositoryStore.FindBranch(string! branchName) -> GitVersion.Git.IBranch?
GitVersion.Common.IRepositoryStore.FindCommitBranchBranchedFrom(GitVersion.Git.IBranch? branch, GitVersion.Configuration.IGitVersionConfiguration! configuration, params GitVersion.Git.IBranch![]! excludedBranches) -> GitVersion.Git.BranchCommit
GitVersion.Common.IRepositoryStore.FindCommitBranchesBranchedFrom(GitVersion.Git.IBranch! branch, GitVersion.Configuration.IGitVersionConfiguration! configuration, params GitVersion.Git.IBranch![]! excludedBranches) -> System.Collections.Generic.IEnumerable<GitVersion.Git.BranchCommit>!
GitVersion.Common.IRepositoryStore.FindCommitBranchesBranchedFrom(GitVersion.Git.IBranch! branch, GitVersion.Configuration.IGitVersionConfiguration! configuration, System.Collections.Generic.IEnumerable<GitVersion.Git.IBranch!>! excludedBranches) -> System.Collections.Generic.IEnumerable<GitVersion.Git.BranchCommit>!
GitVersion.Common.IRepositoryStore.FindMergeBase(GitVersion.Git.IBranch? branch, GitVersion.Git.IBranch? otherBranch) -> GitVersion.Git.ICommit?
GitVersion.Common.IRepositoryStore.FindMergeBase(GitVersion.Git.ICommit! commit, GitVersion.Git.ICommit! mainlineTip) -> GitVersion.Git.ICommit?
GitVersion.Common.IRepositoryStore.GetBranchesContainingCommit(GitVersion.Git.ICommit! commit, System.Collections.Generic.IEnumerable<GitVersion.Git.IBranch!>? branches = null, bool onlyTrackedBranches = false) -> System.Collections.Generic.IEnumerable<GitVersion.Git.IBranch!>!
GitVersion.Common.IRepositoryStore.GetCommitLog(GitVersion.Git.ICommit? baseVersionSource, GitVersion.Git.ICommit! currentCommit, GitVersion.Configuration.IIgnoreConfiguration! ignore) -> System.Collections.Generic.IReadOnlyList<GitVersion.Git.ICommit!>!
GitVersion.Common.IRepositoryStore.GetCurrentCommit(GitVersion.Git.IBranch! currentBranch, string? commitId, GitVersion.Configuration.IIgnoreConfiguration! ignore) -> GitVersion.Git.ICommit?
GitVersion.Common.IRepositoryStore.GetNumberOfUncommittedChanges() -> int
GitVersion.Common.IRepositoryStore.GetSourceBranches(GitVersion.Git.IBranch! branch, GitVersion.Configuration.IGitVersionConfiguration! configuration, params GitVersion.Git.IBranch![]! excludedBranches) -> System.Collections.Generic.IEnumerable<GitVersion.Git.IBranch!>!
GitVersion.Common.IRepositoryStore.GetSourceBranches(GitVersion.Git.IBranch! branch, GitVersion.Configuration.IGitVersionConfiguration! configuration, System.Collections.Generic.IEnumerable<GitVersion.Git.IBranch!>! excludedBranches) -> System.Collections.Generic.IEnumerable<GitVersion.Git.IBranch!>!
GitVersion.Common.IRepositoryStore.GetTargetBranch(string? targetBranchName) -> GitVersion.Git.IBranch!
GitVersion.Common.IRepositoryStore.IsCommitOnBranch(GitVersion.Git.ICommit? baseVersionSource, GitVersion.Git.IBranch! branch, GitVersion.Git.ICommit! firstMatchingCommit) -> bool
GitVersion.Configuration.AssemblyFileVersioningScheme
GitVersion.Configuration.AssemblyFileVersioningScheme.Major = 3 -> GitVersion.Configuration.AssemblyFileVersioningScheme
GitVersion.Configuration.AssemblyFileVersioningScheme.MajorMinor = 2 -> GitVersion.Configuration.AssemblyFileVersioningScheme
GitVersion.Configuration.AssemblyFileVersioningScheme.MajorMinorPatch = 1 -> GitVersion.Configuration.AssemblyFileVersioningScheme
GitVersion.Configuration.AssemblyFileVersioningScheme.MajorMinorPatchTag = 0 -> GitVersion.Configuration.AssemblyFileVersioningScheme
GitVersion.Configuration.AssemblyFileVersioningScheme.None = 4 -> GitVersion.Configuration.AssemblyFileVersioningScheme
GitVersion.Configuration.AssemblyVersioningScheme
GitVersion.Configuration.AssemblyVersioningScheme.Major = 3 -> GitVersion.Configuration.AssemblyVersioningScheme
GitVersion.Configuration.AssemblyVersioningScheme.MajorMinor = 2 -> GitVersion.Configuration.AssemblyVersioningScheme
GitVersion.Configuration.AssemblyVersioningScheme.MajorMinorPatch = 1 -> GitVersion.Configuration.AssemblyVersioningScheme
GitVersion.Configuration.AssemblyVersioningScheme.MajorMinorPatchTag = 0 -> GitVersion.Configuration.AssemblyVersioningScheme
GitVersion.Configuration.AssemblyVersioningScheme.None = 4 -> GitVersion.Configuration.AssemblyVersioningScheme
GitVersion.Configuration.EffectiveBranchConfiguration
GitVersion.Configuration.EffectiveBranchConfiguration.Branch.get -> GitVersion.Git.IBranch!
GitVersion.Configuration.EffectiveBranchConfiguration.EffectiveBranchConfiguration(GitVersion.Configuration.EffectiveConfiguration! Value, GitVersion.Git.IBranch! Branch) -> void
GitVersion.Configuration.EffectiveBranchConfiguration.Value.get -> GitVersion.Configuration.EffectiveConfiguration!
GitVersion.Configuration.EffectiveConfiguration
GitVersion.Configuration.EffectiveConfiguration.AssemblyFileVersioningFormat.get -> string?
GitVersion.Configuration.EffectiveConfiguration.AssemblyFileVersioningScheme.get -> GitVersion.Configuration.AssemblyFileVersioningScheme
GitVersion.Configuration.EffectiveConfiguration.AssemblyInformationalFormat.get -> string?
GitVersion.Configuration.EffectiveConfiguration.AssemblyVersioningFormat.get -> string?
GitVersion.Configuration.EffectiveConfiguration.AssemblyVersioningScheme.get -> GitVersion.Configuration.AssemblyVersioningScheme
GitVersion.Configuration.EffectiveConfiguration.DeploymentMode.get -> GitVersion.VersionCalculation.DeploymentMode
GitVersion.Configuration.EffectiveConfiguration.EffectiveConfiguration(GitVersion.Configuration.IGitVersionConfiguration! configuration, GitVersion.Configuration.IBranchConfiguration! branchConfiguration, GitVersion.Configuration.EffectiveConfiguration? fallbackConfiguration = null) -> void
GitVersion.Configuration.EffectiveConfiguration.Ignore.get -> GitVersion.Configuration.IIgnoreConfiguration!
GitVersion.Configuration.EffectiveConfiguration.PreventIncrementOfMergedBranch.get -> bool
GitVersion.Configuration.EffectiveConfiguration.PreventIncrementWhenBranchMerged.get -> bool
GitVersion.Configuration.EffectiveConfiguration.PreventIncrementWhenCurrentCommitTagged.get -> bool
GitVersion.Configuration.EffectiveConfiguration.RegularExpression.get -> string?
GitVersion.Configuration.EffectiveConfiguration.CommitDateFormat.get -> string?
GitVersion.Configuration.EffectiveConfiguration.CommitMessageIncrementing.get -> GitVersion.VersionCalculation.CommitMessageIncrementMode
GitVersion.Configuration.EffectiveConfiguration.Increment.get -> GitVersion.IncrementStrategy
GitVersion.Configuration.EffectiveConfiguration.IsMainBranch.get -> bool
GitVersion.Configuration.EffectiveConfiguration.IsReleaseBranch.get -> bool
GitVersion.Configuration.EffectiveConfiguration.Label.get -> string?
GitVersion.Configuration.EffectiveConfiguration.LabelNumberPattern.get -> string?
GitVersion.Configuration.EffectiveConfiguration.TagPreReleaseWeight.get -> int
GitVersion.Configuration.EffectiveConfiguration.TagPrefix.get -> string?
GitVersion.Configuration.EffectiveConfiguration.MajorVersionBumpMessage.get -> string?
GitVersion.Configuration.EffectiveConfiguration.MinorVersionBumpMessage.get -> string?
GitVersion.Configuration.EffectiveConfiguration.NextVersion.get -> string?
GitVersion.Configuration.EffectiveConfiguration.NoBumpMessage.get -> string?
GitVersion.Configuration.EffectiveConfiguration.PatchVersionBumpMessage.get -> string?
GitVersion.Configuration.EffectiveConfiguration.PreReleaseWeight.get -> int
GitVersion.Configuration.EffectiveConfiguration.SemanticVersionFormat.get -> GitVersion.SemanticVersionFormat
GitVersion.Configuration.EffectiveConfiguration.TrackMergeMessage.get -> bool
GitVersion.Configuration.EffectiveConfiguration.TrackMergeTarget.get -> bool
GitVersion.Configuration.EffectiveConfiguration.TracksReleaseBranches.get -> bool
GitVersion.Configuration.EffectiveConfiguration.UpdateBuildNumber.get -> bool
GitVersion.Configuration.EffectiveConfiguration.VersionFilters.get -> System.Collections.Generic.IEnumerable<GitVersion.VersionCalculation.IVersionFilter!>!
GitVersion.Configuration.EffectiveConfiguration.VersionInBranchRegex.get -> System.Text.RegularExpressions.Regex!
GitVersion.Configuration.EffectiveConfiguration.VersionStrategy.get -> GitVersion.VersionCalculation.VersionStrategies
GitVersion.Configuration.IBranchConfiguration
GitVersion.Configuration.IBranchConfiguration.CommitMessageIncrementing.get -> GitVersion.VersionCalculation.CommitMessageIncrementMode?
GitVersion.Configuration.IBranchConfiguration.DeploymentMode.get -> GitVersion.VersionCalculation.DeploymentMode?
GitVersion.Configuration.IBranchConfiguration.Increment.get -> GitVersion.IncrementStrategy
GitVersion.Configuration.IBranchConfiguration.Inherit(GitVersion.Configuration.EffectiveConfiguration! configuration) -> GitVersion.Configuration.IBranchConfiguration!
GitVersion.Configuration.IBranchConfiguration.Inherit(GitVersion.Configuration.IBranchConfiguration! configuration) -> GitVersion.Configuration.IBranchConfiguration!
GitVersion.Configuration.IBranchConfiguration.IsMainBranch.get -> bool?
GitVersion.Configuration.IBranchConfiguration.IsMatch(string! branchName) -> bool
GitVersion.Configuration.IBranchConfiguration.IsReleaseBranch.get -> bool?
GitVersion.Configuration.IBranchConfiguration.IsSourceBranchFor.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
GitVersion.Configuration.IBranchConfiguration.Label.get -> string?
GitVersion.Configuration.IBranchConfiguration.LabelNumberPattern.get -> string?
GitVersion.Configuration.IBranchConfiguration.PreReleaseWeight.get -> int?
GitVersion.Configuration.IBranchConfiguration.PreventIncrement.get -> GitVersion.Configuration.IPreventIncrementConfiguration!
GitVersion.Configuration.IBranchConfiguration.RegularExpression.get -> string?
GitVersion.Configuration.IBranchConfiguration.SourceBranches.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
GitVersion.Configuration.IBranchConfiguration.TrackMergeMessage.get -> bool?
GitVersion.Configuration.IBranchConfiguration.TrackMergeTarget.get -> bool?
GitVersion.Configuration.IBranchConfiguration.TracksReleaseBranches.get -> bool?
GitVersion.Configuration.IConfigurationFileLocator
GitVersion.Configuration.IConfigurationFileLocator.GetConfigurationFile(string? directory) -> string?
GitVersion.Configuration.IConfigurationFileLocator.Verify(string? workingDirectory, string? projectRootDirectory) -> void
GitVersion.Configuration.IConfigurationProvider
GitVersion.Configuration.IConfigurationProvider.Provide(System.Collections.Generic.IReadOnlyDictionary<object!, object?>? overrideConfiguration = null) -> GitVersion.Configuration.IGitVersionConfiguration!
GitVersion.Configuration.IGitVersionConfiguration
GitVersion.Configuration.IGitVersionConfiguration.AssemblyFileVersioningFormat.get -> string?
GitVersion.Configuration.IGitVersionConfiguration.AssemblyFileVersioningScheme.get -> GitVersion.Configuration.AssemblyFileVersioningScheme?
GitVersion.Configuration.IGitVersionConfiguration.AssemblyInformationalFormat.get -> string?
GitVersion.Configuration.IGitVersionConfiguration.AssemblyVersioningFormat.get -> string?
GitVersion.Configuration.IGitVersionConfiguration.AssemblyVersioningScheme.get -> GitVersion.Configuration.AssemblyVersioningScheme?
GitVersion.Configuration.IGitVersionConfiguration.Branches.get -> System.Collections.Generic.IReadOnlyDictionary<string!, GitVersion.Configuration.IBranchConfiguration!>!
GitVersion.Configuration.IGitVersionConfiguration.CommitDateFormat.get -> string?
GitVersion.Configuration.IGitVersionConfiguration.GetEmptyBranchConfiguration() -> GitVersion.Configuration.IBranchConfiguration!
GitVersion.Configuration.IGitVersionConfiguration.Ignore.get -> GitVersion.Configuration.IIgnoreConfiguration!
GitVersion.Configuration.IGitVersionConfiguration.TagPreReleaseWeight.get -> int?
GitVersion.Configuration.IGitVersionConfiguration.TagPrefix.get -> string?
GitVersion.Configuration.IGitVersionConfiguration.MajorVersionBumpMessage.get -> string?
GitVersion.Configuration.IGitVersionConfiguration.MergeMessageFormats.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>!
GitVersion.Configuration.IGitVersionConfiguration.MinorVersionBumpMessage.get -> string?
GitVersion.Configuration.IGitVersionConfiguration.NextVersion.get -> string?
GitVersion.Configuration.IGitVersionConfiguration.NoBumpMessage.get -> string?
GitVersion.Configuration.IGitVersionConfiguration.PatchVersionBumpMessage.get -> string?
GitVersion.Configuration.IGitVersionConfiguration.SemanticVersionFormat.get -> GitVersion.SemanticVersionFormat
GitVersion.Configuration.IGitVersionConfiguration.UpdateBuildNumber.get -> bool
GitVersion.Configuration.IGitVersionConfiguration.VersionInBranchPattern.get -> string?
GitVersion.Configuration.IGitVersionConfiguration.VersionInBranchRegex.get -> System.Text.RegularExpressions.Regex!
GitVersion.Configuration.IGitVersionConfiguration.VersionStrategy.get -> GitVersion.VersionCalculation.VersionStrategies
GitVersion.Configuration.IGitVersionConfiguration.Workflow.get -> string?
GitVersion.Configuration.IIgnoreConfiguration
GitVersion.Configuration.IIgnoreConfiguration.Before.get -> System.DateTimeOffset?
GitVersion.Configuration.IIgnoreConfiguration.IsEmpty.get -> bool
GitVersion.Configuration.IIgnoreConfiguration.Shas.get -> System.Collections.Generic.IReadOnlySet<string!>!
GitVersion.Configuration.IPreventIncrementConfiguration
GitVersion.Configuration.IPreventIncrementConfiguration.OfMergedBranch.get -> bool?
GitVersion.Configuration.IPreventIncrementConfiguration.WhenBranchMerged.get -> bool?
GitVersion.Configuration.IPreventIncrementConfiguration.WhenCurrentCommitTagged.get -> bool?
GitVersion.ConfigurationInfo
GitVersion.ConfigurationInfo.ConfigurationFile -> string?
GitVersion.ConfigurationInfo.OverrideConfiguration -> System.Collections.Generic.IReadOnlyDictionary<object!, object?>?
GitVersion.ConfigurationInfo.ShowConfiguration -> bool
GitVersion.Extensions.AssemblyVersionsGeneratorExtensions
GitVersion.Extensions.CommonExtensions
GitVersion.Extensions.DictionaryExtensions
GitVersion.Extensions.EnumerableExtensions
GitVersion.Extensions.GitExtensions
GitVersion.Extensions.IncrementStrategyExtensions
GitVersion.Extensions.ReadEmbeddedResourceExtensions
GitVersion.Extensions.ServiceCollectionExtensions
GitVersion.Extensions.StringExtensions
GitVersion.FileWriteInfo
GitVersion.FileWriteInfo.FileExtension.get -> string!
GitVersion.FileWriteInfo.FileExtension.init -> void
GitVersion.FileWriteInfo.FileName.get -> string!
GitVersion.FileWriteInfo.FileName.init -> void
GitVersion.FileWriteInfo.FileWriteInfo(string! WorkingDirectory, string! FileName, string! FileExtension) -> void
GitVersion.FileWriteInfo.WorkingDirectory.get -> string!
GitVersion.FileWriteInfo.WorkingDirectory.init -> void
GitVersion.Git.AuthenticationInfo
GitVersion.Git.AuthenticationInfo.Password.get -> string?
GitVersion.Git.AuthenticationInfo.Password.set -> void
GitVersion.Git.AuthenticationInfo.Token.get -> string?
GitVersion.Git.AuthenticationInfo.Token.set -> void
GitVersion.Git.AuthenticationInfo.Username.get -> string?
GitVersion.Git.AuthenticationInfo.Username.set -> void
GitVersion.Git.BranchCommit
GitVersion.Git.BranchCommit.Branch.get -> GitVersion.Git.IBranch!
GitVersion.Git.BranchCommit.BranchCommit() -> void
GitVersion.Git.BranchCommit.BranchCommit(GitVersion.Git.ICommit! commit, GitVersion.Git.IBranch! branch) -> void
GitVersion.Git.BranchCommit.Commit.get -> GitVersion.Git.ICommit!
GitVersion.Git.BranchCommit.Equals(GitVersion.Git.BranchCommit? other) -> bool
GitVersion.Git.CommitExtensions
GitVersion.Git.CommitFilter
GitVersion.Git.CommitFilter.ExcludeReachableFrom.get -> object?
GitVersion.Git.CommitFilter.ExcludeReachableFrom.set -> void
GitVersion.Git.CommitFilter.FirstParentOnly.get -> bool
GitVersion.Git.CommitFilter.FirstParentOnly.set -> void
GitVersion.Git.CommitFilter.IncludeReachableFrom.get -> object?
GitVersion.Git.CommitFilter.IncludeReachableFrom.set -> void
GitVersion.Git.CommitFilter.SortBy.get -> GitVersion.Git.CommitSortStrategies
GitVersion.Git.CommitFilter.SortBy.set -> void
GitVersion.Git.CommitSortStrategies
GitVersion.Git.CommitSortStrategies.None = 0 -> GitVersion.Git.CommitSortStrategies
GitVersion.Git.CommitSortStrategies.Reverse = 4 -> GitVersion.Git.CommitSortStrategies
GitVersion.Git.CommitSortStrategies.Time = 2 -> GitVersion.Git.CommitSortStrategies
GitVersion.Git.CommitSortStrategies.Topological = 1 -> GitVersion.Git.CommitSortStrategies
GitVersion.Git.IBranch
GitVersion.Git.IBranch.Commits.get -> GitVersion.Git.ICommitCollection!
GitVersion.Git.IBranch.IsDetachedHead.get -> bool
GitVersion.Git.IBranch.IsRemote.get -> bool
GitVersion.Git.IBranch.IsTracking.get -> bool
GitVersion.Git.IBranch.Tip.get -> GitVersion.Git.ICommit?
GitVersion.Git.IBranchCollection
GitVersion.Git.IBranchCollection.ExcludeBranches(System.Collections.Generic.IEnumerable<GitVersion.Git.IBranch!>! branchesToExclude) -> System.Collections.Generic.IEnumerable<GitVersion.Git.IBranch!>!
GitVersion.Git.IBranchCollection.this[string! name].get -> GitVersion.Git.IBranch?
GitVersion.Git.IBranchCollection.UpdateTrackedBranch(GitVersion.Git.IBranch! branch, string! remoteTrackingReferenceName) -> void
GitVersion.Git.ICommit
GitVersion.Git.ICommit.Message.get -> string!
GitVersion.Git.ICommit.Parents.get -> System.Collections.Generic.IReadOnlyList<GitVersion.Git.ICommit!>!
GitVersion.Git.ICommit.When.get -> System.DateTimeOffset
GitVersion.Git.ICommitCollection
GitVersion.Git.ICommitCollection.GetCommitsPriorTo(System.DateTimeOffset olderThan) -> System.Collections.Generic.IEnumerable<GitVersion.Git.ICommit!>!
GitVersion.Git.ICommitCollection.QueryBy(GitVersion.Git.CommitFilter! commitFilter) -> System.Collections.Generic.IEnumerable<GitVersion.Git.ICommit!>!
GitVersion.Git.IGitObject
GitVersion.Git.IGitObject.Id.get -> GitVersion.Git.IObjectId!
GitVersion.Git.IGitObject.Sha.get -> string!
GitVersion.Git.IGitRepository
GitVersion.Git.IGitRepository.Branches.get -> GitVersion.Git.IBranchCollection!
GitVersion.Git.IGitRepository.Commits.get -> GitVersion.Git.ICommitCollection!
GitVersion.Git.IGitRepository.DiscoverRepository(string? gitDirectory) -> void
GitVersion.Git.IGitRepository.FindMergeBase(GitVersion.Git.ICommit! commit, GitVersion.Git.ICommit! otherCommit) -> GitVersion.Git.ICommit?
GitVersion.Git.IGitRepository.GetNumberOfUncommittedChanges() -> int
GitVersion.Git.IGitRepository.Head.get -> GitVersion.Git.IBranch!
GitVersion.Git.IGitRepository.IsHeadDetached.get -> bool
GitVersion.Git.IGitRepository.IsShallow.get -> bool
GitVersion.Git.IGitRepository.Path.get -> string!
GitVersion.Git.IGitRepository.Refs.get -> GitVersion.Git.IReferenceCollection!
GitVersion.Git.IGitRepository.Remotes.get -> GitVersion.Git.IRemoteCollection!
GitVersion.Git.IGitRepository.Tags.get -> GitVersion.Git.ITagCollection!
GitVersion.Git.IGitRepository.WorkingDirectory.get -> string!
GitVersion.Git.IGitRepositoryInfo
GitVersion.Git.IGitRepositoryInfo.DotGitDirectory.get -> string?
GitVersion.Git.IGitRepositoryInfo.DynamicGitRepositoryPath.get -> string?
GitVersion.Git.IGitRepositoryInfo.GitRootPath.get -> string?
GitVersion.Git.IGitRepositoryInfo.ProjectRootDirectory.get -> string?
GitVersion.Git.IMutatingGitRepository
GitVersion.Git.IMutatingGitRepository.Checkout(string! commitOrBranchSpec) -> void
GitVersion.Git.IMutatingGitRepository.Clone(string? sourceUrl, string? workdirPath, GitVersion.Git.AuthenticationInfo! auth) -> void
GitVersion.Git.IMutatingGitRepository.CreateBranchForPullRequestBranch(GitVersion.Git.AuthenticationInfo! auth) -> void
GitVersion.Git.IMutatingGitRepository.Fetch(string! remote, System.Collections.Generic.IEnumerable<string!>! refSpecs, GitVersion.Git.AuthenticationInfo! auth, string? logMessage) -> void
GitVersion.Git.INamedReference
GitVersion.Git.INamedReference.Name.get -> GitVersion.Git.ReferenceName!
GitVersion.Git.IObjectId
GitVersion.Git.IObjectId.Sha.get -> string!
GitVersion.Git.IObjectId.ToString(int prefixLength) -> string!
GitVersion.Git.IReference
GitVersion.Git.IReference.ReferenceTargetId.get -> GitVersion.Git.IObjectId?
GitVersion.Git.IReference.TargetIdentifier.get -> string!
GitVersion.Git.IReferenceCollection
GitVersion.Git.IReferenceCollection.Add(string! name, string! canonicalRefNameOrObject, bool allowOverwrite = false) -> void
GitVersion.Git.IReferenceCollection.FromGlob(string! prefix) -> System.Collections.Generic.IEnumerable<GitVersion.Git.IReference!>!
GitVersion.Git.IReferenceCollection.Head.get -> GitVersion.Git.IReference?
GitVersion.Git.IReferenceCollection.this[GitVersion.Git.ReferenceName! referenceName].get -> GitVersion.Git.IReference?
GitVersion.Git.IReferenceCollection.this[string! name].get -> GitVersion.Git.IReference?
GitVersion.Git.IReferenceCollection.UpdateTarget(GitVersion.Git.IReference! directRef, GitVersion.Git.IObjectId! targetId) -> void
GitVersion.Git.IRefSpec
GitVersion.Git.IRefSpec.Destination.get -> string!
GitVersion.Git.IRefSpec.Direction.get -> GitVersion.Git.RefSpecDirection
GitVersion.Git.IRefSpec.Source.get -> string!
GitVersion.Git.IRefSpec.Specification.get -> string!
GitVersion.Git.IRefSpecCollection
GitVersion.Git.IRemote
GitVersion.Git.IRemote.FetchRefSpecs.get -> System.Collections.Generic.IEnumerable<GitVersion.Git.IRefSpec!>!
GitVersion.Git.IRemote.Name.get -> string!
GitVersion.Git.IRemote.PushRefSpecs.get -> System.Collections.Generic.IEnumerable<GitVersion.Git.IRefSpec!>!
GitVersion.Git.IRemote.RefSpecs.get -> System.Collections.Generic.IEnumerable<GitVersion.Git.IRefSpec!>!
GitVersion.Git.IRemote.Url.get -> string!
GitVersion.Git.IRemoteCollection
GitVersion.Git.IRemoteCollection.Remove(string! remoteName) -> void
GitVersion.Git.IRemoteCollection.this[string! name].get -> GitVersion.Git.IRemote?
GitVersion.Git.IRemoteCollection.Update(string! remoteName, string! refSpec) -> void
GitVersion.Git.ITag
GitVersion.Git.ITag.Commit.get -> GitVersion.Git.ICommit!
GitVersion.Git.ITag.TargetSha.get -> string!
GitVersion.Git.ITagCollection
GitVersion.Git.ReferenceName
GitVersion.Git.ReferenceName.Canonical.get -> string!
GitVersion.Git.ReferenceName.CompareTo(GitVersion.Git.ReferenceName? other) -> int
GitVersion.Git.ReferenceName.Equals(GitVersion.Git.ReferenceName? other) -> bool
GitVersion.Git.ReferenceName.EquivalentTo(string? name) -> bool
GitVersion.Git.ReferenceName.Friendly.get -> string!
GitVersion.Git.ReferenceName.IsLocalBranch.get -> bool
GitVersion.Git.ReferenceName.IsPullRequest.get -> bool
GitVersion.Git.ReferenceName.IsRemoteBranch.get -> bool
GitVersion.Git.ReferenceName.IsTag.get -> bool
GitVersion.Git.ReferenceName.ReferenceName(string! canonical) -> void
GitVersion.Git.ReferenceName.TryGetSemanticVersion(out (GitVersion.SemanticVersion! Value, string? Name) result, GitVersion.Configuration.EffectiveConfiguration! configuration) -> bool
GitVersion.Git.ReferenceName.TryGetSemanticVersion(out (GitVersion.SemanticVersion! Value, string? Name) result, GitVersion.Configuration.IGitVersionConfiguration! configuration) -> bool
GitVersion.Git.ReferenceName.TryGetSemanticVersion(out (GitVersion.SemanticVersion! Value, string? Name) result, System.Text.RegularExpressions.Regex! versionPatternRegex, string? tagPrefix, GitVersion.SemanticVersionFormat format) -> bool
GitVersion.Git.ReferenceName.WithoutOrigin.get -> string!
GitVersion.Git.RefSpecDirection
GitVersion.Git.RefSpecDirection.Fetch = 0 -> GitVersion.Git.RefSpecDirection
GitVersion.Git.RefSpecDirection.Push = 1 -> GitVersion.Git.RefSpecDirection
GitVersion.GitVersionCommonModule
GitVersion.GitVersionCommonModule.GitVersionCommonModule() -> void
GitVersion.GitVersionCommonModule.RegisterTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
GitVersion.GitVersionContext
GitVersion.GitVersionContext.Configuration.get -> GitVersion.Configuration.IGitVersionConfiguration!
GitVersion.GitVersionContext.CurrentBranch.get -> GitVersion.Git.IBranch!
GitVersion.GitVersionContext.CurrentBranchCommits.get -> System.Collections.Generic.IEnumerable<GitVersion.Git.ICommit!>!
GitVersion.GitVersionContext.CurrentCommit.get -> GitVersion.Git.ICommit!
GitVersion.GitVersionContext.GitVersionContext(GitVersion.Git.IBranch! currentBranch, GitVersion.Git.ICommit! currentCommit, GitVersion.Configuration.IGitVersionConfiguration! configuration, bool isCurrentCommitTagged, int numberOfUncommittedChanges) -> void
GitVersion.GitVersionContext.IsCurrentCommitTagged.get -> bool
GitVersion.GitVersionContext.NumberOfUncommittedChanges.get -> int
GitVersion.GitVersionCoreModule
GitVersion.GitVersionCoreModule.GitVersionCoreModule() -> void
GitVersion.GitVersionCoreModule.RegisterTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
GitVersion.GitVersionException
GitVersion.GitVersionException.GitVersionException() -> void
GitVersion.GitVersionException.GitVersionException(string! message) -> void
GitVersion.GitVersionException.GitVersionException(string! message, System.Exception! innerException) -> void
GitVersion.GitVersionException.GitVersionException(string! messageFormat, params object![]! args) -> void
GitVersion.GitVersionOptions
GitVersion.GitVersionOptions.AssemblySettingsInfo.get -> GitVersion.AssemblySettingsInfo!
GitVersion.GitVersionOptions.AuthenticationInfo.get -> GitVersion.Git.AuthenticationInfo!
GitVersion.GitVersionOptions.ConfigurationInfo.get -> GitVersion.ConfigurationInfo!
GitVersion.GitVersionOptions.Diag -> bool
GitVersion.GitVersionOptions.Format -> string?
GitVersion.GitVersionOptions.GitVersionOptions() -> void
GitVersion.GitVersionOptions.IsHelp -> bool
GitVersion.GitVersionOptions.IsVersion -> bool
GitVersion.GitVersionOptions.LogFilePath -> string?
GitVersion.GitVersionOptions.Output -> System.Collections.Generic.ISet<GitVersion.OutputType>!
GitVersion.GitVersionOptions.OutputFile -> string?
GitVersion.GitVersionOptions.RepositoryInfo.get -> GitVersion.RepositoryInfo!
GitVersion.GitVersionOptions.Settings.get -> GitVersion.Settings!
GitVersion.GitVersionOptions.ShowVariable -> string?
GitVersion.GitVersionOptions.Verbosity -> GitVersion.Logging.Verbosity
GitVersion.GitVersionOptions.WixInfo.get -> GitVersion.WixInfo!
GitVersion.GitVersionOptions.WorkingDirectory.get -> string!
GitVersion.GitVersionOptions.WorkingDirectory.set -> void
GitVersion.Helpers.Disposable
GitVersion.Helpers.EncodingHelper
GitVersion.Helpers.IDisposable<T>
GitVersion.Helpers.IDisposable<T>.Value.get -> T
GitVersion.Helpers.LambdaEqualityHelper<T>
GitVersion.Helpers.LambdaEqualityHelper<T>.Equals(T? instance, T? other) -> bool
GitVersion.Helpers.LambdaEqualityHelper<T>.GetHashCode(T instance) -> int
GitVersion.Helpers.LambdaEqualityHelper<T>.LambdaEqualityHelper(params System.Func<T, object?>![]! equalityContributorAccessors) -> void
GitVersion.Helpers.LambdaKeyComparer<TSource, TKey>
GitVersion.Helpers.LambdaKeyComparer<TSource, TKey>.LambdaKeyComparer(System.Func<TSource!, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? innerComparer = null) -> void
GitVersion.Helpers.RetryAction<T, Result>
GitVersion.Helpers.RetryAction<T, Result>.Execute(System.Func<Result>! operation) -> Result
GitVersion.Helpers.RetryAction<T, Result>.RetryAction(int maxRetries = 5) -> void
GitVersion.Helpers.RetryAction<T>
GitVersion.Helpers.RetryAction<T>.Execute(System.Action! operation) -> void
GitVersion.Helpers.RetryAction<T>.RetryAction(int maxRetries = 5) -> void
GitVersion.Helpers.ServiceMessageEscapeHelper
GitVersion.IConverterContext
GitVersion.IConverterContext.WorkingDirectory.get -> string!
GitVersion.IEnvironment
GitVersion.IEnvironment.GetEnvironmentVariable(string! variableName) -> string?
GitVersion.IEnvironment.SetEnvironmentVariable(string! variableName, string? value) -> void
GitVersion.IFileSystem
GitVersion.IFileSystem.Copy(string! from, string! to, bool overwrite) -> void
GitVersion.IFileSystem.CreateDirectory(string! path) -> void
GitVersion.IFileSystem.Delete(string! path) -> void
GitVersion.IFileSystem.DirectoryEnumerateFiles(string? directory, string! searchPattern, System.IO.SearchOption searchOption) -> System.Collections.Generic.IEnumerable<string!>!
GitVersion.IFileSystem.DirectoryExists(string! path) -> bool
GitVersion.IFileSystem.Exists(string! file) -> bool
GitVersion.IFileSystem.GetLastDirectoryWrite(string! path) -> long
GitVersion.IFileSystem.Move(string! from, string! to) -> void
GitVersion.IFileSystem.OpenRead(string! path) -> System.IO.Stream!
GitVersion.IFileSystem.OpenWrite(string! path) -> System.IO.Stream!
GitVersion.IFileSystem.ReadAllText(string! path) -> string!
GitVersion.IFileSystem.WriteAllText(string? file, string! fileContents) -> void
GitVersion.IFileSystem.WriteAllText(string? file, string! fileContents, System.Text.Encoding! encoding) -> void
GitVersion.IGitPreparer
GitVersion.IGitPreparer.EnsureLocalBranchExistsForCurrentBranch(GitVersion.Git.IRemote! remote, string! currentBranch) -> void
GitVersion.IGitPreparer.Prepare() -> void
GitVersion.IGitVersionCalculateTool
GitVersion.IGitVersionCalculateTool.CalculateVersionVariables() -> GitVersion.OutputVariables.GitVersionVariables!
GitVersion.IGitVersionContextFactory
GitVersion.IGitVersionContextFactory.Create(GitVersion.GitVersionOptions! gitVersionOptions) -> GitVersion.GitVersionContext!
GitVersion.IGitVersionModule
GitVersion.IGitVersionModule.FindAllDerivedTypes<T>(System.Reflection.Assembly? assembly) -> System.Collections.Generic.IEnumerable<System.Type!>!
GitVersion.IGitVersionModule.RegisterTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
GitVersion.IVersionConverter<T>
GitVersion.IVersionConverter<T>.Execute(GitVersion.OutputVariables.GitVersionVariables! variables, T context) -> void
GitVersion.IncrementStrategy
GitVersion.IncrementStrategy.Inherit = 4 -> GitVersion.IncrementStrategy
GitVersion.IncrementStrategy.Major = 1 -> GitVersion.IncrementStrategy
GitVersion.IncrementStrategy.Minor = 2 -> GitVersion.IncrementStrategy
GitVersion.IncrementStrategy.None = 0 -> GitVersion.IncrementStrategy
GitVersion.IncrementStrategy.Patch = 3 -> GitVersion.IncrementStrategy
GitVersion.LockedFileException
GitVersion.LockedFileException.LockedFileException() -> void
GitVersion.LockedFileException.LockedFileException(System.Exception! inner) -> void
GitVersion.LockedFileException.LockedFileException(string? message) -> void
GitVersion.LockedFileException.LockedFileException(string? message, System.Exception? innerException) -> void
GitVersion.Logging.IConsole
GitVersion.Logging.IConsole.ReadLine() -> string?
GitVersion.Logging.IConsole.UseColor(System.ConsoleColor consoleColor) -> System.IDisposable!
GitVersion.Logging.IConsole.Write(string? msg) -> void
GitVersion.Logging.IConsole.WriteLine() -> void
GitVersion.Logging.IConsole.WriteLine(string? msg) -> void
GitVersion.Logging.ILog
GitVersion.Logging.ILog.AddLogAppender(GitVersion.Logging.ILogAppender! logAppender) -> void
GitVersion.Logging.ILog.IndentLog(string! operationDescription) -> System.IDisposable!
GitVersion.Logging.ILog.Separator() -> void
GitVersion.Logging.ILog.Verbosity.get -> GitVersion.Logging.Verbosity
GitVersion.Logging.ILog.Verbosity.set -> void
GitVersion.Logging.ILog.Write(GitVersion.Logging.Verbosity verbosity, GitVersion.Logging.LogLevel level, string! format, params object![]! args) -> void
GitVersion.Logging.ILogAppender
GitVersion.Logging.ILogAppender.WriteTo(GitVersion.Logging.LogLevel level, string! message) -> void
GitVersion.Logging.LogAction
GitVersion.Logging.LogActionEntry
GitVersion.Logging.LogExtensions
GitVersion.Logging.LogLevel
GitVersion.Logging.LogLevel.Debug = 5 -> GitVersion.Logging.LogLevel
GitVersion.Logging.LogLevel.Error = 1 -> GitVersion.Logging.LogLevel
GitVersion.Logging.LogLevel.Fatal = 0 -> GitVersion.Logging.LogLevel
GitVersion.Logging.LogLevel.Info = 3 -> GitVersion.Logging.LogLevel
GitVersion.Logging.LogLevel.Verbose = 4 -> GitVersion.Logging.LogLevel
GitVersion.Logging.LogLevel.Warn = 2 -> GitVersion.Logging.LogLevel
GitVersion.Logging.Verbosity
GitVersion.Logging.Verbosity.Diagnostic = 4 -> GitVersion.Logging.Verbosity
GitVersion.Logging.Verbosity.Minimal = 1 -> GitVersion.Logging.Verbosity
GitVersion.Logging.Verbosity.Normal = 2 -> GitVersion.Logging.Verbosity
GitVersion.Logging.Verbosity.Quiet = 0 -> GitVersion.Logging.Verbosity
GitVersion.Logging.Verbosity.Verbose = 3 -> GitVersion.Logging.Verbosity
GitVersion.MergeMessage
GitVersion.MergeMessage.FormatName.get -> string?
GitVersion.MergeMessage.IsMergedPullRequest.get -> bool
GitVersion.MergeMessage.MergedBranch.get -> GitVersion.Git.ReferenceName?
GitVersion.MergeMessage.MergeMessage(string! mergeMessage, GitVersion.Configuration.IGitVersionConfiguration! configuration) -> void
GitVersion.MergeMessage.PullRequestNumber.get -> int?
GitVersion.MergeMessage.TargetBranch.get -> string?
GitVersion.MergeMessage.Version.get -> GitVersion.SemanticVersion?
GitVersion.OutputType
GitVersion.OutputType.BuildServer = 0 -> GitVersion.OutputType
GitVersion.OutputType.File = 2 -> GitVersion.OutputType
GitVersion.OutputType.Json = 1 -> GitVersion.OutputType
GitVersion.OutputVariables.GitVersionVariables
GitVersion.OutputVariables.GitVersionVariables.AssemblySemFileVer.get -> string?
GitVersion.OutputVariables.GitVersionVariables.AssemblySemFileVer.init -> void
GitVersion.OutputVariables.GitVersionVariables.AssemblySemVer.get -> string?
GitVersion.OutputVariables.GitVersionVariables.AssemblySemVer.init -> void
GitVersion.OutputVariables.GitVersionVariables.BranchName.get -> string?
GitVersion.OutputVariables.GitVersionVariables.BranchName.init -> void
GitVersion.OutputVariables.GitVersionVariables.BuildMetaData.get -> string?
GitVersion.OutputVariables.GitVersionVariables.BuildMetaData.init -> void
GitVersion.OutputVariables.GitVersionVariables.CommitDate.get -> string?
GitVersion.OutputVariables.GitVersionVariables.CommitDate.init -> void
GitVersion.OutputVariables.GitVersionVariables.CommitsSinceVersionSource.get -> string?
GitVersion.OutputVariables.GitVersionVariables.CommitsSinceVersionSource.init -> void
GitVersion.OutputVariables.GitVersionVariables.EscapedBranchName.get -> string?
GitVersion.OutputVariables.GitVersionVariables.EscapedBranchName.init -> void
GitVersion.OutputVariables.GitVersionVariables.FullBuildMetaData.get -> string?
GitVersion.OutputVariables.GitVersionVariables.FullBuildMetaData.init -> void
GitVersion.OutputVariables.GitVersionVariables.FullSemVer.get -> string!
GitVersion.OutputVariables.GitVersionVariables.FullSemVer.init -> void
GitVersion.OutputVariables.GitVersionVariables.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string!, string?>>!
GitVersion.OutputVariables.GitVersionVariables.GitVersionVariables(string! Major, string! Minor, string! Patch, string? BuildMetaData, string? FullBuildMetaData, string? BranchName, string? EscapedBranchName, string? Sha, string? ShortSha, string! MajorMinorPatch, string! SemVer, string! FullSemVer, string? AssemblySemVer, string? AssemblySemFileVer, string? PreReleaseTag, string? PreReleaseTagWithDash, string? PreReleaseLabel, string? PreReleaseLabelWithDash, string? PreReleaseNumber, string! WeightedPreReleaseNumber, string? InformationalVersion, string? CommitDate, string? VersionSourceSha, string? CommitsSinceVersionSource, string? UncommittedChanges) -> void
GitVersion.OutputVariables.GitVersionVariables.InformationalVersion.get -> string?
GitVersion.OutputVariables.GitVersionVariables.InformationalVersion.init -> void
GitVersion.OutputVariables.GitVersionVariables.Major.get -> string!
GitVersion.OutputVariables.GitVersionVariables.Major.init -> void
GitVersion.OutputVariables.GitVersionVariables.MajorMinorPatch.get -> string!
GitVersion.OutputVariables.GitVersionVariables.MajorMinorPatch.init -> void
GitVersion.OutputVariables.GitVersionVariables.Minor.get -> string!
GitVersion.OutputVariables.GitVersionVariables.Minor.init -> void
GitVersion.OutputVariables.GitVersionVariables.Patch.get -> string!
GitVersion.OutputVariables.GitVersionVariables.Patch.init -> void
GitVersion.OutputVariables.GitVersionVariables.PreReleaseLabel.get -> string?
GitVersion.OutputVariables.GitVersionVariables.PreReleaseLabel.init -> void
GitVersion.OutputVariables.GitVersionVariables.PreReleaseLabelWithDash.get -> string?
GitVersion.OutputVariables.GitVersionVariables.PreReleaseLabelWithDash.init -> void
GitVersion.OutputVariables.GitVersionVariables.PreReleaseNumber.get -> string?
GitVersion.OutputVariables.GitVersionVariables.PreReleaseNumber.init -> void
GitVersion.OutputVariables.GitVersionVariables.PreReleaseTag.get -> string?
GitVersion.OutputVariables.GitVersionVariables.PreReleaseTag.init -> void
GitVersion.OutputVariables.GitVersionVariables.PreReleaseTagWithDash.get -> string?
GitVersion.OutputVariables.GitVersionVariables.PreReleaseTagWithDash.init -> void
GitVersion.OutputVariables.GitVersionVariables.SemVer.get -> string!
GitVersion.OutputVariables.GitVersionVariables.SemVer.init -> void
GitVersion.OutputVariables.GitVersionVariables.Sha.get -> string?
GitVersion.OutputVariables.GitVersionVariables.Sha.init -> void
GitVersion.OutputVariables.GitVersionVariables.ShortSha.get -> string?
GitVersion.OutputVariables.GitVersionVariables.ShortSha.init -> void
GitVersion.OutputVariables.GitVersionVariables.TryGetValue(string! variable, out string? variableValue) -> bool
GitVersion.OutputVariables.GitVersionVariables.UncommittedChanges.get -> string?
GitVersion.OutputVariables.GitVersionVariables.UncommittedChanges.init -> void
GitVersion.OutputVariables.GitVersionVariables.VersionSourceSha.get -> string?
GitVersion.OutputVariables.GitVersionVariables.VersionSourceSha.init -> void
GitVersion.OutputVariables.GitVersionVariables.WeightedPreReleaseNumber.get -> string!
GitVersion.OutputVariables.GitVersionVariables.WeightedPreReleaseNumber.init -> void
GitVersion.OutputVariables.IVersionVariableSerializer
GitVersion.OutputVariables.IVersionVariableSerializer.FromFile(string! filePath) -> GitVersion.OutputVariables.GitVersionVariables!
GitVersion.OutputVariables.IVersionVariableSerializer.FromJson(string! json) -> GitVersion.OutputVariables.GitVersionVariables!
GitVersion.OutputVariables.IVersionVariableSerializer.ToFile(GitVersion.OutputVariables.GitVersionVariables! gitVersionVariables, string! filePath) -> void
GitVersion.OutputVariables.IVersionVariableSerializer.ToJson(GitVersion.OutputVariables.GitVersionVariables! gitVersionVariables) -> string!
GitVersion.RepositoryInfo
GitVersion.RepositoryInfo.ClonePath -> string?
GitVersion.RepositoryInfo.CommitId -> string?
GitVersion.RepositoryInfo.TargetBranch -> string?
GitVersion.RepositoryInfo.TargetUrl -> string?
GitVersion.SemanticVersion
GitVersion.SemanticVersion.BuildMetaData.get -> GitVersion.SemanticVersionBuildMetaData!
GitVersion.SemanticVersion.BuildMetaData.init -> void
GitVersion.SemanticVersion.CompareTo(GitVersion.SemanticVersion? value) -> int
GitVersion.SemanticVersion.CompareTo(GitVersion.SemanticVersion? value, bool includePreRelease) -> int
GitVersion.SemanticVersion.Equals(GitVersion.SemanticVersion? obj) -> bool
GitVersion.SemanticVersion.Increment(GitVersion.VersionField increment, string? label, bool forceIncrement, params GitVersion.SemanticVersion?[]! alternativeSemanticVersions) -> GitVersion.SemanticVersion!
GitVersion.SemanticVersion.Increment(GitVersion.VersionField increment, string? label, GitVersion.SemanticVersion.IncrementMode mode, params GitVersion.SemanticVersion?[]! alternativeSemanticVersions) -> GitVersion.SemanticVersion!
GitVersion.SemanticVersion.Increment(GitVersion.VersionField increment, string? label, params GitVersion.SemanticVersion?[]! alternativeSemanticVersions) -> GitVersion.SemanticVersion!
GitVersion.SemanticVersion.IncrementMode
GitVersion.SemanticVersion.IncrementMode.EnsureIntegrity = 2 -> GitVersion.SemanticVersion.IncrementMode
GitVersion.SemanticVersion.IncrementMode.Force = 1 -> GitVersion.SemanticVersion.IncrementMode
GitVersion.SemanticVersion.IncrementMode.Standard = 0 -> GitVersion.SemanticVersion.IncrementMode
GitVersion.SemanticVersion.IsEmpty() -> bool
GitVersion.SemanticVersion.IsEqualTo(GitVersion.SemanticVersion? value, bool includePreRelease = true) -> bool
GitVersion.SemanticVersion.IsGreaterThan(GitVersion.SemanticVersion? value, bool includePreRelease = true) -> bool
GitVersion.SemanticVersion.IsGreaterThanOrEqualTo(GitVersion.SemanticVersion? value, bool includePreRelease = true) -> bool
GitVersion.SemanticVersion.IsLabeledWith(string! value) -> bool
GitVersion.SemanticVersion.IsLessThan(GitVersion.SemanticVersion? value, bool includePreRelease = true) -> bool
GitVersion.SemanticVersion.IsLessThanOrEqualTo(GitVersion.SemanticVersion? value, bool includePreRelease = true) -> bool
GitVersion.SemanticVersion.IsMatchForBranchSpecificLabel(string? value) -> bool
GitVersion.SemanticVersion.IsPreRelease.get -> bool
GitVersion.SemanticVersion.Major.get -> long
GitVersion.SemanticVersion.Major.init -> void
GitVersion.SemanticVersion.Minor.get -> long
GitVersion.SemanticVersion.Minor.init -> void
GitVersion.SemanticVersion.Patch.get -> long
GitVersion.SemanticVersion.Patch.init -> void
GitVersion.SemanticVersion.PreReleaseTag.get -> GitVersion.SemanticVersionPreReleaseTag!
GitVersion.SemanticVersion.PreReleaseTag.init -> void
GitVersion.SemanticVersion.SemanticVersion(GitVersion.SemanticVersion! semanticVersion) -> void
GitVersion.SemanticVersion.SemanticVersion(long major = 0, long minor = 0, long patch = 0) -> void
GitVersion.SemanticVersion.ToString(string! format) -> string!
GitVersion.SemanticVersion.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
GitVersion.SemanticVersion.WithLabel(string? label) -> GitVersion.SemanticVersion!
GitVersion.SemanticVersionBuildMetaData
GitVersion.SemanticVersionBuildMetaData.Branch.get -> string?
GitVersion.SemanticVersionBuildMetaData.Branch.init -> void
GitVersion.SemanticVersionBuildMetaData.CommitDate.get -> System.DateTimeOffset?
GitVersion.SemanticVersionBuildMetaData.CommitDate.init -> void
GitVersion.SemanticVersionBuildMetaData.CommitsSinceTag.get -> long?
GitVersion.SemanticVersionBuildMetaData.CommitsSinceTag.init -> void
GitVersion.SemanticVersionBuildMetaData.CommitsSinceVersionSource.get -> long
GitVersion.SemanticVersionBuildMetaData.CommitsSinceVersionSource.init -> void
GitVersion.SemanticVersionBuildMetaData.Equals(GitVersion.SemanticVersionBuildMetaData? other) -> bool
GitVersion.SemanticVersionBuildMetaData.OtherMetaData.get -> string?
GitVersion.SemanticVersionBuildMetaData.OtherMetaData.init -> void
GitVersion.SemanticVersionBuildMetaData.SemanticVersionBuildMetaData() -> void
GitVersion.SemanticVersionBuildMetaData.SemanticVersionBuildMetaData(GitVersion.SemanticVersionBuildMetaData! buildMetaData) -> void
GitVersion.SemanticVersionBuildMetaData.SemanticVersionBuildMetaData(string? versionSourceSha, long? commitsSinceTag, string? branch, string? commitSha, string? commitShortSha, System.DateTimeOffset? commitDate, long numberOfUnCommittedChanges, string? otherMetadata = null) -> void
GitVersion.SemanticVersionBuildMetaData.Sha.get -> string?
GitVersion.SemanticVersionBuildMetaData.Sha.init -> void
GitVersion.SemanticVersionBuildMetaData.ShortSha.get -> string?
GitVersion.SemanticVersionBuildMetaData.ShortSha.init -> void
GitVersion.SemanticVersionBuildMetaData.ToString(string! format) -> string!
GitVersion.SemanticVersionBuildMetaData.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
GitVersion.SemanticVersionBuildMetaData.UncommittedChanges.get -> long
GitVersion.SemanticVersionBuildMetaData.UncommittedChanges.init -> void
GitVersion.SemanticVersionBuildMetaData.VersionSourceSha.get -> string?
GitVersion.SemanticVersionBuildMetaData.VersionSourceSha.init -> void
GitVersion.SemanticVersionFormat
GitVersion.SemanticVersionFormat.Loose = 1 -> GitVersion.SemanticVersionFormat
GitVersion.SemanticVersionFormat.Strict = 0 -> GitVersion.SemanticVersionFormat
GitVersion.SemanticVersionFormatValues
GitVersion.SemanticVersionFormatValues.AssemblyFileSemVer.get -> string?
GitVersion.SemanticVersionFormatValues.AssemblySemVer.get -> string?
GitVersion.SemanticVersionFormatValues.BranchName.get -> string?
GitVersion.SemanticVersionFormatValues.BuildMetaData.get -> string!
GitVersion.SemanticVersionFormatValues.CommitDate.get -> string?
GitVersion.SemanticVersionFormatValues.CommitsSinceVersionSource.get -> string!
GitVersion.SemanticVersionFormatValues.EscapedBranchName.get -> string?
GitVersion.SemanticVersionFormatValues.FullBuildMetaData.get -> string!
GitVersion.SemanticVersionFormatValues.FullSemVer.get -> string!
GitVersion.SemanticVersionFormatValues.InformationalVersion.get -> string!
GitVersion.SemanticVersionFormatValues.Major.get -> string!
GitVersion.SemanticVersionFormatValues.MajorMinorPatch.get -> string!
GitVersion.SemanticVersionFormatValues.Minor.get -> string!
GitVersion.SemanticVersionFormatValues.Patch.get -> string!
GitVersion.SemanticVersionFormatValues.PreReleaseLabel.get -> string!
GitVersion.SemanticVersionFormatValues.PreReleaseLabelWithDash.get -> string!
GitVersion.SemanticVersionFormatValues.PreReleaseNumber.get -> string!
GitVersion.SemanticVersionFormatValues.PreReleaseTag.get -> string!
GitVersion.SemanticVersionFormatValues.PreReleaseTagWithDash.get -> string!
GitVersion.SemanticVersionFormatValues.SemanticVersionFormatValues(GitVersion.SemanticVersion! semver, GitVersion.Configuration.IGitVersionConfiguration! configuration, int preReleaseWeight) -> void
GitVersion.SemanticVersionFormatValues.SemVer.get -> string!
GitVersion.SemanticVersionFormatValues.Sha.get -> string?
GitVersion.SemanticVersionFormatValues.ShortSha.get -> string?
GitVersion.SemanticVersionFormatValues.UncommittedChanges.get -> string!
GitVersion.SemanticVersionFormatValues.VersionSourceSha.get -> string?
GitVersion.SemanticVersionFormatValues.WeightedPreReleaseNumber.get -> string!
GitVersion.SemanticVersionPreReleaseTag
GitVersion.SemanticVersionPreReleaseTag.CompareTo(GitVersion.SemanticVersionPreReleaseTag? other) -> int
GitVersion.SemanticVersionPreReleaseTag.Equals(GitVersion.SemanticVersionPreReleaseTag? other) -> bool
GitVersion.SemanticVersionPreReleaseTag.HasTag() -> bool
GitVersion.SemanticVersionPreReleaseTag.Name.get -> string!
GitVersion.SemanticVersionPreReleaseTag.Name.init -> void
GitVersion.SemanticVersionPreReleaseTag.Number.get -> long?
GitVersion.SemanticVersionPreReleaseTag.Number.init -> void
GitVersion.SemanticVersionPreReleaseTag.PromoteTagEvenIfNameIsEmpty.get -> bool
GitVersion.SemanticVersionPreReleaseTag.PromoteTagEvenIfNameIsEmpty.init -> void
GitVersion.SemanticVersionPreReleaseTag.SemanticVersionPreReleaseTag() -> void
GitVersion.SemanticVersionPreReleaseTag.SemanticVersionPreReleaseTag(GitVersion.SemanticVersionPreReleaseTag! preReleaseTag) -> void
GitVersion.SemanticVersionPreReleaseTag.SemanticVersionPreReleaseTag(string! name, long? number, bool promoteTagEvenIfNameIsEmpty) -> void
GitVersion.SemanticVersionPreReleaseTag.ToString(string! format) -> string!
GitVersion.SemanticVersionPreReleaseTag.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
GitVersion.SemanticVersionWithTag
GitVersion.SemanticVersionWithTag.CompareTo(GitVersion.SemanticVersionWithTag? other) -> int
GitVersion.SemanticVersionWithTag.SemanticVersionWithTag(GitVersion.SemanticVersion! Value, GitVersion.Git.ITag! Tag) -> void
GitVersion.SemanticVersionWithTag.Tag.get -> GitVersion.Git.ITag!
GitVersion.SemanticVersionWithTag.Tag.init -> void
GitVersion.SemanticVersionWithTag.Value.get -> GitVersion.SemanticVersion!
GitVersion.SemanticVersionWithTag.Value.init -> void
GitVersion.Settings
GitVersion.Settings.NoCache -> bool
GitVersion.Settings.NoFetch -> bool
GitVersion.Settings.NoNormalize -> bool
GitVersion.Settings.OnlyTrackedBranches -> bool
GitVersion.VersionCalculation.BaseVersion
GitVersion.VersionCalculation.BaseVersion.BaseVersion() -> void
GitVersion.VersionCalculation.BaseVersion.BaseVersion(GitVersion.VersionCalculation.BaseVersionOperand! Operand) -> void
GitVersion.VersionCalculation.BaseVersion.BaseVersion(string! source, GitVersion.SemanticVersion! semanticVersion, GitVersion.Git.ICommit? baseVersionSource = null) -> void
GitVersion.VersionCalculation.BaseVersion.BaseVersionSource.get -> GitVersion.Git.ICommit?
GitVersion.VersionCalculation.BaseVersion.GetIncrementedVersion() -> GitVersion.SemanticVersion!
GitVersion.VersionCalculation.BaseVersion.Operand.get -> GitVersion.VersionCalculation.BaseVersionOperand!
GitVersion.VersionCalculation.BaseVersion.Operand.init -> void
GitVersion.VersionCalculation.BaseVersion.Operator.get -> GitVersion.VersionCalculation.BaseVersionOperator?
GitVersion.VersionCalculation.BaseVersion.Operator.init -> void
GitVersion.VersionCalculation.BaseVersion.SemanticVersion.get -> GitVersion.SemanticVersion!
GitVersion.VersionCalculation.BaseVersion.ShouldIncrement.get -> bool
GitVersion.VersionCalculation.BaseVersion.Source.get -> string!
GitVersion.VersionCalculation.BaseVersionOperand
GitVersion.VersionCalculation.BaseVersionOperand.BaseVersionOperand() -> void
GitVersion.VersionCalculation.BaseVersionOperand.BaseVersionOperand(string! Source, GitVersion.SemanticVersion! SemanticVersion, GitVersion.Git.ICommit? BaseVersionSource = null) -> void
GitVersion.VersionCalculation.BaseVersionOperand.BaseVersionSource.get -> GitVersion.Git.ICommit?
GitVersion.VersionCalculation.BaseVersionOperand.BaseVersionSource.init -> void
GitVersion.VersionCalculation.BaseVersionOperand.SemanticVersion.get -> GitVersion.SemanticVersion!
GitVersion.VersionCalculation.BaseVersionOperand.SemanticVersion.init -> void
GitVersion.VersionCalculation.BaseVersionOperand.Source.get -> string!
GitVersion.VersionCalculation.BaseVersionOperand.Source.init -> void
GitVersion.VersionCalculation.BaseVersionOperator
GitVersion.VersionCalculation.BaseVersionOperator.AlternativeSemanticVersion.get -> GitVersion.SemanticVersion?
GitVersion.VersionCalculation.BaseVersionOperator.AlternativeSemanticVersion.init -> void
GitVersion.VersionCalculation.BaseVersionOperator.BaseVersionSource.get -> GitVersion.Git.ICommit?
GitVersion.VersionCalculation.BaseVersionOperator.BaseVersionSource.init -> void
GitVersion.VersionCalculation.BaseVersionOperator.ForceIncrement.get -> bool
GitVersion.VersionCalculation.BaseVersionOperator.ForceIncrement.init -> void
GitVersion.VersionCalculation.BaseVersionOperator.Increment.get -> GitVersion.VersionField
GitVersion.VersionCalculation.BaseVersionOperator.Increment.init -> void
GitVersion.VersionCalculation.BaseVersionOperator.Label.get -> string?
GitVersion.VersionCalculation.BaseVersionOperator.Label.init -> void
GitVersion.VersionCalculation.BaseVersionOperator.Source.get -> string!
GitVersion.VersionCalculation.BaseVersionOperator.Source.init -> void
GitVersion.VersionCalculation.Caching.GitVersionCacheKey
GitVersion.VersionCalculation.Caching.GitVersionCacheKey.GitVersionCacheKey(string! Value) -> void
GitVersion.VersionCalculation.Caching.GitVersionCacheKey.Value.get -> string!
GitVersion.VersionCalculation.Caching.GitVersionCacheKey.Value.init -> void
GitVersion.VersionCalculation.Caching.IGitVersionCacheProvider
GitVersion.VersionCalculation.Caching.IGitVersionCacheProvider.LoadVersionVariablesFromDiskCache() -> GitVersion.OutputVariables.GitVersionVariables?
GitVersion.VersionCalculation.Caching.IGitVersionCacheProvider.WriteVariablesToDiskCache(GitVersion.OutputVariables.GitVersionVariables! versionVariables) -> void
GitVersion.VersionCalculation.CommitMessageIncrementMode
GitVersion.VersionCalculation.CommitMessageIncrementMode.Disabled = 1 -> GitVersion.VersionCalculation.CommitMessageIncrementMode
GitVersion.VersionCalculation.CommitMessageIncrementMode.Enabled = 0 -> GitVersion.VersionCalculation.CommitMessageIncrementMode
GitVersion.VersionCalculation.CommitMessageIncrementMode.MergeMessageOnly = 2 -> GitVersion.VersionCalculation.CommitMessageIncrementMode
GitVersion.VersionCalculation.DeploymentMode
GitVersion.VersionCalculation.DeploymentMode.ContinuousDelivery = 1 -> GitVersion.VersionCalculation.DeploymentMode
GitVersion.VersionCalculation.DeploymentMode.ContinuousDeployment = 2 -> GitVersion.VersionCalculation.DeploymentMode
GitVersion.VersionCalculation.DeploymentMode.ManualDeployment = 0 -> GitVersion.VersionCalculation.DeploymentMode
GitVersion.VersionCalculation.IBaseVersion
GitVersion.VersionCalculation.IBaseVersion.SemanticVersion.get -> GitVersion.SemanticVersion!
GitVersion.VersionCalculation.IBaseVersionIncrement
GitVersion.VersionCalculation.IBaseVersionIncrement.BaseVersionSource.get -> GitVersion.Git.ICommit?
GitVersion.VersionCalculation.IBaseVersionIncrement.Source.get -> string!
GitVersion.VersionCalculation.IDeploymentModeCalculator
GitVersion.VersionCalculation.IDeploymentModeCalculator.Calculate(GitVersion.SemanticVersion! semanticVersion, GitVersion.Git.ICommit? baseVersionSource) -> GitVersion.SemanticVersion!
GitVersion.VersionCalculation.IEffectiveBranchConfigurationFinder
GitVersion.VersionCalculation.IEffectiveBranchConfigurationFinder.GetConfigurations(GitVersion.Git.IBranch! branch, GitVersion.Configuration.IGitVersionConfiguration! configuration) -> System.Collections.Generic.IEnumerable<GitVersion.Configuration.EffectiveBranchConfiguration!>!
GitVersion.VersionCalculation.IIncrementStrategyFinder
GitVersion.VersionCalculation.IIncrementStrategyFinder.DetermineIncrementedField(GitVersion.Git.ICommit! currentCommit, GitVersion.Git.ICommit? baseVersionSource, bool shouldIncrement, GitVersion.Configuration.EffectiveConfiguration! configuration, string? label) -> GitVersion.VersionField
GitVersion.VersionCalculation.IIncrementStrategyFinder.GetIncrementForcedByCommit(GitVersion.Git.ICommit! commit, GitVersion.Configuration.IGitVersionConfiguration! configuration) -> GitVersion.VersionField
GitVersion.VersionCalculation.IIncrementStrategyFinder.GetIncrementForCommits(string? majorVersionBumpMessage, string? minorVersionBumpMessage, string? patchVersionBumpMessage, string? noBumpMessage, GitVersion.Git.ICommit![]! commits) -> GitVersion.VersionField?
GitVersion.VersionCalculation.IIncrementStrategyFinder.GetMergedCommits(GitVersion.Git.ICommit! mergeCommit, int index, GitVersion.Configuration.IIgnoreConfiguration! ignore) -> System.Collections.Generic.IEnumerable<GitVersion.Git.ICommit!>!
GitVersion.VersionCalculation.INextVersionCalculator
GitVersion.VersionCalculation.INextVersionCalculator.FindVersion() -> GitVersion.SemanticVersion!
GitVersion.VersionCalculation.IVariableProvider
GitVersion.VersionCalculation.IVariableProvider.GetVariablesFor(GitVersion.SemanticVersion! semanticVersion, GitVersion.Configuration.IGitVersionConfiguration! configuration, int preReleaseWeight) -> GitVersion.OutputVariables.GitVersionVariables!
GitVersion.VersionCalculation.IVersionFilter
GitVersion.VersionCalculation.IVersionFilter.Exclude(GitVersion.VersionCalculation.IBaseVersion! baseVersion, out string? reason) -> bool
GitVersion.VersionCalculation.IVersionStrategy
GitVersion.VersionCalculation.IVersionStrategy.GetBaseVersions(GitVersion.Configuration.EffectiveBranchConfiguration! configuration) -> System.Collections.Generic.IEnumerable<GitVersion.VersionCalculation.BaseVersion!>!
GitVersion.VersionCalculation.NextVersion
GitVersion.VersionCalculation.NextVersion.BaseVersion.get -> GitVersion.VersionCalculation.IBaseVersion!
GitVersion.VersionCalculation.NextVersion.BranchConfiguration.get -> GitVersion.Configuration.EffectiveBranchConfiguration!
GitVersion.VersionCalculation.NextVersion.CompareTo(GitVersion.VersionCalculation.NextVersion? other) -> int
GitVersion.VersionCalculation.NextVersion.Configuration.get -> GitVersion.Configuration.EffectiveConfiguration!
GitVersion.VersionCalculation.NextVersion.Equals(GitVersion.VersionCalculation.NextVersion? other) -> bool
GitVersion.VersionCalculation.NextVersion.IncrementedVersion.get -> GitVersion.SemanticVersion!
GitVersion.VersionCalculation.NextVersion.NextVersion(GitVersion.SemanticVersion! incrementedVersion, GitVersion.VersionCalculation.IBaseVersion! baseVersion, GitVersion.Configuration.EffectiveBranchConfiguration! configuration) -> void
GitVersion.VersionCalculation.VersionCalculationModule
GitVersion.VersionCalculation.VersionCalculationModule.RegisterTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
GitVersion.VersionCalculation.VersionCalculationModule.VersionCalculationModule() -> void
GitVersion.VersionCalculation.VersionStrategies
GitVersion.VersionCalculation.VersionStrategies.ConfiguredNextVersion = 2 -> GitVersion.VersionCalculation.VersionStrategies
GitVersion.VersionCalculation.VersionStrategies.Fallback = 1 -> GitVersion.VersionCalculation.VersionStrategies
GitVersion.VersionCalculation.VersionStrategies.MergeMessage = 4 -> GitVersion.VersionCalculation.VersionStrategies
GitVersion.VersionCalculation.VersionStrategies.None = 0 -> GitVersion.VersionCalculation.VersionStrategies
GitVersion.VersionCalculation.VersionStrategies.TaggedCommit = 8 -> GitVersion.VersionCalculation.VersionStrategies
GitVersion.VersionCalculation.VersionStrategies.TrackReleaseBranches = 16 -> GitVersion.VersionCalculation.VersionStrategies
GitVersion.VersionCalculation.VersionStrategies.TrunkBased = 64 -> GitVersion.VersionCalculation.VersionStrategies
GitVersion.VersionCalculation.VersionStrategies.VersionInBranchName = 32 -> GitVersion.VersionCalculation.VersionStrategies
GitVersion.VersionCalculation.VersionStrategyModule
GitVersion.VersionCalculation.VersionStrategyModule.RegisterTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
GitVersion.VersionCalculation.VersionStrategyModule.VersionStrategyModule() -> void
GitVersion.VersionField
GitVersion.VersionField.Major = 3 -> GitVersion.VersionField
GitVersion.VersionField.Minor = 2 -> GitVersion.VersionField
GitVersion.VersionField.None = 0 -> GitVersion.VersionField
GitVersion.VersionField.Patch = 1 -> GitVersion.VersionField
GitVersion.WarningException
GitVersion.WarningException.WarningException() -> void
GitVersion.WarningException.WarningException(string! message) -> void
GitVersion.WarningException.WarningException(string? message, System.Exception? innerException) -> void
GitVersion.WixInfo
GitVersion.WixInfo.UpdateWixVersionFile -> bool
override GitVersion.Git.BranchCommit.Equals(object? obj) -> bool
override GitVersion.Git.BranchCommit.GetHashCode() -> int
override GitVersion.Git.ReferenceName.Equals(object? obj) -> bool
override GitVersion.Git.ReferenceName.GetHashCode() -> int
override GitVersion.Git.ReferenceName.ToString() -> string!
override GitVersion.Helpers.LambdaKeyComparer<TSource, TKey>.Compare(TSource? x, TSource? y) -> int
override GitVersion.SemanticVersion.Equals(object? obj) -> bool
override GitVersion.SemanticVersion.GetHashCode() -> int
override GitVersion.SemanticVersion.ToString() -> string!
override GitVersion.SemanticVersionBuildMetaData.Equals(object? obj) -> bool
override GitVersion.SemanticVersionBuildMetaData.GetHashCode() -> int
override GitVersion.SemanticVersionBuildMetaData.ToString() -> string!
override GitVersion.SemanticVersionPreReleaseTag.Equals(object? obj) -> bool
override GitVersion.SemanticVersionPreReleaseTag.GetHashCode() -> int
override GitVersion.SemanticVersionPreReleaseTag.ToString() -> string!
override GitVersion.SemanticVersionWithTag.ToString() -> string!
override GitVersion.VersionCalculation.BaseVersion.ToString() -> string!
override GitVersion.VersionCalculation.BaseVersionOperand.ToString() -> string!
override GitVersion.VersionCalculation.BaseVersionOperator.ToString() -> string!
override GitVersion.VersionCalculation.NextVersion.Equals(object? other) -> bool
override GitVersion.VersionCalculation.NextVersion.GetHashCode() -> int
override GitVersion.VersionCalculation.NextVersion.ToString() -> string!
static GitVersion.Extensions.AssemblyVersionsGeneratorExtensions.GetAssemblyFileVersion(this GitVersion.SemanticVersion! sv, GitVersion.Configuration.AssemblyFileVersioningScheme scheme) -> string?
static GitVersion.Extensions.AssemblyVersionsGeneratorExtensions.GetAssemblyVersion(this GitVersion.SemanticVersion! sv, GitVersion.Configuration.AssemblyVersioningScheme scheme) -> string?
static GitVersion.Extensions.CommonExtensions.NotNull<T>(this T? value, string! name = "") -> T!
static GitVersion.Extensions.CommonExtensions.NotNullOrEmpty(this string? value, string! name = "") -> string!
static GitVersion.Extensions.CommonExtensions.NotNullOrWhitespace(this string? value, string! name = "") -> string!
static GitVersion.Extensions.DictionaryExtensions.GetOrAdd<TKey, TValue>(this System.Collections.Generic.IDictionary<TKey, TValue>! dict, TKey key, System.Func<TValue>! getValue) -> TValue
static GitVersion.Extensions.EnumerableExtensions.AddRange<T>(this System.Collections.Generic.ICollection<T>! source, System.Collections.Generic.IEnumerable<T>! items) -> void
static GitVersion.Extensions.EnumerableExtensions.OnlyOrDefault<T>(this System.Collections.Generic.IEnumerable<T>! source) -> T?
static GitVersion.Extensions.EnumerableExtensions.SingleOfType<T>(this System.Collections.IEnumerable! source) -> T
static GitVersion.Extensions.GitExtensions.CreateGitLogArgs(int? maxCommits) -> string!
static GitVersion.Extensions.GitExtensions.DumpGraph(string! workingDirectory, System.Action<string!>? writer = null, int? maxCommits = null) -> void
static GitVersion.Extensions.IncrementStrategyExtensions.ToVersionField(this GitVersion.IncrementStrategy strategy) -> GitVersion.VersionField
static GitVersion.Extensions.ReadEmbeddedResourceExtensions.ReadAsStringFromEmbeddedResource(this string! resourceName, System.Reflection.Assembly! assembly) -> string!
static GitVersion.Extensions.ReadEmbeddedResourceExtensions.ReadAsStringFromEmbeddedResource<T>(this string! resourceName) -> string!
static GitVersion.Extensions.ServiceCollectionExtensions.AddModule(this Microsoft.Extensions.DependencyInjection.IServiceCollection! serviceCollection, GitVersion.IGitVersionModule! gitVersionModule) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static GitVersion.Extensions.ServiceCollectionExtensions.GetServiceForType<TService, TType>(this System.IServiceProvider! serviceProvider) -> TService
static GitVersion.Extensions.StringExtensions.AppendLineFormat(this System.Text.StringBuilder! stringBuilder, string! format, params object![]! args) -> void
static GitVersion.Extensions.StringExtensions.IsEmpty(this string? value) -> bool
static GitVersion.Extensions.StringExtensions.IsEquivalentTo(this string! self, string? other) -> bool
static GitVersion.Extensions.StringExtensions.IsNullOrEmpty(this string? value) -> bool
static GitVersion.Extensions.StringExtensions.IsNullOrWhiteSpace(this string? value) -> bool
static GitVersion.Extensions.StringExtensions.RegexReplace(this string! input, string! pattern, string! replace, System.Text.RegularExpressions.RegexOptions options = System.Text.RegularExpressions.RegexOptions.None) -> string!
static GitVersion.Extensions.StringExtensions.WithPrefixIfNotNullOrEmpty(this string! value, string! prefix) -> string!
static GitVersion.Git.BranchCommit.operator !=(GitVersion.Git.BranchCommit left, GitVersion.Git.BranchCommit right) -> bool
static GitVersion.Git.BranchCommit.operator ==(GitVersion.Git.BranchCommit left, GitVersion.Git.BranchCommit right) -> bool
static GitVersion.Git.CommitExtensions.IsMergeCommit(this GitVersion.Git.ICommit! source) -> bool
static GitVersion.Git.ReferenceName.FromBranchName(string! branchName) -> GitVersion.Git.ReferenceName!
static GitVersion.Git.ReferenceName.Parse(string! canonicalName) -> GitVersion.Git.ReferenceName!
static GitVersion.Git.ReferenceName.TryParse(out GitVersion.Git.ReferenceName? value, string! canonicalName) -> bool
static GitVersion.Helpers.Disposable.Create(System.Action! disposer) -> System.IDisposable!
static GitVersion.Helpers.Disposable.Create<T>(T value, System.Action! disposer) -> GitVersion.Helpers.IDisposable<T>!
static GitVersion.Helpers.EncodingHelper.DetectEncoding(System.Collections.Generic.IList<byte>! bytes) -> System.Text.Encoding?
static GitVersion.Helpers.EncodingHelper.DetectEncoding(string? filename) -> System.Text.Encoding?
static GitVersion.Helpers.ServiceMessageEscapeHelper.EscapeValue(string? value) -> string?
static GitVersion.Logging.LogExtensions.Debug(this GitVersion.Logging.ILog! log, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Debug(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Debug(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.Debug(this GitVersion.Logging.ILog! log, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.DiagnosticVerbosity(this GitVersion.Logging.ILog! log) -> System.IDisposable!
static GitVersion.Logging.LogExtensions.Error(this GitVersion.Logging.ILog! log, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Error(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Error(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.Error(this GitVersion.Logging.ILog! log, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.GetVerbosityForLevel(GitVersion.Logging.LogLevel level) -> GitVersion.Logging.Verbosity
static GitVersion.Logging.LogExtensions.Info(this GitVersion.Logging.ILog! log, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Info(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Info(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.Info(this GitVersion.Logging.ILog! log, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.MinimalVerbosity(this GitVersion.Logging.ILog! log) -> System.IDisposable!
static GitVersion.Logging.LogExtensions.NormalVerbosity(this GitVersion.Logging.ILog! log) -> System.IDisposable!
static GitVersion.Logging.LogExtensions.QuietVerbosity(this GitVersion.Logging.ILog! log) -> System.IDisposable!
static GitVersion.Logging.LogExtensions.Verbose(this GitVersion.Logging.ILog! log, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Verbose(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Verbose(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.Verbose(this GitVersion.Logging.ILog! log, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.VerboseVerbosity(this GitVersion.Logging.ILog! log) -> System.IDisposable!
static GitVersion.Logging.LogExtensions.Warning(this GitVersion.Logging.ILog! log, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Warning(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, GitVersion.Logging.LogAction! logAction) -> void
static GitVersion.Logging.LogExtensions.Warning(this GitVersion.Logging.ILog! log, GitVersion.Logging.Verbosity verbosity, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.Warning(this GitVersion.Logging.ILog! log, string! format, params object![]! args) -> void
static GitVersion.Logging.LogExtensions.Write(this GitVersion.Logging.ILog! log, GitVersion.Logging.LogLevel level, string! format, params object![]! args) -> void
static GitVersion.MergeMessage.TryParse(GitVersion.Git.ICommit! mergeCommit, GitVersion.Configuration.IGitVersionConfiguration! configuration, out GitVersion.MergeMessage? mergeMessage) -> bool
static GitVersion.SemanticVersion.Parse(string! version, string? tagPrefixRegex, GitVersion.SemanticVersionFormat versionFormat = GitVersion.SemanticVersionFormat.Strict) -> GitVersion.SemanticVersion!
static GitVersion.SemanticVersion.operator !=(GitVersion.SemanticVersion? v1, GitVersion.SemanticVersion? v2) -> bool
static GitVersion.SemanticVersion.operator <(GitVersion.SemanticVersion! v1, GitVersion.SemanticVersion! v2) -> bool
static GitVersion.SemanticVersion.operator <=(GitVersion.SemanticVersion! v1, GitVersion.SemanticVersion! v2) -> bool
static GitVersion.SemanticVersion.operator ==(GitVersion.SemanticVersion? v1, GitVersion.SemanticVersion? v2) -> bool
static GitVersion.SemanticVersion.operator >(GitVersion.SemanticVersion! v1, GitVersion.SemanticVersion! v2) -> bool
static GitVersion.SemanticVersion.operator >=(GitVersion.SemanticVersion! v1, GitVersion.SemanticVersion! v2) -> bool
static GitVersion.SemanticVersion.TryParse(string! version, string? tagPrefixRegex, out GitVersion.SemanticVersion? semanticVersion, GitVersion.SemanticVersionFormat format = GitVersion.SemanticVersionFormat.Strict) -> bool
static GitVersion.SemanticVersionBuildMetaData.Parse(string? buildMetaData) -> GitVersion.SemanticVersionBuildMetaData!
static GitVersion.SemanticVersionBuildMetaData.implicit operator GitVersion.SemanticVersionBuildMetaData!(string! preReleaseTag) -> GitVersion.SemanticVersionBuildMetaData!
static GitVersion.SemanticVersionBuildMetaData.implicit operator string?(GitVersion.SemanticVersionBuildMetaData? preReleaseTag) -> string?
static GitVersion.SemanticVersionBuildMetaData.operator !=(GitVersion.SemanticVersionBuildMetaData? left, GitVersion.SemanticVersionBuildMetaData? right) -> bool
static GitVersion.SemanticVersionBuildMetaData.operator ==(GitVersion.SemanticVersionBuildMetaData? left, GitVersion.SemanticVersionBuildMetaData? right) -> bool
static GitVersion.SemanticVersionPreReleaseTag.implicit operator GitVersion.SemanticVersionPreReleaseTag!(string? preReleaseTag) -> GitVersion.SemanticVersionPreReleaseTag!
static GitVersion.SemanticVersionPreReleaseTag.implicit operator string?(GitVersion.SemanticVersionPreReleaseTag? preReleaseTag) -> string?
static GitVersion.SemanticVersionPreReleaseTag.operator !=(GitVersion.SemanticVersionPreReleaseTag? left, GitVersion.SemanticVersionPreReleaseTag? right) -> bool
static GitVersion.SemanticVersionPreReleaseTag.operator <(GitVersion.SemanticVersionPreReleaseTag? left, GitVersion.SemanticVersionPreReleaseTag? right) -> bool
static GitVersion.SemanticVersionPreReleaseTag.operator <=(GitVersion.SemanticVersionPreReleaseTag? left, GitVersion.SemanticVersionPreReleaseTag? right) -> bool
static GitVersion.SemanticVersionPreReleaseTag.operator ==(GitVersion.SemanticVersionPreReleaseTag? left, GitVersion.SemanticVersionPreReleaseTag? right) -> bool
static GitVersion.SemanticVersionPreReleaseTag.operator >(GitVersion.SemanticVersionPreReleaseTag? left, GitVersion.SemanticVersionPreReleaseTag? right) -> bool
static GitVersion.SemanticVersionPreReleaseTag.operator >=(GitVersion.SemanticVersionPreReleaseTag? left, GitVersion.SemanticVersionPreReleaseTag? right) -> bool
static GitVersion.SemanticVersionPreReleaseTag.Parse(string? preReleaseTag) -> GitVersion.SemanticVersionPreReleaseTag!
static GitVersion.VersionCalculation.NextVersion.operator !=(GitVersion.VersionCalculation.NextVersion! left, GitVersion.VersionCalculation.NextVersion! right) -> bool
static GitVersion.VersionCalculation.NextVersion.operator <(GitVersion.VersionCalculation.NextVersion! left, GitVersion.VersionCalculation.NextVersion! right) -> bool
static GitVersion.VersionCalculation.NextVersion.operator <=(GitVersion.VersionCalculation.NextVersion! left, GitVersion.VersionCalculation.NextVersion! right) -> bool
static GitVersion.VersionCalculation.NextVersion.operator ==(GitVersion.VersionCalculation.NextVersion! left, GitVersion.VersionCalculation.NextVersion? right) -> bool
static GitVersion.VersionCalculation.NextVersion.operator >(GitVersion.VersionCalculation.NextVersion! left, GitVersion.VersionCalculation.NextVersion! right) -> bool
static GitVersion.VersionCalculation.NextVersion.operator >=(GitVersion.VersionCalculation.NextVersion! left, GitVersion.VersionCalculation.NextVersion! right) -> bool
static readonly GitVersion.Git.BranchCommit.Empty -> GitVersion.Git.BranchCommit
static readonly GitVersion.Helpers.Disposable.Empty -> System.IDisposable!
static readonly GitVersion.SemanticVersion.Empty -> GitVersion.SemanticVersion!
static readonly GitVersion.SemanticVersionBuildMetaData.Empty -> GitVersion.SemanticVersionBuildMetaData!
static readonly GitVersion.SemanticVersionPreReleaseTag.Empty -> GitVersion.SemanticVersionPreReleaseTag!
