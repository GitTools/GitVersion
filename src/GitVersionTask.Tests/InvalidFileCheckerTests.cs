using System;
using System.IO;
using GitVersion;
using GitVersionTask.Tests.Mocks;
using Microsoft.Build.Framework;
using NUnit.Framework;

[TestFixture]
public class InvalidFileCheckerTests
{
    string projectDirectory;
    string projectFile;

    [SetUp]
    public void CreateTemporaryProject()
    {
        projectDirectory = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());
        projectFile = Path.Combine(projectDirectory, "Fake.csproj");

        Directory.CreateDirectory(projectDirectory);

        File.Create(projectFile).Close();
    }

    [TearDown]
    public void Cleanup()
    {
        Directory.Delete(projectDirectory, true);
    }

    [Test]
    public void VerifyIgnoreNonAssemblyInfoFile()
    {
        using (var writer = File.CreateText(Path.Combine(projectDirectory, "SomeOtherFile.cs")))
        {
            writer.Write(@"
using System;
using System.Reflection;

[assembly: AssemblyVersion(""1.0.0.0"")]
");
        }

        InvalidFileChecker.CheckForInvalidFiles(new ITaskItem[] { new MockTaskItem { ItemSpec = "SomeOtherFile.cs" } }, projectFile);
    }

    [Test]
    public void VerifyAttributeFound([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion", "System.Reflection.AssemblyVersion")]string attribute)
    {
        using (var writer = File.CreateText(Path.Combine(projectDirectory, "AssemblyInfo.cs")))
        {
            writer.Write(@"
using System;
using System.Reflection;

[assembly:{0}(""1.0.0.0"")]
", attribute);
        }

        var ex = Assert.Throws<WarningException>(() => InvalidFileChecker.CheckForInvalidFiles(new ITaskItem[] { new MockTaskItem { ItemSpec = "AssemblyInfo.cs" } }, projectFile), attribute);
        Assert.That(ex.Message, Is.EqualTo("File contains assembly version attributes with conflict with the attributes generated by GitVersion AssemblyInfo.cs"));
    }

    [Test]
    public void VerifyUnformattedAttributeFound([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion", "System . Reflection   .   AssemblyVersion")]string attribute)
    {
        using (var writer = File.CreateText(Path.Combine(projectDirectory, "AssemblyInfo.cs")))
        {
            writer.Write(@"
using System;
using System.Reflection;

[  assembly   :
{0}     ( ""1.0.0.0"")]
", attribute);
        }

        var ex = Assert.Throws<WarningException>(() => InvalidFileChecker.CheckForInvalidFiles(new ITaskItem[] { new MockTaskItem { ItemSpec = "AssemblyInfo.cs" } }, projectFile), attribute);
        Assert.That(ex.Message, Is.EqualTo("File contains assembly version attributes with conflict with the attributes generated by GitVersion AssemblyInfo.cs"));
    }

    [Test]
    public void VerifyCommentWorks([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion")]string attribute)
    {
        using (var writer = File.CreateText(Path.Combine(projectDirectory, "AssemblyInfo.cs")))
        {
            writer.Write(@"
using System;
using System.Reflection;

//[assembly: {0}(""1.0.0.0"")]
", attribute);
        }

        InvalidFileChecker.CheckForInvalidFiles(new ITaskItem[] { new MockTaskItem { ItemSpec = "AssemblyInfo.cs" } }, projectFile);
    }

    [Test]
    public void VerifyStringWorks([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion")]string attribute)
    {
        using (var writer = File.CreateText(Path.Combine(projectDirectory, "AssemblyInfo.cs")))
        {
            writer.Write(@"
using System;
using System.Reflection;

public class Temp
{{
    static const string Foo = ""[assembly: {0}(""""1.0.0.0"""")]"";
}}
", attribute);
        }

        InvalidFileChecker.CheckForInvalidFiles(new ITaskItem[] { new MockTaskItem { ItemSpec = "AssemblyInfo.cs" } }, projectFile);
    }

    [Test]
    public void VerifyIdentifierWorks([Values("AssemblyVersion", "AssemblyFileVersion", "AssemblyInformationalVersion")]string attribute)
    {
        using (var writer = File.CreateText(Path.Combine(projectDirectory, "AssemblyInfo.cs")))
        {
            writer.Write(@"
using System;
using System.Reflection;

public class {0}
{{
}}
", attribute);
        }

        InvalidFileChecker.CheckForInvalidFiles(new ITaskItem[] { new MockTaskItem { ItemSpec = "AssemblyInfo.cs" } }, projectFile);
    }
}